Time	Sum	Command
1901	29462	> builtin source /usr/local/Cellar/fish/2.7.1/share/fish/config.fish
46	46	-> set -g IFS \n\ \t
10	10	-> set -qg __fish_added_user_paths
11	11	-> or set -g __fish_added_user_paths
14	14	-> function __fish_default_command_not_found_handler...
20	20	-> set -g version $FISH_VERSION
7	391	-> if status --is-interactive...
12	12	--> status --is-interactive
6	372	--> if not contains -- "string" (builtin -n)...
202	237	---> not contains -- "string" (builtin -n)
35	35	----> builtin -n
9	129	---> if not set -q NVIM_LISTEN_ADDRESS...
8	8	----> not set -q NVIM_LISTEN_ADDRESS
6	6	----> and not set -q STY
26	26	----> and not string match -q -- 'eterm*' $TERM
14	80	----> and begin
                set -q KONSOLE_PROFILE_NAME # KDE's konsole
                or string match -q -- "*:*" $ITERM_SESSION_ID # Supporting versions of iTerm2 will include a colon here
                or string match -q -- "st-*" $TERM # suckless' st
                or test -n "$VTE_VERSION" -a "$VTE_VERSION" -ge 3600 # Should be all gtk3-vte-based terms after version 3.6.0.0
                or test "$COLORTERM" = truecolor -o "$COLORTERM" = 24bit # slang expects this
            end
7	7	-----> set -q KONSOLE_PROFILE_NAME
11	11	-----> or string match -q -- "*:*" $ITERM_SESSION_ID
12	12	-----> or string match -q -- "st-*" $TERM
21	21	-----> or test -n "$VTE_VERSION" -a "$VTE_VERSION" -ge 3600
15	15	-----> or test "$COLORTERM" = truecolor -o "$COLORTERM" = 24bit
67	67	-> set -l configdir ~/.config
6	12	-> if set -q XDG_CONFIG_HOME...
6	6	--> set -q XDG_CONFIG_HOME
26	26	-> set -l userdatadir ~/.local/share
5	11	-> if set -q XDG_DATA_HOME...
6	6	--> set -q XDG_DATA_HOME
10	10	-> set -l __extra_completionsdir
9	9	-> set -l __extra_functionsdir
9	9	-> set -l __extra_confdir
7	602	-> if test -f $__fish_datadir/__fish_build_paths.fish...
26	26	--> test -f $__fish_datadir/__fish_build_paths.fish
521	569	--> source $__fish_datadir/__fish_build_paths.fish
25	25	---> set __extra_completionsdir /usr/local/share/fish/vendor_completions.d
12	12	---> set __extra_functionsdir /usr/local/share/fish/vendor_functions.d
11	11	---> set __extra_confdir /usr/local/share/fish/vendor_conf.d
6	52	-> if not set -q fish_function_path...
6	6	--> not set -q fish_function_path
40	40	--> set fish_function_path $configdir/fish/functions $__fish_sysconfdir/functions $__extra_functionsdir $__fish_datadir/functions
6	82	-> if not contains -- $__fish_datadir/functions $fish_function_path...
76	76	--> not contains -- $__fish_datadir/functions $fish_function_path
7	71	-> if not set -q fish_complete_path...
25	25	--> not set -q fish_complete_path
39	39	--> set fish_complete_path $configdir/fish/completions $__fish_sysconfdir/completions $__extra_completionsdir $__fish_datadir/completions $userdatadir/fish/generated_completions
5	36	-> if not contains -- $__fish_datadir/completions $fish_complete_path...
31	31	--> not contains -- $__fish_datadir/completions $fish_complete_path
5	33	-> if test -d /usr/xpg4/bin...
28	28	--> test -d /usr/xpg4/bin
36	36	-> set -g __fish_tmp_path $PATH
7	7	-> function __fish_load_path_helper_paths...
26	26	-> test -r /etc/paths
363	1480	-> and __fish_load_path_helper_paths </etc/paths
48	48	--> set __fish_tmp_path $__fish_tmp_path[-1..1]
21	1033	--> while read -l new_path_comp...
92	92	---> read -l new_path_comp
11	188	---> if test -d $new_path_comp...
22	22	----> test -d $new_path_comp
53	95	----> set -l where (contains -i -- $new_path_comp $__fish_tmp_path)
42	42	-----> contains -i -- $new_path_comp $__fish_tmp_path
24	24	----> and set -e __fish_tmp_path[$where]
36	36	----> set __fish_tmp_path $new_path_comp $__fish_tmp_path
20	20	---> read -l new_path_comp
12	166	---> if test -d $new_path_comp...
18	18	----> test -d $new_path_comp
44	78	----> set -l where (contains -i -- $new_path_comp $__fish_tmp_path)
34	34	-----> contains -i -- $new_path_comp $__fish_tmp_path
22	22	----> and set -e __fish_tmp_path[$where]
36	36	----> set __fish_tmp_path $new_path_comp $__fish_tmp_path
18	18	---> read -l new_path_comp
9	157	---> if test -d $new_path_comp...
15	15	----> test -d $new_path_comp
43	75	----> set -l where (contains -i -- $new_path_comp $__fish_tmp_path)
32	32	-----> contains -i -- $new_path_comp $__fish_tmp_path
22	22	----> and set -e __fish_tmp_path[$where]
36	36	----> set __fish_tmp_path $new_path_comp $__fish_tmp_path
18	18	---> read -l new_path_comp
10	163	---> if test -d $new_path_comp...
17	17	----> test -d $new_path_comp
43	79	----> set -l where (contains -i -- $new_path_comp $__fish_tmp_path)
36	36	-----> contains -i -- $new_path_comp $__fish_tmp_path
22	22	----> and set -e __fish_tmp_path[$where]
35	35	----> set __fish_tmp_path $new_path_comp $__fish_tmp_path
18	18	---> read -l new_path_comp
10	157	---> if test -d $new_path_comp...
16	16	----> test -d $new_path_comp
43	75	----> set -l where (contains -i -- $new_path_comp $__fish_tmp_path)
32	32	-----> contains -i -- $new_path_comp $__fish_tmp_path
22	22	----> and set -e __fish_tmp_path[$where]
34	34	----> set __fish_tmp_path $new_path_comp $__fish_tmp_path
15	15	---> read -l new_path_comp
36	36	--> set __fish_tmp_path $__fish_tmp_path[-1..1]
340	340	-> for pathfile in /etc/paths.d/*...
54	54	-> set -xg PATH $__fish_tmp_path
14	14	-> set -e __fish_tmp_path
44	44	-> functions -e __fish_load_path_helper_paths
6	14	-> if set -q MANPATH...
8	8	--> set -q MANPATH
17	17	-> function __fish_reconstruct_path -d "Update PATH when fish_user_paths changes" --on-variable fish_user_paths...
108	380	-> __fish_reconstruct_path
37	37	--> set -l local_path $PATH
8	8	--> for x in $__fish_added_user_paths...
11	11	--> set -g __fish_added_user_paths
5	176	--> if set -q fish_user_paths...
8	8	---> set -q fish_user_paths
19	163	---> for x in $fish_user_paths[-1..1]...
7	111	----> if set -l idx (contains --index -- $x $local_path)...
45	83	-----> set -l idx (contains --index -- $x $local_path)
38	38	------> contains --index -- $x $local_path
21	21	-----> set -e local_path[$idx]
33	33	----> set local_path $x $local_path
40	40	--> set -xg PATH $local_path
25	25	-> function fish_sigtrap_handler --on-signal TRAP --no-scope-shadowing --description "Signal handler for the TRAP signal. Launches a debug prompt."...
8	8	-> function __fish_on_interactive --on-event fish_prompt...
10	10	-> function . --description 'Evaluate contents of file (deprecated, see "source")' --no-scope-shadowing...
306	1486	-> __fish_set_locale
867	896	--> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_set_locale.fish
29	29	---> function __fish_set_locale...
15	15	--> set -l LOCALE_VARS
21	21	--> set LOCALE_VARS $LOCALE_VARS LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE
34	34	--> set LOCALE_VARS $LOCALE_VARS LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS
103	103	--> set LOCALE_VARS $LOCALE_VARS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION
84	111	--> for locale_var in $LOCALE_VARS LC_ALL...
8	27	---> if set -q $locale_var...
13	13	----> set -q $locale_var
6	6	----> return 0
28	28	-> set -l sourcelist
206	21967	-> for file in $configdir/fish/conf.d/*.fish $__fish_sysconfdir/conf.d/*.fish $__extra_confdir/*.fish...
66	1564	--> set -l basename (string replace -r '^.*/' '' -- $file)
211	1498	---> string replace -r '^.*/' '' -- $file
1020	1287	----> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/string.fish
8	267	-----> if not contains string (builtin -n)...
228	259	------> not contains string (builtin -n)
31	31	-------> builtin -n
19	19	--> contains -- $basename $sourcelist
20	20	--> set sourcelist $sourcelist $basename
105	105	--> [ -f $file -a -r $file ]
1078	1147	--> and source $file
24	24	---> set -q FZF_TMUX_HEIGHT
10	10	---> set -q FZF_DEFAULT_OPTS
9	9	---> set -q FZF_LEGACY_KEYBINDINGS
8	8	---> set -q FZF_PREVIEW_FILE_CMD
7	7	---> set -q FZF_PREVIEW_DIR_CMD
11	11	---> function fzf_uninstall -e fzf_uninstall...
76	119	--> set -l basename (string replace -r '^.*/' '' -- $file)
43	43	---> string replace -r '^.*/' '' -- $file
20	20	--> contains -- $basename $sourcelist
23	23	--> set sourcelist $sourcelist $basename
73	73	--> [ -f $file -a -r $file ]
776	1153	--> and source $file
19	344	---> if test "$FZF_LEGACY_KEYBINDINGS" -eq 1...
45	45	----> test "$FZF_LEGACY_KEYBINDINGS" -eq 1
89	89	----> bind \co '__fzf_find_file'
16	16	----> bind \cr '__fzf_reverse_isearch'
13	13	----> bind \ec '__fzf_cd'
12	12	----> bind \eC '__fzf_cd --hidden'
12	12	----> bind \eO '__fzf_open'
11	11	----> bind \eo '__fzf_open --editor'
17	127	----> if bind -M insert >/dev/null 2>/dev/null...
31	31	-----> bind -M insert >/dev/null 2>/dev/null
17	17	-----> bind -M insert \co '__fzf_find_file'
13	13	-----> bind -M insert \cr '__fzf_reverse_isearch'
12	12	-----> bind -M insert \ec '__fzf_cd'
12	12	-----> bind -M insert \eC '__fzf_cd --hidden'
13	13	-----> bind -M insert \eO '__fzf_open'
12	12	-----> bind -M insert \eo '__fzf_open --editor'
6	17	---> if set -q FZF_COMPLETE...
11	11	----> set -q FZF_COMPLETE
16	16	---> function fzf_key_bindings_uninstall -e fzf_key_bindings_uninstall...
77	119	--> set -l basename (string replace -r '^.*/' '' -- $file)
42	42	---> string replace -r '^.*/' '' -- $file
24	24	--> contains -- $basename $sourcelist
28	28	--> set sourcelist $sourcelist $basename
41	41	--> [ -f $file -a -r $file ]
62	100	--> set -l basename (string replace -r '^.*/' '' -- $file)
38	38	---> string replace -r '^.*/' '' -- $file
25	25	--> contains -- $basename $sourcelist
31	31	--> set sourcelist $sourcelist $basename
59	59	--> [ -f $file -a -r $file ]
1493	17091	--> and source $file
9	43	---> if test -z "$Z_DATA"...
34	34	----> test -z "$Z_DATA"
7	52	---> if test ! -e "$Z_DATA"...
45	45	----> test ! -e "$Z_DATA"
6	22	---> if test -z "$Z_CMD"...
16	16	----> test -z "$Z_CMD"
78	78	---> set -U ZO_CMD "$Z_CMD"o
7	39	---> if test ! -z $Z_CMD...
17	17	----> test ! -z $Z_CMD
15	15	----> function $Z_CMD -d "jump around"...
7	40	---> if test ! -z $ZO_CMD...
11	11	----> test ! -z $ZO_CMD
22	22	----> function $ZO_CMD -d "open target dir"...
6	17	---> if not set -q Z_EXCLUDE...
11	11	----> not set -q Z_EXCLUDE
228	15279	---> __z_complete
683	703	----> source /Users/takuto/.config/fish/functions/__z_complete.fish
20	20	-----> function __z_complete -d "add completions"...
826	13492	----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
12666	12666	-----> string replace -r '\|.*' '' < $Z_DATA | string escape
420	420	----> complete -c $Z_CMD -a "$__z_marks" -f
277	277	----> complete -c $ZO_CMD -a "$__z_marks" -f
38	38	----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
22	22	----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
20	20	----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
23	23	----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
18	18	----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
20	20	----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
18	18	----> complete -c $Z_CMD -s h -l help   -d "Print help"
28	28	---> function __z_on_variable_pwd --on-variable PWD...
10	33	-> if not set -q __fish_init_2_3_0...
23	23	--> not set -q __fish_init_2_3_0
9	80	-> if status --is-login...
71	71	--> status --is-login
474	474	> builtin source /usr/local/Cellar/fish/2.7.1/etc/fish/config.fish
411	495	> builtin source /Users/takuto/.config/fish/config.fish
84	84	-> set PATH /usr/local/bin /usr/sbin $PATH
48	48	> echo $_ " "
128	4299	> __fish_pwd
452	4082	-> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_pwd.fish
78	3630	--> switch (uname)...
3533	3533	---> uname
19	19	---> function __fish_pwd --description "Show current path"...
89	89	-> pwd
48	25510	> __fish_on_interactive
1835	25451	-> __fish_config_interactive
3331	3437	--> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_config_interactive.fish
106	106	---> function __fish_config_interactive -d "Initializations that should be performed when entering interactive mode"...
11	113	--> if set -q __fish_config_interactive_done...
102	102	---> set -q __fish_config_interactive_done
20	20	--> set -g __fish_config_interactive_done
15	15	--> set -g __fish_active_key_bindings
43	43	--> set -l configdir ~/.config
8	17	--> if set -q XDG_CONFIG_HOME...
9	9	---> set -q XDG_CONFIG_HOME
31	31	--> set -l userdatadir ~/.local/share
7	16	--> if set -q XDG_DATA_HOME...
9	9	---> set -q XDG_DATA_HOME
6	14	--> if not set -q fish_greeting...
8	8	---> not set -q fish_greeting
6	14	--> if not set -q __fish_init_2_39_8...
8	8	---> not set -q __fish_init_2_39_8
9	56	--> if not set -q FISH_UNIT_TESTS_RUNNING...
8	8	---> not set -q FISH_UNIT_TESTS_RUNNING
8	39	---> if not test -d $userdatadir/fish/generated_completions...
31	31	----> not test -d $userdatadir/fish/generated_completions
23	117	--> if status --is-interactive...
12	12	---> status --is-interactive
11	82	---> if functions -q fish_greeting...
56	56	----> functions -q fish_greeting
15	15	----> test -n "$fish_greeting"
22	22	--> function __fish_repaint --on-variable fish_color_cwd --description "Event handler, repaints the prompt when fish_color_cwd changes"...
17	17	--> function __fish_repaint_root --on-variable fish_color_cwd_root --description "Event handler, repaints the prompt when fish_color_cwd_root changes"...
8	25	--> if test -d /etc/init.d...
17	17	---> test -d /etc/init.d
6	16	--> if not set -q fish_key_bindings...
10	10	---> not set -q fish_key_bindings
36	36	--> function __fish_reload_key_bindings -d "Reload key bindings when binding variable change" --on-variable fish_key_bindings...
224	9334	--> __fish_reload_key_bindings
7	41	---> if test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"...
34	34	----> test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"
7	1279	---> if not functions -q "$fish_key_bindings"...
114	1272	----> not functions -q "$fish_key_bindings"
1130	1158	-----> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/fish_default_key_bindings.fish
28	28	------> function fish_default_key_bindings -d "Default (Emacs-like) key bindings for fish"...
37	37	---> set -g __fish_active_key_bindings "$fish_key_bindings"
19	19	---> set -g fish_bind_mode default
16	7666	---> if test "$fish_key_bindings" = fish_default_key_bindings...
22	22	----> test "$fish_key_bindings" = fish_default_key_bindings
487	7628	----> fish_default_key_bindings ^/dev/null
10	44	-----> if contains -- -h $argv...
20	20	------> contains -- -h $argv
14	14	------> or contains -- --help $argv
13	142	-----> if not set -q argv[1]...
11	11	------> not set -q argv[1]
66	66	------> bind --erase --all
12	52	------> if test "$fish_key_bindings" != "fish_default_key_bindings"...
40	40	-------> test "$fish_key_bindings" != "fish_default_key_bindings"
829	6414	-----> __fish_shared_key_bindings $argv
2180	2297	------> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_shared_key_bindings.fish
72	72	-------> function __fish_shared_key_bindings -d "Bindings shared between emacs and vi mode"...
30	30	-------> function __fish_commandline_insert_escaped --description 'Insert the first arg escaped if a second arg is given'...
8	8	-------> function __fish_start_bracketed_paste...
7	7	-------> function __fish_stop_bracketed_paste...
13	58	------> if contains -- -h $argv...
30	30	-------> contains -- -h $argv
15	15	-------> or contains -- --help $argv
21	21	------> bind $argv \cy yank
16	16	------> bind $argv \ey yank-pop
40	40	------> bind $argv -k right forward-char
21	21	------> bind $argv -k left backward-char
18	18	------> bind $argv \e\[C forward-char
14	14	------> bind $argv \e\[D backward-char
14	14	------> bind $argv \eOC forward-char
14	14	------> bind $argv \eOD backward-char
16	16	------> bind $argv -k ppage beginning-of-history
15	15	------> bind $argv -k npage end-of-history
16	16	------> bind $argv \cx fish_clipboard_copy
15	15	------> bind $argv \cv fish_clipboard_paste
14	14	------> bind $argv \e cancel
13	13	------> bind $argv \t complete
17	17	------> bind $argv --key btab complete-and-search
19	19	------> bind $argv \e\n "commandline -i \n"
17	17	------> bind $argv \e\r "commandline -i \n"
15	15	------> bind $argv -k down down-or-search
16	16	------> bind $argv -k up up-or-search
16	16	------> bind $argv \e\[A up-or-search
14	14	------> bind $argv \e\[B down-or-search
12	12	------> bind $argv \eOA up-or-search
12	12	------> bind $argv \eOB down-or-search
16	16	------> bind $argv \e\eOC nextd-or-forward-word
16	16	------> bind $argv \e\eOD prevd-or-backward-word
17	17	------> bind $argv \e\e\[C nextd-or-forward-word
15	15	------> bind $argv \e\e\[D prevd-or-backward-word
16	16	------> bind $argv \eO3C nextd-or-forward-word
15	15	------> bind $argv \eO3D prevd-or-backward-word
16	16	------> bind $argv \e\[3C nextd-or-forward-word
15	15	------> bind $argv \e\[3D prevd-or-backward-word
18	18	------> bind $argv \e\[1\;3C nextd-or-forward-word
17	17	------> bind $argv \e\[1\;3D prevd-or-backward-word
18	18	------> bind $argv \e\[1\;9C nextd-or-forward-word
17	17	------> bind $argv \e\[1\;9D prevd-or-backward-word
16	16	------> bind $argv \e\eOA history-token-search-backward
18	18	------> bind $argv \e\eOB history-token-search-forward
17	17	------> bind $argv \e\e\[A history-token-search-backward
16	16	------> bind $argv \e\e\[B history-token-search-forward
15	15	------> bind $argv \eO3A history-token-search-backward
15	15	------> bind $argv \eO3B history-token-search-forward
16	16	------> bind $argv \e\[3A history-token-search-backward
16	16	------> bind $argv \e\[3B history-token-search-forward
19	19	------> bind $argv \e\[1\;3A history-token-search-backward
18	18	------> bind $argv \e\[1\;3B history-token-search-forward
18	18	------> bind $argv \e\[1\;9A history-token-search-backward
19	19	------> bind $argv \e\[1\;9B history-token-search-forward
15	15	------> bind $argv \e. history-token-search-backward
15	15	------> bind $argv \el __fish_list_current_token
22	22	------> bind $argv \ew 'set tok (commandline -pt); if test $tok[1]; echo; whatis $tok[1]; commandline -f repaint; end'
21	21	------> bind $argv \cl 'echo -n (clear | string replace \e\[3J ""); commandline -f repaint'
16	16	------> bind $argv \cc __fish_cancel_commandline
14	14	------> bind $argv \cu backward-kill-line
14	14	------> bind $argv \cw backward-kill-path-component
16	16	------> bind $argv \e\[F end-of-line
17	17	------> bind $argv \e\[H beginning-of-line
23	23	------> bind $argv \ed 'set -l cmd (commandline); if test -z "$cmd"; echo; dirh; commandline -f repaint; else; commandline -f kill-word; end'
15	15	------> bind $argv \cd delete-or-exit
18	18	------> bind $argv -k f1 __fish_man_page
16	16	------> bind $argv \eh __fish_man_page
20	20	------> bind $argv \ep '__fish_paginate'
17	17	------> bind $argv \e\# __fish_toggle_comment_commandline
14	14	------> bind \ee edit_command_buffer
13	13	------> bind \ev edit_command_buffer
143	2063	------> for mode in (bind --list-modes | string match -v paste)...
1874	1874	-------> bind --list-modes | string match -v paste
46	46	-------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
27	27	------> bind -M paste \e\[201~ '__fish_stop_bracketed_paste'
13	13	------> bind -M paste "" self-insert
14	14	------> bind -M paste \r "commandline -i \n"
28	28	------> bind -M paste "'" "__fish_commandline_insert_escaped \' \$__fish_paste_quoted"
15	15	------> bind -M paste \\ "__fish_commandline_insert_escaped \\\ \$__fish_paste_quoted"
13	13	-----> bind $argv "" self-insert
12	12	-----> bind $argv \n execute
12	12	-----> bind $argv \r execute
12	12	-----> bind $argv \ck kill-line
11	11	-----> bind $argv \eOC forward-char
13	13	-----> bind $argv \eOD backward-char
12	12	-----> bind $argv \e\[C forward-char
17	17	-----> bind $argv \e\[D backward-char
13	13	-----> bind $argv -k right forward-char
11	11	-----> bind $argv -k left backward-char
13	13	-----> bind $argv -k dc delete-char
12	12	-----> bind $argv -k backspace backward-delete-char
12	12	-----> bind $argv \x7f backward-delete-char
14	14	-----> bind $argv \e\[1~ beginning-of-line
11	11	-----> bind $argv \e\[3~ delete-char
14	14	-----> bind $argv \e\[4~ end-of-line
17	17	-----> bind $argv -k home beginning-of-line 2>/dev/null
15	15	-----> bind $argv -k end end-of-line 2>/dev/null
17	17	-----> bind $argv \e\[3\;2~ backward-delete-char
12	12	-----> bind $argv \ca beginning-of-line
16	16	-----> bind $argv \ce end-of-line
10	10	-----> bind $argv \ch backward-delete-char
12	12	-----> bind $argv \cp up-or-search
12	12	-----> bind $argv \cn down-or-search
11	11	-----> bind $argv \cf forward-char
11	11	-----> bind $argv \cb backward-char
11	11	-----> bind $argv \ct transpose-chars
12	12	-----> bind $argv \et transpose-words
12	12	-----> bind $argv \eu upcase-word
12	12	-----> bind $argv \ec capitalize-word
13	13	-----> bind $argv \e\x7f backward-kill-word
12	12	-----> bind $argv \eb backward-word
12	12	-----> bind $argv \ef forward-word
17	17	-----> bind $argv \e\[1\;5C forward-word
17	17	-----> bind $argv \e\[1\;5D backward-word
17	17	-----> bind $argv \e\< beginning-of-buffer
13	13	-----> bind $argv \e\> end-of-buffer
9	9	-----> bind \ed kill-word
16	16	-----> bind \e\[I 'begin;end'
15	15	-----> bind \e\[O 'begin;end'
18	18	-----> switch "$TERM"...
8	68	---> if functions --query fish_user_key_bindings >/dev/null...
60	60	----> functions --query fish_user_key_bindings >/dev/null
12	139	--> if not set -q FISH_UNIT_TESTS_RUNNING...
14	14	---> not set -q FISH_UNIT_TESTS_RUNNING
15	15	---> function __fish_enable_bracketed_paste --on-event fish_prompt...
15	15	---> function __fish_disable_bracketed_paste --on-event fish_preexec --on-process-exit %self...
35	83	---> __fish_enable_bracketed_paste
48	48	----> printf "\e[?2004h"
19	19	--> function __fish_winch_handler --on-signal WINCH -d "Repaint screen when window changes size"...
10	10	--> set -q VTE_VERSION
15	15	--> or set -l VTE_VERSION 0
8	8	--> set -q TERM_PROGRAM
11	3795	--> if test "$VTE_VERSION" -ge 3405 -o "$TERM_PROGRAM" = "Apple_Terminal"...
31	31	---> test "$VTE_VERSION" -ge 3405 -o "$TERM_PROGRAM" = "Apple_Terminal"
29	29	---> function __update_cwd_osc --on-variable PWD --description 'Notify capable terminals when $PWD changes'...
62	3724	---> __update_cwd_osc
8	31	----> if status --is-command-substitution...
14	14	-----> status --is-command-substitution
9	9	-----> or set -q INSIDE_EMACS
138	3631	----> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
2804	3463	-----> hostname
640	659	------> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/hostname.fish
19	19	-------> set -q USERDOMAIN
30	30	-----> string escape --style=url $PWD
13	6287	--> if not type -q __fish_command_not_found_handler...
673	2841	---> not type -q __fish_command_not_found_handler
1148	1193	----> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/type.fish
45	45	-----> function type --description 'Print the type of a command'...
15	15	----> set -q argv[1]
43	43	----> set -l options 'h/help' 'a/all' 'f/no-functions' 't/type' 'p/path' 'P/force-path' 'q/quiet'
140	140	----> argparse -n type --min-args=1 -x t,p,P $options -- $argv
12	81	----> if set -q _flag_help...
69	69	-----> set -q _flag_help
18	18	----> set -l res 1
13	13	----> set -l mode normal
13	13	----> set -l multi no
13	13	----> set -l selection all
8	28	----> if set -q _flag_quiet...
8	8	-----> set -q _flag_quiet
12	12	-----> set mode quiet
8	8	----> set -q _flag_all
7	7	----> set -q _flag_no_functions
24	589	----> for i in $argv...
19	19	-----> set -l found 0
9	337	-----> if test $selection != files...
16	16	------> test $selection != files
7	63	------> if functions -q -- $i...
56	56	-------> functions -q -- $i
8	249	------> if contains -- $i (builtin -n)...
210	241	-------> contains -- $i (builtin -n)
31	31	--------> builtin -n
15	15	-----> set -l paths
8	151	-----> if test $multi != yes...
14	14	------> test $multi != yes
64	129	------> set paths (command -s -- $i)
65	65	-------> command -s -- $i
8	8	-----> for path in $paths...
8	35	-----> if test $found = 0...
13	13	------> test $found = 0
14	14	------> and test $mode != quiet
7	7	----> return $res
13	13	---> set -l os
8	27	---> if test -r /etc/os-release...
19	19	----> test -r /etc/os-release
18	3393	---> if contains -- suse $os...
11	11	----> contains -- suse $os
13	13	----> test -f /usr/libexec/pk-command-not-found
13	13	----> test -f /usr/lib/command-not-found
13	13	----> test -f /run/current-system/sw/bin/command-not-found
547	1416	----> type -q command-not-found
17	17	-----> set -q argv[1]
52	52	-----> set -l options 'h/help' 'a/all' 'f/no-functions' 't/type' 'p/path' 'P/force-path' 'q/quiet'
85	85	-----> argparse -n type --min-args=1 -x t,p,P $options -- $argv
9	19	-----> if set -q _flag_help...
10	10	------> set -q _flag_help
15	15	-----> set -l res 1
20	20	-----> set -l mode normal
21	21	-----> set -l multi no
14	14	-----> set -l selection all
8	27	-----> if set -q _flag_quiet...
7	7	------> set -q _flag_quiet
12	12	------> set mode quiet
8	8	-----> set -q _flag_all
7	7	-----> set -q _flag_no_functions
25	577	-----> for i in $argv...
12	12	------> set -l found 0
15	344	------> if test $selection != files...
15	15	-------> test $selection != files
8	75	-------> if functions -q -- $i...
67	67	--------> functions -q -- $i
7	239	-------> if contains -- $i (builtin -n)...
200	232	--------> contains -- $i (builtin -n)
32	32	---------> builtin -n
15	15	------> set -l paths
9	139	------> if test $multi != yes...
13	13	-------> test $multi != yes
54	117	-------> set paths (command -s -- $i)
63	63	--------> command -s -- $i
8	8	------> for path in $paths...
9	34	------> if test $found = 0...
12	12	-------> test $found = 0
13	13	-------> and test $mode != quiet
7	7	-----> return $res
621	1897	----> type -p -q pkgfile
25	25	-----> set -q argv[1]
79	79	-----> set -l options 'h/help' 'a/all' 'f/no-functions' 't/type' 'p/path' 'P/force-path' 'q/quiet'
129	129	-----> argparse -n type --min-args=1 -x t,p,P $options -- $argv
11	29	-----> if set -q _flag_help...
18	18	------> set -q _flag_help
19	19	-----> set -l res 1
20	20	-----> set -l mode normal
20	20	-----> set -l multi no
19	19	-----> set -l selection all
11	40	-----> if set -q _flag_quiet...
11	11	------> set -q _flag_quiet
18	18	------> set mode quiet
88	88	-----> set -q _flag_all
12	12	-----> set -q _flag_no_functions
29	789	-----> for i in $argv...
17	17	------> set -l found 0
12	468	------> if test $selection != files...
26	26	-------> test $selection != files
9	91	-------> if functions -q -- $i...
82	82	--------> functions -q -- $i
12	339	-------> if contains -- $i (builtin -n)...
294	327	--------> contains -- $i (builtin -n)
33	33	---------> builtin -n
24	24	------> set -l paths
10	212	------> if test $multi != yes...
58	58	-------> test $multi != yes
80	144	-------> set paths (command -s -- $i)
64	64	--------> command -s -- $i
8	8	------> for path in $paths...
6	31	------> if test $found = 0...
12	12	-------> test $found = 0
13	13	-------> and test $mode != quiet
7	7	-----> return $res
12	12	----> function __fish_command_not_found_handler --on-event fish_command_not_found...
11	11	-> functions -e __fish_on_interactive
1213	1240	> source /Users/takuto/.config/fish/functions/fish_prompt.fish
27	27	-> function fish_prompt --description 'Write out the prompt'...
366	387	> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/fish_mode_prompt.fish
21	21	-> function fish_mode_prompt --description "Displays the current mode"...
32	836	> fish_mode_prompt
250	804	-> fish_default_mode_prompt
470	492	--> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/fish_default_mode_prompt.fish
22	22	---> function fish_default_mode_prompt --description "Display the default mode for the prompt"...
9	62	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
29	29	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
24	24	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
481	40628	> fish_prompt
25	25	-> set -l last_status $status
10	40	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
17	17	--> set -g __fish_git_prompt_show_informative_status 1
9	36	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_hide_untrackedfiles
17	17	--> set -g __fish_git_prompt_hide_untrackedfiles 1
8	40	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
19	19	--> set -g __fish_git_prompt_color_branch magenta --bold
9	40	-> if not set -q __fish_git_prompt_showupstream...
11	11	--> not set -q __fish_git_prompt_showupstream
20	20	--> set -g __fish_git_prompt_showupstream "informative"
8	36	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
18	18	--> set -g __fish_git_prompt_char_upstream_ahead "↑"
8	35	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
17	17	--> set -g __fish_git_prompt_char_upstream_behind "↓"
8	36	-> if not set -q __fish_git_prompt_char_upstream_prefix...
11	11	--> not set -q __fish_git_prompt_char_upstream_prefix
17	17	--> set -g __fish_git_prompt_char_upstream_prefix ""
8	35	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
17	17	--> set -g __fish_git_prompt_char_stagedstate "●"
9	34	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
16	16	--> set -g __fish_git_prompt_char_dirtystate "✚"
8	40	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
17	17	--> set -g __fish_git_prompt_char_untrackedfiles "…"
8	34	-> if not set -q __fish_git_prompt_char_conflictedstate...
10	10	--> not set -q __fish_git_prompt_char_conflictedstate
16	16	--> set -g __fish_git_prompt_char_conflictedstate "✖"
7	34	-> if not set -q __fish_git_prompt_char_cleanstate...
11	11	--> not set -q __fish_git_prompt_char_cleanstate
16	16	--> set -g __fish_git_prompt_char_cleanstate "✔"
7	33	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
16	16	--> set -g __fish_git_prompt_color_dirtystate blue
7	38	-> if not set -q __fish_git_prompt_color_stagedstate...
14	14	--> not set -q __fish_git_prompt_color_stagedstate
17	17	--> set -g __fish_git_prompt_color_stagedstate yellow
6	33	-> if not set -q __fish_git_prompt_color_invalidstate...
11	11	--> not set -q __fish_git_prompt_color_invalidstate
16	16	--> set -g __fish_git_prompt_color_invalidstate red
8	41	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
24	24	--> set -g __fish_git_prompt_color_untrackedfiles $fish_color_normal
7	39	-> if not set -q __fish_git_prompt_color_cleanstate...
14	14	--> not set -q __fish_git_prompt_color_cleanstate
18	18	--> set -g __fish_git_prompt_color_cleanstate green --bold
8	125	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
57	107	--> set -g __fish_prompt_normal (set_color normal)
50	50	---> set_color normal
16	16	-> set -l color_cwd
15	15	-> set -l prefix
14	14	-> set -l suffix
24	63	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
20	20	-> set_color $color_cwd
48	1286	-> echo -n (prompt_pwd)
209	1238	--> prompt_pwd
663	681	---> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/prompt_pwd.fish
18	18	----> function prompt_pwd --description "Print the current working directory, shortened to fit the prompt"...
26	26	---> set -l options 'h/help'
35	35	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
19	19	---> or set -l fish_prompt_pwd_dir_length 1
46	46	---> set realhome ~
65	115	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
50	50	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	76	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
19	19	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
45	45	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
19	19	-> set_color normal
53	37884	-> printf '%s ' (__fish_vcs_prompt)
144	37831	--> __fish_vcs_prompt
517	535	---> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_vcs_prompt.fish
18	18	----> function __fish_vcs_prompt --description "Print the prompts for all available vcsen"...
511	12900	---> __fish_git_prompt
6609	9321	----> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_git_prompt.fish
114	114	-----> function __fish_git_prompt_show_upstream --description "Helper function for __fish_git_prompt"...
59	59	-----> function __fish_git_prompt --description "Prompt function for Git"...
30	30	-----> function __fish_git_prompt_staged --description "__fish_git_prompt helper, tells whether or not the current branch has staged files"...
26	26	-----> function __fish_git_prompt_dirty --description "__fish_git_prompt helper, tells whether or not the current branch has tracked, modified files"...
83	83	-----> set -g ___fish_git_prompt_status_order stagedstate invalidstate dirtystate untrackedfiles
8	8	-----> function __fish_git_prompt_informative_status...
25	25	-----> function __fish_git_prompt_operation_branch_bare --description "__fish_git_prompt helper, returns the current Git operation and branch"...
8	8	-----> function __fish_git_prompt_set_char...
17	17	-----> function __fish_git_prompt_validate_chars --description "__fish_git_prompt helper, checks char variables"...
6	6	-----> function __fish_git_prompt_set_color...
12	12	-----> function __fish_git_prompt_validate_colors --description "__fish_git_prompt helper, checks color variables"...
29	29	-----> set -l varargs
47	345	-----> for var in repaint describe_style show_informative_status showdirtystate showstashstate showuntrackedfiles showupstream...
41	41	------> set varargs $varargs --on-variable __fish_git_prompt_$var
31	31	------> set varargs $varargs --on-variable __fish_git_prompt_$var
34	34	------> set varargs $varargs --on-variable __fish_git_prompt_$var
43	43	------> set varargs $varargs --on-variable __fish_git_prompt_$var
45	45	------> set varargs $varargs --on-variable __fish_git_prompt_$var
50	50	------> set varargs $varargs --on-variable __fish_git_prompt_$var
54	54	------> set varargs $varargs --on-variable __fish_git_prompt_$var
58	58	-----> function __fish_git_prompt_repaint $varargs --description "Event handler, repaints prompt when functionality changes"...
15	15	-----> set -l varargs
90	919	-----> for var in '' _prefix _suffix _bare _merging _cleanstate _invalidstate _upstream _flags _branch _dirtystate _stagedstate _branch_detached _stashstate _untrackedfiles...
21	21	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
27	27	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
32	32	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
37	37	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
40	40	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
51	51	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
50	50	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
55	55	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
58	58	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
66	66	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
75	75	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
74	74	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
77	77	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
81	81	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
85	85	------> set varargs $varargs --on-variable __fish_git_prompt_color$var
84	84	-----> set varargs $varargs --on-variable __fish_git_prompt_showcolorhints
106	106	-----> function __fish_git_prompt_repaint_color $varargs --description "Event handler, repaints prompt when any color changes"...
15	15	-----> set -l varargs
74	664	-----> for var in cleanstate dirtystate invalidstate stagedstate stashstate stateseparator untrackedfiles upstream_ahead upstream_behind upstream_diverged upstream_equal upstream_prefix...
22	22	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
28	28	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
33	33	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
38	38	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
42	42	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
48	48	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
51	51	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
55	55	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
59	59	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
67	67	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
72	72	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
75	75	------> set varargs $varargs --on-variable __fish_git_prompt_char_$var
89	89	-----> function __fish_git_prompt_repaint_char $varargs --description "Event handler, repaints prompt when any char changes"...
9	90	----> if not command -sq git...
81	81	-----> not command -sq git
81	2950	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
2869	2869	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
7	7	----> or return
397	1585	---> __fish_hg_prompt
821	1122	----> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_hg_prompt.fish
25	25	-----> set -g fish_color_hg_clean green
18	18	-----> set -g fish_color_hg_modified yellow
16	16	-----> set -g fish_color_hg_dirty red
15	15	-----> set -g fish_color_hg_added green
15	15	-----> set -g fish_color_hg_renamed magenta
16	16	-----> set -g fish_color_hg_copied magenta
13	13	-----> set -g fish_color_hg_deleted red
14	14	-----> set -g fish_color_hg_untracked yellow
14	14	-----> set -g fish_color_hg_unmerged red
18	18	-----> set -g fish_prompt_hg_status_added '✚'
16	16	-----> set -g fish_prompt_hg_status_modified '*'
15	15	-----> set -g fish_prompt_hg_status_copied '⇒'
18	18	-----> set -g fish_prompt_hg_status_deleted '✖'
16	16	-----> set -g fish_prompt_hg_status_untracked '?'
31	31	-----> set -g fish_prompt_hg_status_unmerged '!'
21	21	-----> set -g fish_prompt_hg_status_order added modified copied deleted untracked unmerged
20	20	-----> function __fish_hg_prompt --description 'Write out the hg prompt'...
10	66	----> if not command -sq hg...
48	48	-----> not command -sq hg
8	8	-----> return 1
235	22667	---> __fish_svn_prompt
1456	2166	----> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_svn_prompt.fish
29	29	-----> set -g __fish_svn_prompt_color_revision yellow
22	22	-----> set -g __fish_svn_prompt_char_separator "|"
19	19	-----> set -g __fish_svn_prompt_char_added_display 'A'
18	18	-----> set -g __fish_svn_prompt_char_added_color green
19	19	-----> set -g __fish_svn_prompt_char_conflicted_display 'C'
20	20	-----> set -g __fish_svn_prompt_char_conflicted_color --underline magenta
18	18	-----> set -g __fish_svn_prompt_char_deleted_display 'D'
17	17	-----> set -g __fish_svn_prompt_char_deleted_color red
17	17	-----> set -g __fish_svn_prompt_char_ignored_display 'I'
19	19	-----> set -g __fish_svn_prompt_char_ignored_color --bold yellow
17	17	-----> set -g __fish_svn_prompt_char_modified_display 'M'
17	17	-----> set -g __fish_svn_prompt_char_modified_color blue
17	17	-----> set -g __fish_svn_prompt_char_replaced_display 'R'
16	16	-----> set -g __fish_svn_prompt_char_replaced_color cyan
17	17	-----> set -g __fish_svn_prompt_char_unversioned_external_display 'X'
19	19	-----> set -g __fish_svn_prompt_char_unversioned_external_color --underline cyan
18	18	-----> set -g __fish_svn_prompt_char_unversioned_display '?'
17	17	-----> set -g __fish_svn_prompt_char_unversioned_color purple
17	17	-----> set -g __fish_svn_prompt_char_missing_display '!'
17	17	-----> set -g __fish_svn_prompt_char_missing_color yellow
17	17	-----> set -g __fish_svn_prompt_char_versioned_obstructed_display '~'
17	17	-----> set -g __fish_svn_prompt_char_versioned_obstructed_color magenta
17	17	-----> set -g __fish_svn_prompt_char_locked_display 'L'
18	18	-----> set -g __fish_svn_prompt_char_locked_color --bold red
17	17	-----> set -g __fish_svn_prompt_char_scheduled_display '+'
25	25	-----> set -g __fish_svn_prompt_char_scheduled_color --bold green
17	17	-----> set -g __fish_svn_prompt_char_switched_display 'S'
19	19	-----> set -g __fish_svn_prompt_char_switched_color --bold blue
17	17	-----> set -g __fish_svn_prompt_char_token_present_display 'K'
18	18	-----> set -g __fish_svn_prompt_char_token_present_color --bold cyan
18	18	-----> set -g __fish_svn_prompt_char_token_other_display 'O'
19	19	-----> set -g __fish_svn_prompt_char_token_other_color --underline purple
21	21	-----> set -g __fish_svn_prompt_char_token_stolen_display 'T'
19	19	-----> set -g __fish_svn_prompt_char_token_stolen_color --bold purple
17	17	-----> set -g __fish_svn_prompt_char_token_broken_display 'B'
19	19	-----> set -g __fish_svn_prompt_char_token_broken_color --bold magenta
27	27	-----> function __fish_svn_prompt_parse_status --argument flag_status_string --description "helper function that does pretty formatting on svn status"...
18	18	-----> function __fish_svn_prompt --description "Prompt function for svn"...
9	70	----> if not command -sq svn...
61	61	-----> not command -sq svn
130	20152	----> set -l checkout_info (command svn info ^/dev/null)
20022	20022	-----> command svn info ^/dev/null
12	44	----> if [ $status -ne 0 ]...
26	26	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
14	14	-> echo -n "$suffix "
19	19	-> set_color normal
21	21	> echo $_ " "
28	64	> __fish_pwd
36	36	-> pwd
50	208	> fish_mode_prompt
100	158	-> fish_default_mode_prompt
10	58	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
28	28	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
20	20	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
399	26881	> fish_prompt
23	23	-> set -l last_status $status
7	18	-> if not set -q __fish_git_prompt_show_informative_status...
11	11	--> not set -q __fish_git_prompt_show_informative_status
5	15	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
6	15	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
6	14	-> if not set -q __fish_git_prompt_char_upstream_ahead...
8	8	--> not set -q __fish_git_prompt_char_upstream_ahead
5	18	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
5	14	-> if not set -q __fish_git_prompt_char_upstream_prefix...
9	9	--> not set -q __fish_git_prompt_char_upstream_prefix
6	14	-> if not set -q __fish_git_prompt_char_stagedstate...
8	8	--> not set -q __fish_git_prompt_char_stagedstate
5	14	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	14	-> if not set -q __fish_git_prompt_char_untrackedfiles...
8	8	--> not set -q __fish_git_prompt_char_untrackedfiles
5	14	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
6	14	-> if not set -q __fish_git_prompt_char_cleanstate...
8	8	--> not set -q __fish_git_prompt_char_cleanstate
5	17	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
5	13	-> if not set -q __fish_git_prompt_color_stagedstate...
8	8	--> not set -q __fish_git_prompt_color_stagedstate
6	14	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
5	14	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
5	13	-> if not set -q __fish_git_prompt_color_cleanstate...
8	8	--> not set -q __fish_git_prompt_color_cleanstate
5	13	-> if not set -q __fish_prompt_normal...
8	8	--> not set -q __fish_prompt_normal
14	14	-> set -l color_cwd
13	13	-> set -l prefix
12	12	-> set -l suffix
17	55	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
15	15	--> set suffix '$'
19	19	-> set_color $color_cwd
43	418	-> echo -n (prompt_pwd)
106	375	--> prompt_pwd
19	19	---> set -l options 'h/help'
27	27	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
7	16	---> if set -q _flag_help...
9	9	----> set -q _flag_help
9	9	---> set -q fish_prompt_pwd_dir_length
18	18	---> or set -l fish_prompt_pwd_dir_length 1
36	36	---> set realhome ~
54	88	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
34	34	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
9	56	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
15	15	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
32	32	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
15	15	-> set_color normal
45	25593	-> printf '%s ' (__fish_vcs_prompt)
33	25548	--> __fish_vcs_prompt
428	3528	---> __fish_git_prompt
7	72	----> if not command -sq git...
65	65	-----> not command -sq git
84	3000	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
2916	2916	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
22	22	----> test -n "$repo_info"
6	6	----> or return
265	329	---> __fish_hg_prompt
9	64	----> if not command -sq hg...
48	48	-----> not command -sq hg
7	7	-----> return 1
140	21658	---> __fish_svn_prompt
7	60	----> if not command -sq svn...
53	53	-----> not command -sq svn
85	21417	----> set -l checkout_info (command svn info ^/dev/null)
21332	21332	-----> command svn info ^/dev/null
13	41	----> if [ $status -ne 0 ]...
22	22	-----> [ $status -ne 0 ]
6	6	-----> return
9	23	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
14	14	> echo $_ " "
28	65	> __fish_pwd
37	37	-> pwd
77	184	> __fish_disable_bracketed_paste cd
107	107	-> printf "\e[?2004l"
92	92	> echo $_ " "
98	173	> __fish_pwd
75	75	-> pwd
427	12426	> cd
4553	4579	-> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/cd.fish
26	26	--> function cd --description "Change directory"...
94	94	-> set -l MAX_DIR_HIST 25
12	194	-> if test (count $argv) -gt 1...
114	182	--> test (count $argv) -gt 1
68	68	---> count $argv
13	71	-> if status --is-command-substitution...
58	58	--> status --is-command-substitution
49	49	-> set -l previous $PWD
12	47	-> if test "$argv" = "-"...
35	35	--> test "$argv" = "-"
231	6578	-> builtin cd $argv
37	4057	--> __z_on_variable_pwd VARIABLE SET PWD
217	4020	---> __z_add
567	586	----> source /Users/takuto/.config/fish/functions/__z_add.fish
19	19	-----> function __z_add -d "Add PATH to .z file"...
104	3029	----> set -l path (command dirname (status -f))
2907	2925	-----> command dirname (status -f)
18	18	------> status -f
100	188	----> for i in $Z_EXCLUDE...
14	88	-----> if contains -- $PWD $i...
65	65	------> contains -- $PWD $i
9	9	------> return 0
89	2290	--> __update_cwd_osc VARIABLE SET PWD
9	34	---> if status --is-command-substitution...
14	14	----> status --is-command-substitution
11	11	----> or set -q INSIDE_EMACS
138	2167	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
1949	1949	----> hostname
80	80	----> string escape --style=url $PWD
42	42	-> set -l cd_status $status
39	320	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
51	51	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
73	73	--> set -q dirprev
31	31	--> or set -l dirprev
31	31	--> set -q dirprev[$MAX_DIR_HIST]
36	36	--> set -g dirprev $dirprev $previous
28	28	--> set -e dirnext
31	31	--> set -g __fish_cd_direction prev
25	25	-> return $cd_status
27	44	> __fish_enable_bracketed_paste
17	17	-> printf "\e[?2004h"
30	245	> fish_mode_prompt
155	215	-> fish_default_mode_prompt
11	60	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
27	27	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
22	22	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
466	25602	> fish_prompt
24	24	-> set -l last_status $status
8	20	-> if not set -q __fish_git_prompt_show_informative_status...
12	12	--> not set -q __fish_git_prompt_show_informative_status
8	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_color_branch...
10	10	--> not set -q __fish_git_prompt_color_branch
7	17	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
6	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
15	15	--> not set -q __fish_git_prompt_char_upstream_behind
6	16	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
7	17	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
7	16	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
5	15	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
7	20	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
5	15	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
7	16	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
15	15	-> set -l prefix
14	14	-> set -l suffix
21	63	-> switch "$USER"...
26	26	--> set color_cwd $fish_color_cwd
16	16	--> set suffix '$'
47	47	-> set_color $color_cwd
44	543	-> echo -n (prompt_pwd)
165	499	--> prompt_pwd
23	23	---> set -l options 'h/help'
53	53	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	19	---> if set -q _flag_help...
11	11	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
54	54	---> set realhome ~
50	87	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
37	37	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
9	70	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
33	33	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
28	28	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
15	15	-> set_color normal
44	24040	-> printf '%s ' (__fish_vcs_prompt)
71	23996	--> __fish_vcs_prompt
488	4650	---> __fish_git_prompt
8	67	----> if not command -sq git...
59	59	-----> not command -sq git
101	4055	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3954	3954	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
30	30	----> test -n "$repo_info"
10	10	----> or return
415	489	---> __fish_hg_prompt
17	74	----> if not command -sq hg...
49	49	-----> not command -sq hg
8	8	-----> return 1
175	18786	---> __fish_svn_prompt
9	57	----> if not command -sq svn...
48	48	-----> not command -sq svn
82	18515	----> set -l checkout_info (command svn info ^/dev/null)
18433	18433	-----> command svn info ^/dev/null
12	39	----> if [ $status -ne 0 ]...
21	21	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
14	14	-> echo -n "$suffix "
18	18	-> set_color normal
13	13	> echo $_ " "
28	83	> __fish_pwd
55	55	-> pwd
249	10247	> __fish_start_bracketed_paste
90	90	-> set -g __fish_last_bind_mode $fish_bind_mode
554	9908	-> __fish_commandline_is_singlequoted
6803	6847	--> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_commandline_is_singlequoted.fish
44	44	---> function __fish_commandline_is_singlequoted --description "Return 0 if the current token has an open single-quote"...
62	62	--> set -l state normal
266	2336	--> for char in (commandline -ct | string split "")...
2020	2020	---> commandline -ct | string split ""
29	50	---> switch $char...
21	21	----> switch $state...
24	109	--> if contains -- $state single single-escaped...
56	56	---> contains -- $state single single-escaped
29	29	---> return 1
207	362	> __fish_stop_bracketed_paste
81	81	-> set fish_bind_mode $__fish_last_bind_mode
41	41	-> set -e __fish_paste_quoted
33	33	-> commandline -f force-repaint
39	278	> fish_mode_prompt
159	239	-> fish_default_mode_prompt
13	80	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
39	39	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
28	28	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
604	25141	> fish_prompt
32	32	-> set -l last_status $status
9	24	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
8	21	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
8	20	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
9	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
12	12	--> not set -q __fish_git_prompt_char_upstream_ahead
8	26	-> if not set -q __fish_git_prompt_char_upstream_behind...
18	18	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	20	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
8	20	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
9	21	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
7	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
9	36	-> if not set -q __fish_git_prompt_char_cleanstate...
27	27	--> not set -q __fish_git_prompt_char_cleanstate
8	21	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
9	20	-> if not set -q __fish_git_prompt_color_stagedstate...
11	11	--> not set -q __fish_git_prompt_color_stagedstate
7	19	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
7	19	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
7	19	-> if not set -q __fish_prompt_normal...
12	12	--> not set -q __fish_prompt_normal
20	20	-> set -l color_cwd
18	18	-> set -l prefix
18	18	-> set -l suffix
26	79	-> switch "$USER"...
32	32	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
33	33	-> set_color $color_cwd
59	612	-> echo -n (prompt_pwd)
156	553	--> prompt_pwd
31	31	---> set -l options 'h/help'
38	38	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
9	23	---> if set -q _flag_help...
14	14	----> set -q _flag_help
13	13	---> set -q fish_prompt_pwd_dir_length
26	26	---> or set -l fish_prompt_pwd_dir_length 1
65	65	---> set realhome ~
72	128	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
56	56	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	73	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
22	22	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
39	39	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
21	21	-> set_color normal
55	23259	-> printf '%s ' (__fish_vcs_prompt)
43	23204	--> __fish_vcs_prompt
661	4338	---> __fish_git_prompt
12	88	----> if not command -sq git...
76	76	-----> not command -sq git
117	3557	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3440	3440	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
25	25	----> test -n "$repo_info"
7	7	----> or return
309	414	---> __fish_hg_prompt
13	105	----> if not command -sq hg...
82	82	-----> not command -sq hg
10	10	-----> return 1
166	18409	---> __fish_svn_prompt
11	70	----> if not command -sq svn...
59	59	-----> not command -sq svn
98	18134	----> set -l checkout_info (command svn info ^/dev/null)
18036	18036	-----> command svn info ^/dev/null
11	39	----> if [ $status -ne 0 ]...
22	22	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
14	14	> echo $_ " "
38	99	> __fish_pwd
61	61	-> pwd
744	973	> source /usr/local/Cellar/fish/2.7.1/share/fish/completions/fish.fish
85	85	-> complete -c fish -s c -l "command" --description "Run fish with this command"
23	23	-> complete -c fish -s h -l help --description "Display help and exit"
19	19	-> complete -c fish -s v -l version --description "Display version and exit"
19	19	-> complete -c fish -s n -l no-execute --description "Only parse input, do not execute"
22	22	-> complete -c fish -s i -l interactive --description "Run in interactive mode"
17	17	-> complete -c fish -s l -l login --description "Run in login mode"
26	26	-> complete -c fish -s p -l profile --description "Output profiling information to specified file" -f
18	18	-> complete -c fish -s d -l debug --description "Run with the specified verbosity level"
89	135	> __fish_disable_bracketed_paste ' fish --profile profile.txt'
46	46	-> printf "\e[?2004l"
46	46	> echo $_ " "
64	165	> __fish_pwd
101	101	-> pwd
2315410	2315410	> fish --profile profile.txt
78	140	> __fish_enable_bracketed_paste
62	62	-> printf "\e[?2004h"
48	598	> fish_mode_prompt
200	550	-> fish_default_mode_prompt
25	350	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
173	173	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
152	152	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
760	31327	> fish_prompt
42	42	-> set -l last_status $status
8	22	-> if not set -q __fish_git_prompt_show_informative_status...
14	14	--> not set -q __fish_git_prompt_show_informative_status
7	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	18	-> if not set -q __fish_git_prompt_color_branch...
11	11	--> not set -q __fish_git_prompt_color_branch
7	17	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
6	16	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
8	17	-> if not set -q __fish_git_prompt_char_upstream_prefix...
9	9	--> not set -q __fish_git_prompt_char_upstream_prefix
8	17	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
8	17	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
7	23	-> if not set -q __fish_git_prompt_char_conflictedstate...
16	16	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	16	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
6	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
17	17	-> set -l color_cwd
15	15	-> set -l prefix
15	15	-> set -l suffix
21	61	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
29	29	-> set_color $color_cwd
68	734	-> echo -n (prompt_pwd)
138	666	--> prompt_pwd
29	29	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
7	19	---> if set -q _flag_help...
12	12	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
68	68	---> set realhome ~
145	259	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
114	114	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
17	95	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
28	28	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
50	50	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
26	26	-> set_color normal
71	29232	-> printf '%s ' (__fish_vcs_prompt)
58	29161	--> __fish_vcs_prompt
536	4110	---> __fish_git_prompt
9	83	----> if not command -sq git...
74	74	-----> not command -sq git
95	3460	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3365	3365	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
7	7	----> or return
340	413	---> __fish_hg_prompt
11	73	----> if not command -sq hg...
53	53	-----> not command -sq hg
9	9	-----> return 1
167	24580	---> __fish_svn_prompt
9	64	----> if not command -sq svn...
55	55	-----> not command -sq svn
107	24294	----> set -l checkout_info (command svn info ^/dev/null)
24187	24187	-----> command svn info ^/dev/null
16	55	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
8	8	-----> return
12	33	-> if not test $last_status -eq 0...
21	21	--> not test $last_status -eq 0
21	21	-> echo -n "$suffix "
28	28	-> set_color normal
19	19	> echo $_ " "
41	114	> __fish_pwd
73	73	-> pwd
77	119	> __fish_disable_bracketed_paste 'sort -k 2 -nr profile.txt'
42	42	-> printf "\e[?2004l"
42	42	> echo $_ " "
51	168	> __fish_pwd
117	117	-> pwd
18987	18987	> sort -k 2 -nr profile.txt
76	131	> __fish_enable_bracketed_paste
55	55	-> printf "\e[?2004h"
51	485	> fish_mode_prompt
202	434	-> fish_default_mode_prompt
21	232	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
171	171	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
40	40	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
853	36037	> fish_prompt
88	88	-> set -l last_status $status
18	43	-> if not set -q __fish_git_prompt_show_informative_status...
25	25	--> not set -q __fish_git_prompt_show_informative_status
12	34	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
22	22	--> not set -q __fish_git_prompt_hide_untrackedfiles
11	32	-> if not set -q __fish_git_prompt_color_branch...
21	21	--> not set -q __fish_git_prompt_color_branch
13	33	-> if not set -q __fish_git_prompt_showupstream...
20	20	--> not set -q __fish_git_prompt_showupstream
12	32	-> if not set -q __fish_git_prompt_char_upstream_ahead...
20	20	--> not set -q __fish_git_prompt_char_upstream_ahead
11	31	-> if not set -q __fish_git_prompt_char_upstream_behind...
20	20	--> not set -q __fish_git_prompt_char_upstream_behind
11	31	-> if not set -q __fish_git_prompt_char_upstream_prefix...
20	20	--> not set -q __fish_git_prompt_char_upstream_prefix
13	32	-> if not set -q __fish_git_prompt_char_stagedstate...
19	19	--> not set -q __fish_git_prompt_char_stagedstate
12	32	-> if not set -q __fish_git_prompt_char_dirtystate...
20	20	--> not set -q __fish_git_prompt_char_dirtystate
13	35	-> if not set -q __fish_git_prompt_char_untrackedfiles...
22	22	--> not set -q __fish_git_prompt_char_untrackedfiles
12	51	-> if not set -q __fish_git_prompt_char_conflictedstate...
39	39	--> not set -q __fish_git_prompt_char_conflictedstate
13	34	-> if not set -q __fish_git_prompt_char_cleanstate...
21	21	--> not set -q __fish_git_prompt_char_cleanstate
13	33	-> if not set -q __fish_git_prompt_color_dirtystate...
20	20	--> not set -q __fish_git_prompt_color_dirtystate
12	34	-> if not set -q __fish_git_prompt_color_stagedstate...
22	22	--> not set -q __fish_git_prompt_color_stagedstate
13	34	-> if not set -q __fish_git_prompt_color_invalidstate...
21	21	--> not set -q __fish_git_prompt_color_invalidstate
12	33	-> if not set -q __fish_git_prompt_color_untrackedfiles...
21	21	--> not set -q __fish_git_prompt_color_untrackedfiles
11	32	-> if not set -q __fish_git_prompt_color_cleanstate...
21	21	--> not set -q __fish_git_prompt_color_cleanstate
12	33	-> if not set -q __fish_prompt_normal...
21	21	--> not set -q __fish_prompt_normal
34	34	-> set -l color_cwd
30	30	-> set -l prefix
30	30	-> set -l suffix
36	123	-> switch "$USER"...
53	53	--> set color_cwd $fish_color_cwd
34	34	--> set suffix '$'
65	65	-> set_color $color_cwd
113	1061	-> echo -n (prompt_pwd)
226	948	--> prompt_pwd
49	49	---> set -l options 'h/help'
59	59	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
15	41	---> if set -q _flag_help...
26	26	----> set -q _flag_help
22	22	---> set -q fish_prompt_pwd_dir_length
44	44	---> or set -l fish_prompt_pwd_dir_length 1
152	152	---> set realhome ~
115	206	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
91	91	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
27	149	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
36	36	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
86	86	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
27	27	-> set_color normal
157	32902	-> printf '%s ' (__fish_vcs_prompt)
73	32745	--> __fish_vcs_prompt
792	7165	---> __fish_git_prompt
11	138	----> if not command -sq git...
127	127	-----> not command -sq git
139	6204	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
6065	6065	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
7	7	----> or return
309	385	---> __fish_hg_prompt
10	76	----> if not command -sq hg...
58	58	-----> not command -sq hg
8	8	-----> return 1
187	25122	---> __fish_svn_prompt
8	68	----> if not command -sq svn...
60	60	-----> not command -sq svn
274	24711	----> set -l checkout_info (command svn info ^/dev/null)
24437	24437	-----> command svn info ^/dev/null
44	156	----> if [ $status -ne 0 ]...
90	90	-----> [ $status -ne 0 ]
22	22	-----> return
25	80	-> if not test $last_status -eq 0...
55	55	--> not test $last_status -eq 0
50	50	-> echo -n "$suffix "
75	75	-> set_color normal
58	58	> echo $_ " "
106	442	> __fish_pwd
336	336	-> pwd
802	7602	> up-or-search
6279	6325	-> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/up-or-search.fish
46	46	--> function up-or-search -d "Depending on cursor position and current mode, either search backward or move up one line"...
19	121	-> if commandline --search-mode...
102	102	--> commandline --search-mode
18	62	-> if commandline --paging-mode...
44	44	--> commandline --paging-mode
175	229	-> set lineno (commandline -L)
54	54	--> commandline -L
25	63	-> switch $lineno...
38	38	--> commandline -f history-search-backward
8415	10698	> source /usr/local/Cellar/fish/2.7.1/share/fish/completions/find.fish
118	118	-> complete -c find -s P --description "Never follow symlinks"
48	48	-> complete -c find -s L -o follow --description "Follow symlinks"
45	45	-> complete -c find -s H --description "Do  not  follow symbolic links, except while processing the command line arguments"
46	46	-> complete -c find -o daystart --description "Measure from the beginning of today rather than  from  24  hours ago"
31	31	-> complete -c find -s d -o depth --description "Process subdirectories before the directory itself"
27	27	-> complete -c find -o help -l help --description "Display help and exit"
29	29	-> complete -c find -o ignore_readdir_race --description "Do not print error messages for files that are deleted while running find"
57	57	-> complete -c find -o maxdepth --description "Maximum recursion depth" -a "1 2 3 4 5 6 7 8 9"
64	64	-> complete -c find -o mindepth --description "Do not apply any tests or actions at levels less than specified level" -a "1 2 3 4 5 6 7 8 9"
31	31	-> complete -c find -o mount -o xdev --description "Don't descend directories on other  filesystems"
28	28	-> complete -c find -o noignore_readdir_race --description "Print error messages for files that are deleted while running find"
28	28	-> complete -c find -o noleaf --description "Do not optimize by assuming that  directories  contain  2  fewer subdirectories  than  their  hard  link  count"
50	50	-> complete -c find -o regextype --description "Specify regular expression type" -a "emacs posix-awk posix-basic posiz-egrep posix-extended"
29	29	-> complete -c find -o version -l version --description "Display version and exit"
24	24	-> complete -c find -o warn --description "Turn warnings on"
25	25	-> complete -c find -o nowarn --description "Turn warnings off"
26	26	-> complete -c find -o amin --description "File last accessed specified number of minutes ago" -r
26	26	-> complete -c find -o anewer --description "File last accessed more recently than file was modified" -r
31	31	-> complete -c find -o atime --description "File last accessed specified number of days ago" -r
26	26	-> complete -c find -o cmin --description "File status last changed specified number of minutes ago" -r
27	27	-> complete -c find -o cnewer --description "File status last changed more recently than file was modified" -r
26	26	-> complete -c find -o ctime --description "File status last changed specified number of days ago" -r
25	25	-> complete -c find -o empty --description "File is empty and is either a regular file or a directory"
25	25	-> complete -c find -o executable --description "File is executable"
30	30	-> complete -c find -o false --description "Always false"
48	48	-> complete -c find -o fstype --description "File is on filesystem of specified type" -a "(__fish_print_filesystems)" -r
26	26	-> complete -c find -o gid --description "Numeric group id of file" -r
42	42	-> complete -c find -o group --description "Group name of file" -a "(__fish_complete_groups)"
28	28	-> complete -c find -o ilname --description "File is symlink matching specified case insensitive pattern" -r
32	32	-> complete -c find -o iname --description "File name matches case insensitive pattern" -r
25	25	-> complete -c find -o inum --description "File has specified inode number" -r
30	30	-> complete -c find -o ipath -o iwholename --description "File path matches case insensitive pattern" -r
25	25	-> complete -c find -o iregex --description "File name matches case insensetive regex" -r
49	49	-> complete -c find -o links --description "File has specified number of links" -r -a "1 2 3 4 5 6 7 8 9"
26	26	-> complete -c find -o lname --description "File is symlink matching specified pattern" -r
25	25	-> complete -c find -o mmin --description "File last modified specified number of minutes ago" -r
25	25	-> complete -c find -o newer --description "File last modified more recently than file was modified" -r
26	26	-> complete -c find -o mtime --description "File last modified specified number of days ago" -r
24	24	-> complete -c find -o name --description "File name matches pattern" -r
30	30	-> complete -c find -o nouser --description "No user corresponds to file's numeric user ID"
25	25	-> complete -c find -o nogroup --description "No group corresponds to file's numeric group ID"
28	28	-> complete -c find -o path -o wholename --description "File path matches pattern" -r
24	24	-> complete -c find -o perm --description "Files has specified permissions set" -r
25	25	-> complete -c find -o regex --description "File name matches regex" -r
25	25	-> complete -c find -o samefile --description "File refers to the same inode as specified file" -r
30	30	-> complete -c find -o size --description "File uses specified units of space" -r
23	23	-> complete -c find -o true --description "Always true"
42	42	-> set -l type_comp 'b\t"Block device" c\t"Character device" d\t"Directory" p\t"Named pipe" f\t"File" l\t"Symbolic link" s\t"Socket"'
66	66	-> complete -c find -o type --description "File is of specified type" -x -a  $type_comp
26	26	-> complete -c find -o uid --description "File's owner has specified numeric user ID" -r
27	27	-> complete -c find -o used --description "File was last accessed specified number of days after its status was last changed" -r
43	43	-> complete -c find -o user --description "File's owner" -a "(__fish_complete_users)" -r
82	82	-> complete -c find -o xtype --description "Check type of file - in case of symlink, check the file that is not checked by -type" -x -a $type_comp
35	35	-> complete -c find -o context --description "File's security context matches specified pattern" -r
45	45	-> complete -c find -o delete --description "Delete selected files"
21	21	-> complete -c find -o exec --description "Execute specified command for each located file" -r
22	22	-> complete -c find -o execdir --description "Execute specified command for each located file, in the files directory" -r
20	20	-> complete -c find -o fls --description "List file in ls -dils format, write to specified file" -r
21	21	-> complete -c find -o fprint --description "Print full file names into specified file" -r
21	21	-> complete -c find -o fprint0 --description "Print null separated full file names into specified file" -r
21	21	-> complete -c find -o fprintf --description "Print formated data into specified file" -r
21	21	-> complete -c find -o ok --description "Execute specified command for each located file after asking user" -r
20	20	-> complete -c find -o print --description "Print full file names"
22	22	-> complete -c find -o okdir --description "Execute specified command for each located file, in the files directory, after asking user" -r
21	21	-> complete -c find -o print0 --description "Print null separated full file names"
20	20	-> complete -c find -o printf --description "Print formated data" -r
20	20	-> complete -c find -o prune --description "Do not recurse unless -depth is specified"
19	19	-> complete -c find -o quit --description "Exit at once"
20	20	-> complete -c find -o ls --description "List file in ls -dils format" -r
19	19	-> complete -c find -o not --description "Negate result of action"
23	23	-> complete -c find -o and -s a --description "Result is only true if both previous and next action are true"
23	23	-> complete -c find -o or -s o --description "Result is true if either previous or next action are true"
89	169	> __fish_disable_bracketed_paste 'sort -k 2 -nr profile.txt | find * -name ex'
80	80	-> printf "\e[?2004l"
65	65	> echo $_ " "
117	234	> __fish_pwd
117	117	-> pwd
5115682	5115682	> sort -k 2 -nr profile.txt | find * -name ex
51	535	> fish_mode_prompt
294	484	-> fish_default_mode_prompt
15	190	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
145	145	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
30	30	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
637	25317	> fish_prompt
65	65	-> set -l last_status $status
9	22	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
7	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_color_branch...
10	10	--> not set -q __fish_git_prompt_color_branch
6	16	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
6	19	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
5	15	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
6	16	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
5	15	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
7	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_char_conflictedstate...
10	10	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
7	19	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
6	16	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
6	15	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
18	18	-> set -l prefix
15	15	-> set -l suffix
21	63	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
19	19	--> set suffix '$'
51	51	-> set_color $color_cwd
53	662	-> echo -n (prompt_pwd)
182	609	--> prompt_pwd
26	26	---> set -l options 'h/help'
53	53	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
65	65	---> set realhome ~
60	155	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
95	95	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	81	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
39	39	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
32	32	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
53	23340	-> printf '%s ' (__fish_vcs_prompt)
79	23287	--> __fish_vcs_prompt
565	4582	---> __fish_git_prompt
9	77	----> if not command -sq git...
68	68	-----> not command -sq git
127	3897	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3770	3770	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
33	33	----> test -n "$repo_info"
10	10	----> or return
420	496	---> __fish_hg_prompt
10	76	----> if not command -sq hg...
57	57	-----> not command -sq hg
9	9	-----> return 1
199	18130	---> __fish_svn_prompt
12	72	----> if not command -sq svn...
60	60	-----> not command -sq svn
92	17818	----> set -l checkout_info (command svn info ^/dev/null)
17726	17726	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
11	103	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
78	78	--> set_color $fish_color_error
16	16	-> echo -n "$suffix "
13	13	-> set_color normal
13	13	> echo $_ " "
28	83	> __fish_pwd
55	55	-> pwd
294	694	> up-or-search
19	111	-> if commandline --search-mode...
92	92	--> commandline --search-mode
15	54	-> if commandline --paging-mode...
39	39	--> commandline --paging-mode
121	169	-> set lineno (commandline -L)
48	48	--> commandline -L
28	66	-> switch $lineno...
38	38	--> commandline -f history-search-backward
78	131	> __fish_disable_bracketed_paste 'sort -k 2 -nr profile.txt | find ex'
53	53	-> printf "\e[?2004l"
38	38	> echo $_ " "
52	170	> __fish_pwd
118	118	-> pwd
9363	9363	> sort -k 2 -nr profile.txt | find ex
43	82	> __fish_enable_bracketed_paste
39	39	-> printf "\e[?2004h"
43	315	> fish_mode_prompt
137	272	-> fish_default_mode_prompt
12	135	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
99	99	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
24	24	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
487	33045	> fish_prompt
29	29	-> set -l last_status $status
8	20	-> if not set -q __fish_git_prompt_show_informative_status...
12	12	--> not set -q __fish_git_prompt_show_informative_status
6	17	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_color_branch...
10	10	--> not set -q __fish_git_prompt_color_branch
6	17	-> if not set -q __fish_git_prompt_showupstream...
11	11	--> not set -q __fish_git_prompt_showupstream
8	18	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
6	19	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
7	17	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
7	16	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_char_conflictedstate...
10	10	--> not set -q __fish_git_prompt_char_conflictedstate
6	18	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	16	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
6	15	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
15	15	-> set -l prefix
14	14	-> set -l suffix
20	62	-> switch "$USER"...
25	25	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
28	28	-> set_color $color_cwd
51	515	-> echo -n (prompt_pwd)
129	464	--> prompt_pwd
26	26	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	22	---> if set -q _flag_help...
14	14	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
61	61	---> set realhome ~
59	107	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
48	48	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
11	60	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
17	17	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
32	32	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
50	31419	-> printf '%s ' (__fish_vcs_prompt)
45	31369	--> __fish_vcs_prompt
538	4196	---> __fish_git_prompt
8	78	----> if not command -sq git...
70	70	-----> not command -sq git
112	3504	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3392	3392	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
30	30	----> test -n "$repo_info"
46	46	----> or return
868	1099	---> __fish_hg_prompt
35	231	----> if not command -sq hg...
170	170	-----> not command -sq hg
26	26	-----> return 1
405	26029	---> __fish_svn_prompt
37	259	----> if not command -sq svn...
222	222	-----> not command -sq svn
171	25324	----> set -l checkout_info (command svn info ^/dev/null)
25153	25153	-----> command svn info ^/dev/null
11	41	----> if [ $status -ne 0 ]...
24	24	-----> [ $status -ne 0 ]
6	6	-----> return
10	112	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
87	87	--> set_color $fish_color_error
16	16	-> echo -n "$suffix "
13	13	-> set_color normal
14	14	> echo $_ " "
28	99	> __fish_pwd
71	71	-> pwd
334	6901	> __fish_cancel_commandline
6283	6307	-> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/__fish_cancel_commandline.fish
24	24	--> function __fish_cancel_commandline...
130	196	-> set -l cmd (commandline)
66	66	--> commandline
10	64	-> if test -n "$cmd"...
54	54	--> test -n "$cmd"
90	222	> __fish_disable_bracketed_paste 'cd ~/.config/fish/'
132	132	-> printf "\e[?2004l"
62	62	> echo $_ " "
100	199	> __fish_pwd
99	99	-> pwd
518	61102	> cd ~/.config/fish/
91	91	-> set -l MAX_DIR_HIST 25
26	403	-> if test (count $argv) -gt 1...
182	377	--> test (count $argv) -gt 1
195	195	---> count $argv
31	166	-> if status --is-command-substitution...
135	135	--> status --is-command-substitution
106	106	-> set -l previous $PWD
28	121	-> if test "$argv" = "-"...
93	93	--> test "$argv" = "-"
321	59274	-> builtin cd $argv
66	55629	--> __z_on_variable_pwd VARIABLE SET PWD
426	55563	---> __z_add
191	23035	----> set -l path (command dirname (status -f))
22787	22844	-----> command dirname (status -f)
57	57	------> status -f
101	177	----> for i in $Z_EXCLUDE...
10	76	-----> if contains -- $PWD $i...
66	66	------> contains -- $PWD $i
142	4406	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
4264	4264	-----> mktemp $Z_DATA.XXXXXX
113	15118	----> if test -f $tmpfile...
59	59	-----> test -f $tmpfile
7620	11126	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
3506	3506	------> date +%s
21	135	-----> if test ! -z "$Z_OWNER"...
114	114	------> test ! -z "$Z_OWNER"
3685	3685	-----> command mv $tmpfile $Z_DATA
331	12401	----> __z_complete
618	11485	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
10867	10867	------> string replace -r '\|.*' '' < $Z_DATA | string escape
266	266	-----> complete -c $Z_CMD -a "$__z_marks" -f
209	209	-----> complete -c $ZO_CMD -a "$__z_marks" -f
23	23	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
15	15	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
15	15	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
17	17	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
13	13	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
14	14	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
13	13	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
65	3324	--> __update_cwd_osc VARIABLE SET PWD
8	34	---> if status --is-command-substitution...
17	17	----> status --is-command-substitution
9	9	----> or set -q INSIDE_EMACS
179	3225	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
3010	3010	----> hostname
36	36	----> string escape --style=url $PWD
52	52	-> set -l cd_status $status
59	340	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
69	69	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
32	32	--> set -q dirprev
40	40	--> set -q dirprev[$MAX_DIR_HIST]
58	58	--> set -g dirprev $dirprev $previous
41	41	--> set -e dirnext
41	41	--> set -g __fish_cd_direction prev
31	31	-> return $cd_status
36	66	> __fish_enable_bracketed_paste
30	30	-> printf "\e[?2004h"
41	402	> fish_mode_prompt
203	361	-> fish_default_mode_prompt
15	158	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
112	112	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
31	31	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
640	53877	> fish_prompt
56	56	-> set -l last_status $status
11	28	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
9	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_color_branch...
12	12	--> not set -q __fish_git_prompt_color_branch
9	21	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
10	23	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	23	-> if not set -q __fish_git_prompt_char_upstream_behind...
14	14	--> not set -q __fish_git_prompt_char_upstream_behind
9	23	-> if not set -q __fish_git_prompt_char_upstream_prefix...
14	14	--> not set -q __fish_git_prompt_char_upstream_prefix
8	22	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
10	29	-> if not set -q __fish_git_prompt_char_dirtystate...
19	19	--> not set -q __fish_git_prompt_char_dirtystate
10	23	-> if not set -q __fish_git_prompt_char_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_char_untrackedfiles
9	23	-> if not set -q __fish_git_prompt_char_conflictedstate...
14	14	--> not set -q __fish_git_prompt_char_conflictedstate
9	22	-> if not set -q __fish_git_prompt_char_cleanstate...
13	13	--> not set -q __fish_git_prompt_char_cleanstate
10	23	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
8	22	-> if not set -q __fish_git_prompt_color_stagedstate...
14	14	--> not set -q __fish_git_prompt_color_stagedstate
9	22	-> if not set -q __fish_git_prompt_color_invalidstate...
13	13	--> not set -q __fish_git_prompt_color_invalidstate
10	27	-> if not set -q __fish_git_prompt_color_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_color_untrackedfiles
10	23	-> if not set -q __fish_git_prompt_color_cleanstate...
13	13	--> not set -q __fish_git_prompt_color_cleanstate
10	23	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
40	40	-> set -l color_cwd
33	33	-> set -l prefix
18	18	-> set -l suffix
21	59	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
16	16	--> set suffix '$'
102	102	-> set_color $color_cwd
105	1010	-> echo -n (prompt_pwd)
257	905	--> prompt_pwd
36	36	---> set -l options 'h/help'
80	80	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
13	32	---> if set -q _flag_help...
19	19	----> set -q _flag_help
18	18	---> set -q fish_prompt_pwd_dir_length
23	23	---> or set -l fish_prompt_pwd_dir_length 1
94	94	---> set realhome ~
97	233	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
136	136	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
15	132	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
67	67	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
50	50	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
32	32	-> set_color normal
69	51400	-> printf '%s ' (__fish_vcs_prompt)
107	51331	--> __fish_vcs_prompt
585	17056	---> __fish_git_prompt
19	228	----> if not command -sq git...
209	209	-----> not command -sq git
149	16211	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
16062	16062	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
25	25	----> test -n "$repo_info"
7	7	----> or return
355	426	---> __fish_hg_prompt
10	71	----> if not command -sq hg...
52	52	-----> not command -sq hg
9	9	-----> return 1
200	33742	---> __fish_svn_prompt
8	61	----> if not command -sq svn...
53	53	-----> not command -sq svn
98	33430	----> set -l checkout_info (command svn info ^/dev/null)
33332	33332	-----> command svn info ^/dev/null
13	51	----> if [ $status -ne 0 ]...
27	27	-----> [ $status -ne 0 ]
11	11	-----> return
10	27	-> if not test $last_status -eq 0...
17	17	--> not test $last_status -eq 0
17	17	-> echo -n "$suffix "
23	23	-> set_color normal
19	19	> echo $_ " "
40	91	> __fish_pwd
51	51	-> pwd
62	103	> __fish_disable_bracketed_paste ls
41	41	-> printf "\e[?2004l"
33	33	> echo $_ " "
63	135	> __fish_pwd
72	72	-> pwd
226	16058	> ls
5268	12505	-> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/ls.fish
49	7237	--> if command ls --version >/dev/null ^/dev/null...
3617	3617	---> command ls --version >/dev/null ^/dev/null
3535	3535	---> command ls -G / >/dev/null ^/dev/null
36	36	---> function ls --description "List contents of directory"...
3327	3327	-> command ls -G $argv
42	73	> __fish_enable_bracketed_paste
31	31	-> printf "\e[?2004h"
39	355	> fish_mode_prompt
165	316	-> fish_default_mode_prompt
14	151	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
107	107	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
30	30	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
690	34183	> fish_prompt
38	38	-> set -l last_status $status
10	26	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	22	-> if not set -q __fish_git_prompt_color_branch...
14	14	--> not set -q __fish_git_prompt_color_branch
9	23	-> if not set -q __fish_git_prompt_showupstream...
14	14	--> not set -q __fish_git_prompt_showupstream
10	23	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
9	27	-> if not set -q __fish_git_prompt_char_upstream_prefix...
18	18	--> not set -q __fish_git_prompt_char_upstream_prefix
8	22	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
9	22	-> if not set -q __fish_git_prompt_char_dirtystate...
13	13	--> not set -q __fish_git_prompt_char_dirtystate
9	21	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
8	21	-> if not set -q __fish_git_prompt_char_cleanstate...
13	13	--> not set -q __fish_git_prompt_char_cleanstate
9	22	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
9	26	-> if not set -q __fish_git_prompt_color_stagedstate...
17	17	--> not set -q __fish_git_prompt_color_stagedstate
8	21	-> if not set -q __fish_git_prompt_color_invalidstate...
13	13	--> not set -q __fish_git_prompt_color_invalidstate
8	21	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_cleanstate...
13	13	--> not set -q __fish_git_prompt_color_cleanstate
9	21	-> if not set -q __fish_prompt_normal...
12	12	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
19	19	-> set -l prefix
20	20	-> set -l suffix
27	78	-> switch "$USER"...
29	29	--> set color_cwd $fish_color_cwd
22	22	--> set suffix '$'
34	34	-> set_color $color_cwd
66	657	-> echo -n (prompt_pwd)
177	591	--> prompt_pwd
31	31	---> set -l options 'h/help'
40	40	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
10	24	---> if set -q _flag_help...
14	14	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
22	22	---> or set -l fish_prompt_pwd_dir_length 1
64	64	---> set realhome ~
76	138	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
62	62	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
13	81	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
22	22	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
46	46	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
21	21	-> set_color normal
67	32110	-> printf '%s ' (__fish_vcs_prompt)
53	32043	--> __fish_vcs_prompt
697	4899	---> __fish_git_prompt
12	114	----> if not command -sq git...
102	102	-----> not command -sq git
120	4051	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3931	3931	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
29	29	----> test -n "$repo_info"
8	8	----> or return
418	513	---> __fish_hg_prompt
16	95	----> if not command -sq hg...
68	68	-----> not command -sq hg
11	11	-----> return 1
215	26578	---> __fish_svn_prompt
11	178	----> if not command -sq svn...
167	167	-----> not command -sq svn
132	26125	----> set -l checkout_info (command svn info ^/dev/null)
25993	25993	-----> command svn info ^/dev/null
18	60	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
9	9	-----> return
13	37	-> if not test $last_status -eq 0...
24	24	--> not test $last_status -eq 0
25	25	-> echo -n "$suffix "
30	30	-> set_color normal
19	19	> echo $_ " "
35	88	> __fish_pwd
53	53	-> pwd
87	132	> __fish_disable_bracketed_paste 'cd config'
45	45	-> printf "\e[?2004l"
45	45	> echo $_ " "
65	147	> __fish_pwd
82	82	-> pwd
466	38055	> cd config
78	78	-> set -l MAX_DIR_HIST 25
18	254	-> if test (count $argv) -gt 1...
141	236	--> test (count $argv) -gt 1
95	95	---> count $argv
17	64	-> if status --is-command-substitution...
47	47	--> status --is-command-substitution
63	63	-> set -l previous $PWD
18	92	-> if test "$argv" = "-"...
74	74	--> test "$argv" = "-"
282	36710	-> builtin cd $argv
59	34655	--> __z_on_variable_pwd VARIABLE SET PWD
280	34596	---> __z_add
136	2894	----> set -l path (command dirname (status -f))
2700	2758	-----> command dirname (status -f)
58	58	------> status -f
102	140	----> for i in $Z_EXCLUDE...
11	38	-----> if contains -- $PWD $i...
27	27	------> contains -- $PWD $i
116	2733	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2617	2617	-----> mktemp $Z_DATA.XXXXXX
85	14570	----> if test -f $tmpfile...
47	47	-----> test -f $tmpfile
9244	11921	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
2677	2677	------> date +%s
22	185	-----> if test ! -z "$Z_OWNER"...
163	163	------> test ! -z "$Z_OWNER"
2332	2332	-----> command mv $tmpfile $Z_DATA
138	13979	----> __z_complete
547	13295	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
12748	12748	------> string replace -r '\|.*' '' < $Z_DATA | string escape
230	230	-----> complete -c $Z_CMD -a "$__z_marks" -f
203	203	-----> complete -c $ZO_CMD -a "$__z_marks" -f
22	22	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
16	16	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
15	15	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
17	17	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
14	14	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
15	15	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
14	14	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
55	1773	--> __update_cwd_osc VARIABLE SET PWD
8	32	---> if status --is-command-substitution...
15	15	----> status --is-command-substitution
9	9	----> or set -q INSIDE_EMACS
124	1686	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
1535	1535	----> hostname
27	27	----> string escape --style=url $PWD
46	46	-> set -l cd_status $status
40	261	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
60	60	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
30	30	--> set -q dirprev
30	30	--> set -q dirprev[$MAX_DIR_HIST]
47	47	--> set -g dirprev $dirprev $previous
27	27	--> set -e dirnext
27	27	--> set -g __fish_cd_direction prev
21	21	-> return $cd_status
30	49	> __fish_enable_bracketed_paste
19	19	-> printf "\e[?2004h"
31	244	> fish_mode_prompt
105	213	-> fish_default_mode_prompt
10	108	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
78	78	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
20	20	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
470	35151	> fish_prompt
25	25	-> set -l last_status $status
8	19	-> if not set -q __fish_git_prompt_show_informative_status...
11	11	--> not set -q __fish_git_prompt_show_informative_status
5	15	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
6	15	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
6	15	-> if not set -q __fish_git_prompt_char_upstream_ahead...
9	9	--> not set -q __fish_git_prompt_char_upstream_ahead
5	14	-> if not set -q __fish_git_prompt_char_upstream_behind...
9	9	--> not set -q __fish_git_prompt_char_upstream_behind
6	14	-> if not set -q __fish_git_prompt_char_upstream_prefix...
8	8	--> not set -q __fish_git_prompt_char_upstream_prefix
6	15	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
6	15	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	19	-> if not set -q __fish_git_prompt_char_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_char_untrackedfiles
6	14	-> if not set -q __fish_git_prompt_char_conflictedstate...
8	8	--> not set -q __fish_git_prompt_char_conflictedstate
6	14	-> if not set -q __fish_git_prompt_char_cleanstate...
8	8	--> not set -q __fish_git_prompt_char_cleanstate
6	15	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
5	14	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
5	13	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
5	18	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
5	14	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
5	14	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
14	14	-> set -l color_cwd
13	13	-> set -l prefix
14	14	-> set -l suffix
19	53	-> switch "$USER"...
19	19	--> set color_cwd $fish_color_cwd
15	15	--> set suffix '$'
27	27	-> set_color $color_cwd
50	469	-> echo -n (prompt_pwd)
118	419	--> prompt_pwd
20	20	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
10	24	---> if set -q _flag_help...
14	14	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
15	15	---> or set -l fish_prompt_pwd_dir_length 1
38	38	---> set realhome ~
58	105	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
47	47	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	57	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
16	16	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
31	31	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
15	15	-> set_color normal
54	33698	-> printf '%s ' (__fish_vcs_prompt)
45	33644	--> __fish_vcs_prompt
529	4439	---> __fish_git_prompt
11	102	----> if not command -sq git...
91	91	-----> not command -sq git
107	3763	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3656	3656	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
36	36	----> test -n "$repo_info"
9	9	----> or return
555	698	---> __fish_hg_prompt
15	143	----> if not command -sq hg...
116	116	-----> not command -sq hg
12	12	-----> return 1
228	28462	---> __fish_svn_prompt
15	114	----> if not command -sq svn...
99	99	-----> not command -sq svn
178	28062	----> set -l checkout_info (command svn info ^/dev/null)
27884	27884	-----> command svn info ^/dev/null
16	58	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
9	9	-----> return
11	33	-> if not test $last_status -eq 0...
22	22	--> not test $last_status -eq 0
21	21	-> echo -n "$suffix "
27	27	-> set_color normal
22	22	> echo $_ " "
42	108	> __fish_pwd
66	66	-> pwd
70	100	> __fish_disable_bracketed_paste ls
30	30	-> printf "\e[?2004l"
38	38	> echo $_ " "
49	112	> __fish_pwd
63	63	-> pwd
167	4670	> ls
4503	4503	-> command ls -G $argv
62	131	> __fish_enable_bracketed_paste
69	69	-> printf "\e[?2004h"
54	550	> fish_mode_prompt
202	496	-> fish_default_mode_prompt
20	294	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
240	240	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
34	34	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
668	31648	> fish_prompt
77	77	-> set -l last_status $status
9	22	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
7	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_color_branch...
10	10	--> not set -q __fish_git_prompt_color_branch
7	17	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
20	77	-> if not set -q __fish_git_prompt_char_upstream_ahead...
57	57	--> not set -q __fish_git_prompt_char_upstream_ahead
14	41	-> if not set -q __fish_git_prompt_char_upstream_behind...
27	27	--> not set -q __fish_git_prompt_char_upstream_behind
49	95	-> if not set -q __fish_git_prompt_char_upstream_prefix...
46	46	--> not set -q __fish_git_prompt_char_upstream_prefix
15	42	-> if not set -q __fish_git_prompt_char_stagedstate...
27	27	--> not set -q __fish_git_prompt_char_stagedstate
12	48	-> if not set -q __fish_git_prompt_char_dirtystate...
36	36	--> not set -q __fish_git_prompt_char_dirtystate
8	24	-> if not set -q __fish_git_prompt_char_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_char_untrackedfiles
6	17	-> if not set -q __fish_git_prompt_char_conflictedstate...
11	11	--> not set -q __fish_git_prompt_char_conflictedstate
7	17	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
7	17	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
8	17	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
7	17	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
7	16	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
8	22	-> if not set -q __fish_prompt_normal...
14	14	--> not set -q __fish_prompt_normal
18	18	-> set -l color_cwd
16	16	-> set -l prefix
15	15	-> set -l suffix
32	86	-> switch "$USER"...
34	34	--> set color_cwd $fish_color_cwd
20	20	--> set suffix '$'
31	31	-> set_color $color_cwd
63	595	-> echo -n (prompt_pwd)
169	532	--> prompt_pwd
28	28	---> set -l options 'h/help'
32	32	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
73	73	---> set realhome ~
64	115	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
51	51	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	67	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
19	19	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
69	29487	-> printf '%s ' (__fish_vcs_prompt)
48	29418	--> __fish_vcs_prompt
547	4224	---> __fish_git_prompt
9	88	----> if not command -sq git...
79	79	-----> not command -sq git
97	3558	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3461	3461	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
7	7	----> or return
322	397	---> __fish_hg_prompt
12	75	----> if not command -sq hg...
55	55	-----> not command -sq hg
8	8	-----> return 1
165	24749	---> __fish_svn_prompt
8	68	----> if not command -sq svn...
60	60	-----> not command -sq svn
116	24462	----> set -l checkout_info (command svn info ^/dev/null)
24346	24346	-----> command svn info ^/dev/null
15	54	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
8	8	-----> return
12	39	-> if not test $last_status -eq 0...
27	27	--> not test $last_status -eq 0
27	27	-> echo -n "$suffix "
32	32	-> set_color normal
22	22	> echo $_ " "
52	122	> __fish_pwd
70	70	-> pwd
79	112	> __fish_disable_bracketed_paste 'ls -a'
33	33	-> printf "\e[?2004l"
47	47	> echo $_ " "
56	128	> __fish_pwd
72	72	-> pwd
272	5238	> ls -a
4966	4966	-> command ls -G $argv
69	141	> __fish_enable_bracketed_paste
72	72	-> printf "\e[?2004h"
66	553	> fish_mode_prompt
248	487	-> fish_default_mode_prompt
21	239	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
174	174	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
44	44	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
1070	33525	> fish_prompt
54	54	-> set -l last_status $status
12	28	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_color_branch...
12	12	--> not set -q __fish_git_prompt_color_branch
9	21	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
7	20	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	25	-> if not set -q __fish_git_prompt_char_upstream_behind...
16	16	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
9	21	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
7	19	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
7	19	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
8	23	-> if not set -q __fish_git_prompt_color_dirtystate...
15	15	--> not set -q __fish_git_prompt_color_dirtystate
7	31	-> if not set -q __fish_git_prompt_color_stagedstate...
24	24	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
8	17	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
16	16	-> set -l prefix
14	14	-> set -l suffix
22	66	-> switch "$USER"...
27	27	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
28	28	-> set_color $color_cwd
60	528	-> echo -n (prompt_pwd)
132	468	--> prompt_pwd
26	26	---> set -l options 'h/help'
32	32	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
51	51	---> set realhome ~
63	114	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
51	51	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
13	66	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
18	18	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
35	35	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
60	31256	-> printf '%s ' (__fish_vcs_prompt)
45	31196	--> __fish_vcs_prompt
544	7298	---> __fish_git_prompt
9	88	----> if not command -sq git...
79	79	-----> not command -sq git
158	6633	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
6475	6475	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
26	26	----> test -n "$repo_info"
7	7	----> or return
530	635	---> __fish_hg_prompt
16	105	----> if not command -sq hg...
75	75	-----> not command -sq hg
14	14	-----> return 1
245	23218	---> __fish_svn_prompt
13	96	----> if not command -sq svn...
83	83	-----> not command -sq svn
152	22781	----> set -l checkout_info (command svn info ^/dev/null)
22629	22629	-----> command svn info ^/dev/null
18	96	----> if [ $status -ne 0 ]...
68	68	-----> [ $status -ne 0 ]
10	10	-----> return
11	36	-> if not test $last_status -eq 0...
25	25	--> not test $last_status -eq 0
21	21	-> echo -n "$suffix "
26	26	-> set_color normal
25	25	> echo $_ " "
45	122	> __fish_pwd
77	77	-> pwd
77	112	> __fish_disable_bracketed_paste 'cd ..'
35	35	-> printf "\e[?2004l"
31	31	> echo $_ " "
50	135	> __fish_pwd
85	85	-> pwd
379	31559	> cd ..
65	65	-> set -l MAX_DIR_HIST 25
15	177	-> if test (count $argv) -gt 1...
103	162	--> test (count $argv) -gt 1
59	59	---> count $argv
16	60	-> if status --is-command-substitution...
44	44	--> status --is-command-substitution
59	59	-> set -l previous $PWD
15	62	-> if test "$argv" = "-"...
47	47	--> test "$argv" = "-"
202	30470	-> builtin cd $argv
46	28162	--> __z_on_variable_pwd VARIABLE SET PWD
359	28116	---> __z_add
130	2384	----> set -l path (command dirname (status -f))
2232	2254	-----> command dirname (status -f)
22	22	------> status -f
102	146	----> for i in $Z_EXCLUDE...
10	44	-----> if contains -- $PWD $i...
34	34	------> contains -- $PWD $i
116	3133	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
3017	3017	-----> mktemp $Z_DATA.XXXXXX
69	8582	----> if test -f $tmpfile...
43	43	-----> test -f $tmpfile
4195	6522	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
2327	2327	------> date +%s
23	138	-----> if test ! -z "$Z_OWNER"...
115	115	------> test ! -z "$Z_OWNER"
1810	1810	-----> command mv $tmpfile $Z_DATA
183	13512	----> __z_complete
900	12507	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
11607	11607	------> string replace -r '\|.*' '' < $Z_DATA | string escape
446	446	-----> complete -c $Z_CMD -a "$__z_marks" -f
251	251	-----> complete -c $ZO_CMD -a "$__z_marks" -f
28	28	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
17	17	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
16	16	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
18	18	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
16	16	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
16	16	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
14	14	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
60	2106	--> __update_cwd_osc VARIABLE SET PWD
8	34	---> if status --is-command-substitution...
16	16	----> status --is-command-substitution
10	10	----> or set -q INSIDE_EMACS
146	2012	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
1832	1832	----> hostname
34	34	----> string escape --style=url $PWD
39	39	-> set -l cd_status $status
33	228	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
44	44	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
21	21	--> set -q dirprev
28	28	--> set -q dirprev[$MAX_DIR_HIST]
48	48	--> set -g dirprev $dirprev $previous
27	27	--> set -e dirnext
27	27	--> set -g __fish_cd_direction prev
20	20	-> return $cd_status
34	52	> __fish_enable_bracketed_paste
18	18	-> printf "\e[?2004h"
26	259	> fish_mode_prompt
114	233	-> fish_default_mode_prompt
11	119	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
88	88	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
20	20	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
466	32840	> fish_prompt
28	28	-> set -l last_status $status
7	20	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
5	15	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	26	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
7	16	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
6	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
11	11	--> not set -q __fish_git_prompt_char_upstream_ahead
6	14	-> if not set -q __fish_git_prompt_char_upstream_behind...
8	8	--> not set -q __fish_git_prompt_char_upstream_behind
6	15	-> if not set -q __fish_git_prompt_char_upstream_prefix...
9	9	--> not set -q __fish_git_prompt_char_upstream_prefix
6	15	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
6	19	-> if not set -q __fish_git_prompt_char_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_char_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
5	14	-> if not set -q __fish_git_prompt_char_cleanstate...
9	9	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	14	-> if not set -q __fish_git_prompt_color_stagedstate...
8	8	--> not set -q __fish_git_prompt_color_stagedstate
5	13	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
6	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_color_untrackedfiles
5	14	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
7	17	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
15	15	-> set -l color_cwd
15	15	-> set -l prefix
13	13	-> set -l suffix
21	60	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
40	40	-> set_color $color_cwd
104	795	-> echo -n (prompt_pwd)
147	691	--> prompt_pwd
20	20	---> set -l options 'h/help'
29	29	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
7	17	---> if set -q _flag_help...
10	10	----> set -q _flag_help
9	9	---> set -q fish_prompt_pwd_dir_length
14	14	---> or set -l fish_prompt_pwd_dir_length 1
77	77	---> set realhome ~
133	204	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
71	71	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
31	174	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
48	48	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
95	95	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
50	50	-> set_color normal
107	31005	-> printf '%s ' (__fish_vcs_prompt)
79	30898	--> __fish_vcs_prompt
832	6557	---> __fish_git_prompt
13	143	----> if not command -sq git...
130	130	-----> not command -sq git
107	5554	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
5447	5447	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
22	22	----> test -n "$repo_info"
6	6	----> or return
267	335	---> __fish_hg_prompt
10	68	----> if not command -sq hg...
50	50	-----> not command -sq hg
8	8	-----> return 1
144	23927	---> __fish_svn_prompt
8	66	----> if not command -sq svn...
58	58	-----> not command -sq svn
131	23676	----> set -l checkout_info (command svn info ^/dev/null)
23545	23545	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
7	22	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
14	14	-> echo -n "$suffix "
21	21	-> set_color normal
14	14	> echo $_ " "
29	74	> __fish_pwd
45	45	-> pwd
74	214	> __fish_disable_bracketed_paste 'cd config'
140	140	-> printf "\e[?2004l"
63	63	> echo $_ " "
122	288	> __fish_pwd
166	166	-> pwd
623	41646	> cd config
101	101	-> set -l MAX_DIR_HIST 25
26	376	-> if test (count $argv) -gt 1...
176	350	--> test (count $argv) -gt 1
174	174	---> count $argv
28	160	-> if status --is-command-substitution...
132	132	--> status --is-command-substitution
108	108	-> set -l previous $PWD
31	172	-> if test "$argv" = "-"...
141	141	--> test "$argv" = "-"
459	39037	-> builtin cd $argv
62	30882	--> __z_on_variable_pwd VARIABLE SET PWD
478	30820	---> __z_add
200	4305	----> set -l path (command dirname (status -f))
4065	4105	-----> command dirname (status -f)
40	40	------> status -f
129	236	----> for i in $Z_EXCLUDE...
15	107	-----> if contains -- $PWD $i...
92	92	------> contains -- $PWD $i
110	2355	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2245	2245	-----> mktemp $Z_DATA.XXXXXX
98	9861	----> if test -f $tmpfile...
34	34	-----> test -f $tmpfile
5049	7438	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
2389	2389	------> date +%s
23	156	-----> if test ! -z "$Z_OWNER"...
133	133	------> test ! -z "$Z_OWNER"
2135	2135	-----> command mv $tmpfile $Z_DATA
260	13585	----> __z_complete
760	12713	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
11953	11953	------> string replace -r '\|.*' '' < $Z_DATA | string escape
297	297	-----> complete -c $Z_CMD -a "$__z_marks" -f
205	205	-----> complete -c $ZO_CMD -a "$__z_marks" -f
22	22	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
16	16	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
15	15	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
17	17	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
13	13	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
14	14	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
13	13	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
92	7696	--> __update_cwd_osc VARIABLE SET PWD
24	117	---> if status --is-command-substitution...
50	50	----> status --is-command-substitution
43	43	----> or set -q INSIDE_EMACS
325	7487	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
7081	7081	----> hostname
81	81	----> string escape --style=url $PWD
157	157	-> set -l cd_status $status
182	872	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
251	251	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
73	73	--> set -q dirprev
62	62	--> set -q dirprev[$MAX_DIR_HIST]
101	101	--> set -g dirprev $dirprev $previous
154	154	--> set -e dirnext
49	49	--> set -g __fish_cd_direction prev
40	40	-> return $cd_status
44	72	> __fish_enable_bracketed_paste
28	28	-> printf "\e[?2004h"
28	345	> fish_mode_prompt
132	317	-> fish_default_mode_prompt
11	185	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
151	151	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
23	23	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
454	29197	> fish_prompt
26	26	-> set -l last_status $status
7	18	-> if not set -q __fish_git_prompt_show_informative_status...
11	11	--> not set -q __fish_git_prompt_show_informative_status
6	15	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_hide_untrackedfiles
5	14	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
6	15	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
5	14	-> if not set -q __fish_git_prompt_char_upstream_ahead...
9	9	--> not set -q __fish_git_prompt_char_upstream_ahead
5	14	-> if not set -q __fish_git_prompt_char_upstream_behind...
9	9	--> not set -q __fish_git_prompt_char_upstream_behind
6	14	-> if not set -q __fish_git_prompt_char_upstream_prefix...
8	8	--> not set -q __fish_git_prompt_char_upstream_prefix
6	15	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
5	13	-> if not set -q __fish_git_prompt_char_dirtystate...
8	8	--> not set -q __fish_git_prompt_char_dirtystate
6	14	-> if not set -q __fish_git_prompt_char_untrackedfiles...
8	8	--> not set -q __fish_git_prompt_char_untrackedfiles
5	13	-> if not set -q __fish_git_prompt_char_conflictedstate...
8	8	--> not set -q __fish_git_prompt_char_conflictedstate
6	14	-> if not set -q __fish_git_prompt_char_cleanstate...
8	8	--> not set -q __fish_git_prompt_char_cleanstate
5	14	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
5	13	-> if not set -q __fish_git_prompt_color_stagedstate...
8	8	--> not set -q __fish_git_prompt_color_stagedstate
6	14	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
5	14	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
5	13	-> if not set -q __fish_git_prompt_color_cleanstate...
8	8	--> not set -q __fish_git_prompt_color_cleanstate
5	14	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
14	14	-> set -l color_cwd
13	13	-> set -l prefix
13	13	-> set -l suffix
18	52	-> switch "$USER"...
19	19	--> set color_cwd $fish_color_cwd
15	15	--> set suffix '$'
56	56	-> set_color $color_cwd
72	596	-> echo -n (prompt_pwd)
154	524	--> prompt_pwd
21	21	---> set -l options 'h/help'
93	93	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
7	18	---> if set -q _flag_help...
11	11	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
14	14	---> or set -l fish_prompt_pwd_dir_length 1
37	37	---> set realhome ~
57	100	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
43	43	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	77	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
35	35	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
32	32	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
16	16	-> set_color normal
49	27645	-> printf '%s ' (__fish_vcs_prompt)
237	27596	--> __fish_vcs_prompt
555	5278	---> __fish_git_prompt
10	90	----> if not command -sq git...
80	80	-----> not command -sq git
222	4594	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4372	4372	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
32	32	----> test -n "$repo_info"
7	7	----> or return
413	494	---> __fish_hg_prompt
13	81	----> if not command -sq hg...
56	56	-----> not command -sq hg
12	12	-----> return 1
357	21587	---> __fish_svn_prompt
14	134	----> if not command -sq svn...
120	120	-----> not command -sq svn
133	21055	----> set -l checkout_info (command svn info ^/dev/null)
20922	20922	-----> command svn info ^/dev/null
11	41	----> if [ $status -ne 0 ]...
24	24	-----> [ $status -ne 0 ]
6	6	-----> return
8	22	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
14	14	-> echo -n "$suffix "
21	21	-> set_color normal
14	14	> echo $_ " "
35	82	> __fish_pwd
47	47	-> pwd
6682	10178	> source /usr/local/Cellar/fish/2.7.1/share/fish/completions/cat.fish
62	3496	-> if cat --version ^ /dev/null > /dev/null # GNU...
3125	3125	--> cat --version ^ /dev/null > /dev/null
114	114	--> complete -c cat -s b -d "Number non-blank lines"
55	55	--> complete -c cat -s e -d "Display non-printing characters, and `\$' at the end of each line"
28	28	--> complete -c cat -s n -d "Number all lines"
26	26	--> complete -c cat -s s -d "Single spaced output by squeezing adjacent empty lines"
26	26	--> complete -c cat -s t -d "Display non-printing characters, and tab characters as `^I'"
24	24	--> complete -c cat -s u -d "Disable output buffering"
36	36	--> complete -c cat -s v -d "Display non-printing characters so they're visible."
75	113	> __fish_disable_bracketed_paste 'cat conm'
38	38	-> printf "\e[?2004l"
33	33	> echo $_ " "
57	135	> __fish_pwd
78	78	-> pwd
3993	3993	> cat conm
68	140	> __fish_enable_bracketed_paste
72	72	-> printf "\e[?2004h"
82	804	> fish_mode_prompt
342	722	-> fish_default_mode_prompt
34	380	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
276	276	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
70	70	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
1198	32656	> fish_prompt
112	112	-> set -l last_status $status
15	45	-> if not set -q __fish_git_prompt_show_informative_status...
30	30	--> not set -q __fish_git_prompt_show_informative_status
12	30	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	27	-> if not set -q __fish_git_prompt_color_branch...
17	17	--> not set -q __fish_git_prompt_color_branch
10	27	-> if not set -q __fish_git_prompt_showupstream...
17	17	--> not set -q __fish_git_prompt_showupstream
11	32	-> if not set -q __fish_git_prompt_char_upstream_ahead...
21	21	--> not set -q __fish_git_prompt_char_upstream_ahead
9	25	-> if not set -q __fish_git_prompt_char_upstream_behind...
16	16	--> not set -q __fish_git_prompt_char_upstream_behind
11	26	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
12	28	-> if not set -q __fish_git_prompt_char_stagedstate...
16	16	--> not set -q __fish_git_prompt_char_stagedstate
10	25	-> if not set -q __fish_git_prompt_char_dirtystate...
15	15	--> not set -q __fish_git_prompt_char_dirtystate
11	27	-> if not set -q __fish_git_prompt_char_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_char_untrackedfiles
28	69	-> if not set -q __fish_git_prompt_char_conflictedstate...
41	41	--> not set -q __fish_git_prompt_char_conflictedstate
33	47	-> if not set -q __fish_git_prompt_char_cleanstate...
14	14	--> not set -q __fish_git_prompt_char_cleanstate
10	33	-> if not set -q __fish_git_prompt_color_dirtystate...
23	23	--> not set -q __fish_git_prompt_color_dirtystate
7	17	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
7	16	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
11	27	-> if not set -q __fish_git_prompt_color_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_color_untrackedfiles
9	26	-> if not set -q __fish_git_prompt_color_cleanstate...
17	17	--> not set -q __fish_git_prompt_color_cleanstate
26	41	-> if not set -q __fish_prompt_normal...
15	15	--> not set -q __fish_prompt_normal
17	17	-> set -l color_cwd
15	15	-> set -l prefix
15	15	-> set -l suffix
21	61	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
31	31	-> set_color $color_cwd
64	562	-> echo -n (prompt_pwd)
155	498	--> prompt_pwd
26	26	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	19	---> if set -q _flag_help...
11	11	----> set -q _flag_help
15	15	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
53	53	---> set realhome ~
65	116	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
51	51	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	66	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
19	19	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
37	37	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
51	29925	-> printf '%s ' (__fish_vcs_prompt)
41	29874	--> __fish_vcs_prompt
543	4074	---> __fish_git_prompt
9	89	----> if not command -sq git...
80	80	-----> not command -sq git
146	3400	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3254	3254	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
31	31	----> test -n "$repo_info"
11	11	----> or return
355	435	---> __fish_hg_prompt
11	80	----> if not command -sq hg...
60	60	-----> not command -sq hg
9	9	-----> return 1
165	25324	---> __fish_svn_prompt
8	73	----> if not command -sq svn...
65	65	-----> not command -sq svn
91	25045	----> set -l checkout_info (command svn info ^/dev/null)
24954	24954	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
22	22	-----> [ $status -ne 0 ]
7	7	-----> return
10	106	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
82	82	--> set_color $fish_color_error
16	16	-> echo -n "$suffix "
13	13	-> set_color normal
14	14	> echo $_ " "
28	65	> __fish_pwd
37	37	-> pwd
436	1017	> up-or-search
27	217	-> if commandline --search-mode...
190	190	--> commandline --search-mode
20	71	-> if commandline --paging-mode...
51	51	--> commandline --paging-mode
158	215	-> set lineno (commandline -L)
57	57	--> commandline -L
31	78	-> switch $lineno...
47	47	--> commandline -f history-search-backward
78	120	> __fish_disable_bracketed_paste 'cat config.fish '
42	42	-> printf "\e[?2004l"
39	39	> echo $_ " "
76	169	> __fish_pwd
93	93	-> pwd
10301	10301	> cat config.fish
52	105	> __fish_enable_bracketed_paste
53	53	-> printf "\e[?2004h"
78	470	> fish_mode_prompt
206	392	-> fish_default_mode_prompt
16	186	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
141	141	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
29	29	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
626	33291	> fish_prompt
39	39	-> set -l last_status $status
10	26	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	25	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
7	20	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
7	20	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
7	19	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	20	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
8	20	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
7	19	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	19	-> if not set -q __fish_git_prompt_char_conflictedstate...
11	11	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
8	20	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
7	20	-> if not set -q __fish_git_prompt_color_stagedstate...
13	13	--> not set -q __fish_git_prompt_color_stagedstate
7	19	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
9	28	-> if not set -q __fish_git_prompt_color_untrackedfiles...
19	19	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
9	21	-> if not set -q __fish_prompt_normal...
12	12	--> not set -q __fish_prompt_normal
20	20	-> set -l color_cwd
19	19	-> set -l prefix
18	18	-> set -l suffix
25	73	-> switch "$USER"...
27	27	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
36	36	-> set_color $color_cwd
69	648	-> echo -n (prompt_pwd)
164	579	--> prompt_pwd
31	31	---> set -l options 'h/help'
38	38	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
10	24	---> if set -q _flag_help...
14	14	----> set -q _flag_help
13	13	---> set -q fish_prompt_pwd_dir_length
21	21	---> or set -l fish_prompt_pwd_dir_length 1
53	53	---> set realhome ~
92	153	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
61	61	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	82	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
24	24	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
44	44	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
21	21	-> set_color normal
64	31334	-> printf '%s ' (__fish_vcs_prompt)
49	31270	--> __fish_vcs_prompt
647	4349	---> __fish_git_prompt
12	103	----> if not command -sq git...
91	91	-----> not command -sq git
106	3563	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3457	3457	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
25	25	----> test -n "$repo_info"
11	11	----> or return
336	407	---> __fish_hg_prompt
11	71	----> if not command -sq hg...
51	51	-----> not command -sq hg
9	9	-----> return 1
176	26465	---> __fish_svn_prompt
10	64	----> if not command -sq svn...
54	54	-----> not command -sq svn
105	26170	----> set -l checkout_info (command svn info ^/dev/null)
26065	26065	-----> command svn info ^/dev/null
17	55	----> if [ $status -ne 0 ]...
30	30	-----> [ $status -ne 0 ]
8	8	-----> return
11	32	-> if not test $last_status -eq 0...
21	21	--> not test $last_status -eq 0
21	21	-> echo -n "$suffix "
26	26	-> set_color normal
22	22	> echo $_ " "
32	70	> __fish_pwd
38	38	-> pwd
77	111	> __fish_disable_bracketed_paste 'cd ..'
34	34	-> printf "\e[?2004l"
32	32	> echo $_ " "
61	139	> __fish_pwd
78	78	-> pwd
380	44533	> cd ..
105	105	-> set -l MAX_DIR_HIST 25
16	207	-> if test (count $argv) -gt 1...
133	191	--> test (count $argv) -gt 1
58	58	---> count $argv
15	51	-> if status --is-command-substitution...
36	36	--> status --is-command-substitution
58	58	-> set -l previous $PWD
14	61	-> if test "$argv" = "-"...
47	47	--> test "$argv" = "-"
312	43365	-> builtin cd $argv
74	40527	--> __z_on_variable_pwd VARIABLE SET PWD
251	40453	---> __z_add
126	2461	----> set -l path (command dirname (status -f))
2313	2335	-----> command dirname (status -f)
22	22	------> status -f
135	187	----> for i in $Z_EXCLUDE...
13	52	-----> if contains -- $PWD $i...
39	39	------> contains -- $PWD $i
132	3064	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2932	2932	-----> mktemp $Z_DATA.XXXXXX
1197	15044	----> if test -f $tmpfile...
44	44	-----> test -f $tmpfile
4030	6420	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
2390	2390	------> date +%s
85	206	-----> if test ! -z "$Z_OWNER"...
121	121	------> test ! -z "$Z_OWNER"
7177	7177	-----> command mv $tmpfile $Z_DATA
664	19446	----> __z_complete
1006	17922	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
16916	16916	------> string replace -r '\|.*' '' < $Z_DATA | string escape
314	314	-----> complete -c $Z_CMD -a "$__z_marks" -f
348	348	-----> complete -c $ZO_CMD -a "$__z_marks" -f
39	39	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
27	27	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
34	34	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
29	29	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
23	23	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
24	24	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
22	22	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
104	2526	--> __update_cwd_osc VARIABLE SET PWD
11	52	---> if status --is-command-substitution...
25	25	----> status --is-command-substitution
16	16	----> or set -q INSIDE_EMACS
204	2370	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
2135	2135	----> hostname
31	31	----> string escape --style=url $PWD
44	44	-> set -l cd_status $status
35	240	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
49	49	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
22	22	--> set -q dirprev
27	27	--> set -q dirprev[$MAX_DIR_HIST]
54	54	--> set -g dirprev $dirprev $previous
27	27	--> set -e dirnext
26	26	--> set -g __fish_cd_direction prev
22	22	-> return $cd_status
27	45	> __fish_enable_bracketed_paste
18	18	-> printf "\e[?2004h"
37	324	> fish_mode_prompt
149	287	-> fish_default_mode_prompt
14	138	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
95	95	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
29	29	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
649	33728	> fish_prompt
31	31	-> set -l last_status $status
10	25	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
8	21	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
9	22	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
8	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
9	21	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	22	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
9	21	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
8	21	-> if not set -q __fish_git_prompt_char_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_char_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
8	21	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
8	21	-> if not set -q __fish_git_prompt_color_stagedstate...
13	13	--> not set -q __fish_git_prompt_color_stagedstate
9	25	-> if not set -q __fish_git_prompt_color_invalidstate...
16	16	--> not set -q __fish_git_prompt_color_invalidstate
8	22	-> if not set -q __fish_git_prompt_color_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
8	21	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
20	20	-> set -l prefix
19	19	-> set -l suffix
25	75	-> switch "$USER"...
29	29	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
36	36	-> set_color $color_cwd
62	624	-> echo -n (prompt_pwd)
168	562	--> prompt_pwd
28	28	---> set -l options 'h/help'
42	42	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
10	24	---> if set -q _flag_help...
14	14	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
22	22	---> or set -l fish_prompt_pwd_dir_length 1
52	52	---> set realhome ~
74	134	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
60	60	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	78	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
21	21	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
43	43	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
21	21	-> set_color normal
54	31785	-> printf '%s ' (__fish_vcs_prompt)
47	31731	--> __fish_vcs_prompt
620	6515	---> __fish_git_prompt
11	89	----> if not command -sq git...
78	78	-----> not command -sq git
298	5753	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
5455	5455	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
45	45	----> test -n "$repo_info"
8	8	----> or return
334	489	---> __fish_hg_prompt
15	155	----> if not command -sq hg...
121	121	-----> not command -sq hg
19	19	-----> return 1
181	24680	---> __fish_svn_prompt
17	137	----> if not command -sq svn...
120	120	-----> not command -sq svn
130	24322	----> set -l checkout_info (command svn info ^/dev/null)
24192	24192	-----> command svn info ^/dev/null
12	40	----> if [ $status -ne 0 ]...
22	22	-----> [ $status -ne 0 ]
6	6	-----> return
8	22	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
20	20	-> set_color normal
13	13	> echo $_ " "
39	82	> __fish_pwd
43	43	-> pwd
94	140	> __fish_disable_bracketed_paste ls
46	46	-> printf "\e[?2004l"
58	58	> echo $_ " "
55	125	> __fish_pwd
70	70	-> pwd
367	5583	> ls
5216	5216	-> command ls -G $argv
193	254	> __fish_enable_bracketed_paste
61	61	-> printf "\e[?2004h"
72	420	> fish_mode_prompt
163	348	-> fish_default_mode_prompt
15	185	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
136	136	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
34	34	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
695	31760	> fish_prompt
53	53	-> set -l last_status $status
8	22	-> if not set -q __fish_git_prompt_show_informative_status...
14	14	--> not set -q __fish_git_prompt_show_informative_status
7	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	20	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
6	19	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
6	16	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
7	17	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
6	15	-> if not set -q __fish_git_prompt_char_upstream_prefix...
9	9	--> not set -q __fish_git_prompt_char_upstream_prefix
6	16	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
7	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_char_conflictedstate...
10	10	--> not set -q __fish_git_prompt_char_conflictedstate
7	16	-> if not set -q __fish_git_prompt_char_cleanstate...
9	9	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	16	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
6	21	-> if not set -q __fish_git_prompt_color_invalidstate...
15	15	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
16	16	-> set -l prefix
14	14	-> set -l suffix
21	65	-> switch "$USER"...
27	27	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
28	28	-> set_color $color_cwd
59	552	-> echo -n (prompt_pwd)
157	493	--> prompt_pwd
26	26	---> set -l options 'h/help'
32	32	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
48	48	---> set realhome ~
63	117	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
54	54	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
11	65	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
18	18	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
61	29914	-> printf '%s ' (__fish_vcs_prompt)
43	29853	--> __fish_vcs_prompt
542	4220	---> __fish_git_prompt
8	87	----> if not command -sq git...
79	79	-----> not command -sq git
104	3554	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3450	3450	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
30	30	----> test -n "$repo_info"
7	7	----> or return
355	429	---> __fish_hg_prompt
10	74	----> if not command -sq hg...
56	56	-----> not command -sq hg
8	8	-----> return 1
147	25161	---> __fish_svn_prompt
9	77	----> if not command -sq svn...
68	68	-----> not command -sq svn
120	24881	----> set -l checkout_info (command svn info ^/dev/null)
24761	24761	-----> command svn info ^/dev/null
17	56	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
8	8	-----> return
10	32	-> if not test $last_status -eq 0...
22	22	--> not test $last_status -eq 0
21	21	-> echo -n "$suffix "
28	28	-> set_color normal
21	21	> echo $_ " "
32	79	> __fish_pwd
47	47	-> pwd
5747	5872	> source /usr/local/Cellar/fish/2.7.1/share/fish/completions/cd.fish
90	90	-> complete -c cd -a "(__fish_complete_cd)"
35	35	-> complete -c cd -s h -l help --description 'Display help and exit'
76	119	> __fish_disable_bracketed_paste 'cd comple'
43	43	-> printf "\e[?2004l"
39	39	> echo $_ " "
56	139	> __fish_pwd
83	83	-> pwd
387	1074	> cd comple
63	63	-> set -l MAX_DIR_HIST 25
13	171	-> if test (count $argv) -gt 1...
89	158	--> test (count $argv) -gt 1
69	69	---> count $argv
12	42	-> if status --is-command-substitution...
30	30	--> status --is-command-substitution
47	47	-> set -l previous $PWD
12	50	-> if test "$argv" = "-"...
38	38	--> test "$argv" = "-"
67	67	-> builtin cd $argv
101	101	-> set -l cd_status $status
14	113	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
99	99	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
33	33	-> return $cd_status
33	56	> __fish_enable_bracketed_paste
23	23	-> printf "\e[?2004h"
37	245	> fish_mode_prompt
134	208	-> fish_default_mode_prompt
13	74	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
33	33	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
28	28	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
622	29208	> fish_prompt
32	32	-> set -l last_status $status
10	25	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
13	32	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
9	29	-> if not set -q __fish_git_prompt_showupstream...
20	20	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	20	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
9	20	-> if not set -q __fish_git_prompt_char_dirtystate...
11	11	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
9	26	-> if not set -q __fish_git_prompt_char_cleanstate...
17	17	--> not set -q __fish_git_prompt_char_cleanstate
7	20	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
8	20	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
7	19	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
8	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
10	22	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
9	25	-> if not set -q __fish_prompt_normal...
16	16	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
24	24	-> set -l prefix
25	25	-> set -l suffix
52	134	-> switch "$USER"...
48	48	--> set color_cwd $fish_color_cwd
34	34	--> set suffix '$'
75	75	-> set_color $color_cwd
84	714	-> echo -n (prompt_pwd)
172	630	--> prompt_pwd
28	28	---> set -l options 'h/help'
39	39	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
9	24	---> if set -q _flag_help...
15	15	----> set -q _flag_help
13	13	---> set -q fish_prompt_pwd_dir_length
22	22	---> or set -l fish_prompt_pwd_dir_length 1
82	82	---> set realhome ~
89	153	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
64	64	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
19	97	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
27	27	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
51	51	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
36	36	-> set_color normal
76	26985	-> printf '%s ' (__fish_vcs_prompt)
60	26909	--> __fish_vcs_prompt
982	5458	---> __fish_git_prompt
30	266	----> if not command -sq git...
236	236	-----> not command -sq git
166	4179	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4013	4013	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
7	7	----> or return
310	383	---> __fish_hg_prompt
12	73	----> if not command -sq hg...
53	53	-----> not command -sq hg
8	8	-----> return 1
163	21008	---> __fish_svn_prompt
9	65	----> if not command -sq svn...
56	56	-----> not command -sq svn
121	20737	----> set -l checkout_info (command svn info ^/dev/null)
20616	20616	-----> command svn info ^/dev/null
13	43	----> if [ $status -ne 0 ]...
24	24	-----> [ $status -ne 0 ]
6	6	-----> return
10	107	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
82	82	--> set_color $fish_color_error
17	17	-> echo -n "$suffix "
13	13	-> set_color normal
14	14	> echo $_ " "
27	65	> __fish_pwd
38	38	-> pwd
232	985	> up-or-search
19	101	-> if commandline --search-mode...
82	82	--> commandline --search-mode
20	71	-> if commandline --paging-mode...
51	51	--> commandline --paging-mode
227	433	-> set lineno (commandline -L)
206	206	--> commandline -L
80	148	-> switch $lineno...
68	68	--> commandline -f history-search-backward
77	171	> __fish_disable_bracketed_paste 'cd completions/'
94	94	-> printf "\e[?2004l"
68	68	> echo $_ " "
109	202	> __fish_pwd
93	93	-> pwd
555	32626	> cd completions/
109	109	-> set -l MAX_DIR_HIST 25
21	296	-> if test (count $argv) -gt 1...
142	275	--> test (count $argv) -gt 1
133	133	---> count $argv
19	112	-> if status --is-command-substitution...
93	93	--> status --is-command-substitution
77	77	-> set -l previous $PWD
22	94	-> if test "$argv" = "-"...
72	72	--> test "$argv" = "-"
263	30947	-> builtin cd $argv
47	27769	--> __z_on_variable_pwd VARIABLE SET PWD
257	27722	---> __z_add
152	3295	----> set -l path (command dirname (status -f))
3105	3143	-----> command dirname (status -f)
38	38	------> status -f
115	189	----> for i in $Z_EXCLUDE...
11	74	-----> if contains -- $PWD $i...
63	63	------> contains -- $PWD $i
116	2472	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2356	2356	-----> mktemp $Z_DATA.XXXXXX
129	8057	----> if test -f $tmpfile...
53	53	-----> test -f $tmpfile
3877	5975	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
2098	2098	------> date +%s
20	133	-----> if test ! -z "$Z_OWNER"...
113	113	------> test ! -z "$Z_OWNER"
1767	1767	-----> command mv $tmpfile $Z_DATA
188	13452	----> __z_complete
526	12589	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
12063	12063	------> string replace -r '\|.*' '' < $Z_DATA | string escape
279	279	-----> complete -c $Z_CMD -a "$__z_marks" -f
262	262	-----> complete -c $ZO_CMD -a "$__z_marks" -f
27	27	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
16	16	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
15	15	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
26	26	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
14	14	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
18	18	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
18	18	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
154	2915	--> __update_cwd_osc VARIABLE SET PWD
10	41	---> if status --is-command-substitution...
20	20	----> status --is-command-substitution
11	11	----> or set -q INSIDE_EMACS
136	2720	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
2554	2554	----> hostname
30	30	----> string escape --style=url $PWD
52	52	-> set -l cd_status $status
54	357	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
71	71	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
31	31	--> set -q dirprev
36	36	--> set -q dirprev[$MAX_DIR_HIST]
93	93	--> set -g dirprev $dirprev $previous
36	36	--> set -e dirnext
36	36	--> set -g __fish_cd_direction prev
27	27	-> return $cd_status
26	45	> __fish_enable_bracketed_paste
19	19	-> printf "\e[?2004h"
32	302	> fish_mode_prompt
164	270	-> fish_default_mode_prompt
11	106	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
75	75	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
20	20	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
449	28929	> fish_prompt
24	24	-> set -l last_status $status
7	18	-> if not set -q __fish_git_prompt_show_informative_status...
11	11	--> not set -q __fish_git_prompt_show_informative_status
7	16	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
7	15	-> if not set -q __fish_git_prompt_showupstream...
8	8	--> not set -q __fish_git_prompt_showupstream
6	18	-> if not set -q __fish_git_prompt_char_upstream_ahead...
12	12	--> not set -q __fish_git_prompt_char_upstream_ahead
7	15	-> if not set -q __fish_git_prompt_char_upstream_behind...
8	8	--> not set -q __fish_git_prompt_char_upstream_behind
6	14	-> if not set -q __fish_git_prompt_char_upstream_prefix...
8	8	--> not set -q __fish_git_prompt_char_upstream_prefix
6	14	-> if not set -q __fish_git_prompt_char_stagedstate...
8	8	--> not set -q __fish_git_prompt_char_stagedstate
5	14	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	14	-> if not set -q __fish_git_prompt_char_untrackedfiles...
8	8	--> not set -q __fish_git_prompt_char_untrackedfiles
6	14	-> if not set -q __fish_git_prompt_char_conflictedstate...
8	8	--> not set -q __fish_git_prompt_char_conflictedstate
5	16	-> if not set -q __fish_git_prompt_char_cleanstate...
11	11	--> not set -q __fish_git_prompt_char_cleanstate
5	14	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
6	14	-> if not set -q __fish_git_prompt_color_stagedstate...
8	8	--> not set -q __fish_git_prompt_color_stagedstate
6	14	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
5	13	-> if not set -q __fish_git_prompt_color_untrackedfiles...
8	8	--> not set -q __fish_git_prompt_color_untrackedfiles
6	14	-> if not set -q __fish_git_prompt_color_cleanstate...
8	8	--> not set -q __fish_git_prompt_color_cleanstate
6	15	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
14	14	-> set -l color_cwd
14	14	-> set -l prefix
18	18	-> set -l suffix
23	62	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
16	16	--> set suffix '$'
109	109	-> set_color $color_cwd
81	900	-> echo -n (prompt_pwd)
252	819	--> prompt_pwd
39	39	---> set -l options 'h/help'
78	78	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
24	40	---> if set -q _flag_help...
16	16	----> set -q _flag_help
16	16	---> set -q fish_prompt_pwd_dir_length
26	26	---> or set -l fish_prompt_pwd_dir_length 1
63	63	---> set realhome ~
124	189	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
65	65	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	116	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
57	57	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
45	45	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
26	26	-> set_color normal
60	26988	-> printf '%s ' (__fish_vcs_prompt)
112	26928	--> __fish_vcs_prompt
687	4384	---> __fish_git_prompt
72	180	----> if not command -sq git...
108	108	-----> not command -sq git
103	3490	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3387	3387	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
6	6	----> or return
323	385	---> __fish_hg_prompt
9	62	----> if not command -sq hg...
46	46	-----> not command -sq hg
7	7	-----> return 1
173	22047	---> __fish_svn_prompt
7	55	----> if not command -sq svn...
48	48	-----> not command -sq svn
87	21778	----> set -l checkout_info (command svn info ^/dev/null)
21691	21691	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
9	24	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
14	14	> echo $_ " "
28	74	> __fish_pwd
46	46	-> pwd
68	106	> __fish_disable_bracketed_paste ls
38	38	-> printf "\e[?2004l"
49	49	> echo $_ " "
50	118	> __fish_pwd
68	68	-> pwd
237	5667	> ls
5430	5430	-> command ls -G $argv
74	138	> __fish_enable_bracketed_paste
64	64	-> printf "\e[?2004h"
57	528	> fish_mode_prompt
232	471	-> fish_default_mode_prompt
20	239	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
173	173	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
46	46	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
797	29251	> fish_prompt
44	44	-> set -l last_status $status
12	28	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_color_branch...
12	12	--> not set -q __fish_git_prompt_color_branch
9	21	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
9	25	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
9	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	21	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
8	20	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
7	19	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
7	20	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
8	20	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
8	20	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
7	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
7	20	-> if not set -q __fish_git_prompt_color_cleanstate...
13	13	--> not set -q __fish_git_prompt_color_cleanstate
7	20	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
20	20	-> set -l prefix
29	29	-> set -l suffix
37	76	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
16	16	--> set suffix '$'
29	29	-> set_color $color_cwd
66	599	-> echo -n (prompt_pwd)
139	533	--> prompt_pwd
26	26	---> set -l options 'h/help'
32	32	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
18	18	---> or set -l fish_prompt_pwd_dir_length 1
48	48	---> set realhome ~
77	149	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
72	72	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
15	87	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
24	24	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
48	48	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
23	23	-> set_color normal
72	27151	-> printf '%s ' (__fish_vcs_prompt)
49	27079	--> __fish_vcs_prompt
558	5645	---> __fish_git_prompt
9	94	----> if not command -sq git...
85	85	-----> not command -sq git
103	4961	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4858	4858	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
25	25	----> test -n "$repo_info"
7	7	----> or return
335	411	---> __fish_hg_prompt
12	76	----> if not command -sq hg...
56	56	-----> not command -sq hg
8	8	-----> return 1
172	20974	---> __fish_svn_prompt
8	67	----> if not command -sq svn...
59	59	-----> not command -sq svn
138	20674	----> set -l checkout_info (command svn info ^/dev/null)
20536	20536	-----> command svn info ^/dev/null
18	61	----> if [ $status -ne 0 ]...
35	35	-----> [ $status -ne 0 ]
8	8	-----> return
11	32	-> if not test $last_status -eq 0...
21	21	--> not test $last_status -eq 0
24	24	-> echo -n "$suffix "
27	27	-> set_color normal
38	38	> echo $_ " "
74	198	> __fish_pwd
124	124	-> pwd
76	110	> __fish_disable_bracketed_paste 'ls -a'
34	34	-> printf "\e[?2004l"
74	74	> echo $_ " "
55	130	> __fish_pwd
75	75	-> pwd
209	5546	> ls -a
5337	5337	-> command ls -G $argv
75	139	> __fish_enable_bracketed_paste
64	64	-> printf "\e[?2004h"
56	529	> fish_mode_prompt
245	473	-> fish_default_mode_prompt
22	228	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
164	164	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
42	42	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
918	27976	> fish_prompt
46	46	-> set -l last_status $status
12	30	-> if not set -q __fish_git_prompt_show_informative_status...
18	18	--> not set -q __fish_git_prompt_show_informative_status
12	27	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	29	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
10	25	-> if not set -q __fish_git_prompt_showupstream...
15	15	--> not set -q __fish_git_prompt_showupstream
10	24	-> if not set -q __fish_git_prompt_char_upstream_ahead...
14	14	--> not set -q __fish_git_prompt_char_upstream_ahead
10	25	-> if not set -q __fish_git_prompt_char_upstream_behind...
15	15	--> not set -q __fish_git_prompt_char_upstream_behind
10	25	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
10	25	-> if not set -q __fish_git_prompt_char_stagedstate...
15	15	--> not set -q __fish_git_prompt_char_stagedstate
10	24	-> if not set -q __fish_git_prompt_char_dirtystate...
14	14	--> not set -q __fish_git_prompt_char_dirtystate
9	27	-> if not set -q __fish_git_prompt_char_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_char_untrackedfiles
10	24	-> if not set -q __fish_git_prompt_char_conflictedstate...
14	14	--> not set -q __fish_git_prompt_char_conflictedstate
10	24	-> if not set -q __fish_git_prompt_char_cleanstate...
14	14	--> not set -q __fish_git_prompt_char_cleanstate
10	24	-> if not set -q __fish_git_prompt_color_dirtystate...
14	14	--> not set -q __fish_git_prompt_color_dirtystate
10	25	-> if not set -q __fish_git_prompt_color_stagedstate...
15	15	--> not set -q __fish_git_prompt_color_stagedstate
10	24	-> if not set -q __fish_git_prompt_color_invalidstate...
14	14	--> not set -q __fish_git_prompt_color_invalidstate
10	27	-> if not set -q __fish_git_prompt_color_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_color_untrackedfiles
10	25	-> if not set -q __fish_git_prompt_color_cleanstate...
15	15	--> not set -q __fish_git_prompt_color_cleanstate
10	24	-> if not set -q __fish_prompt_normal...
14	14	--> not set -q __fish_prompt_normal
23	23	-> set -l color_cwd
23	23	-> set -l prefix
22	22	-> set -l suffix
29	86	-> switch "$USER"...
32	32	--> set color_cwd $fish_color_cwd
25	25	--> set suffix '$'
39	39	-> set_color $color_cwd
76	739	-> echo -n (prompt_pwd)
197	663	--> prompt_pwd
36	36	---> set -l options 'h/help'
44	44	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
13	29	---> if set -q _flag_help...
16	16	----> set -q _flag_help
16	16	---> set -q fish_prompt_pwd_dir_length
25	25	---> or set -l fish_prompt_pwd_dir_length 1
63	63	---> set realhome ~
87	160	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
73	73	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
17	93	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
25	25	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
51	51	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
24	24	-> set_color normal
59	25540	-> printf '%s ' (__fish_vcs_prompt)
50	25481	--> __fish_vcs_prompt
810	4806	---> __fish_git_prompt
14	112	----> if not command -sq git...
98	98	-----> not command -sq git
118	3849	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3731	3731	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
28	28	----> test -n "$repo_info"
7	7	----> or return
349	422	---> __fish_hg_prompt
10	73	----> if not command -sq hg...
54	54	-----> not command -sq hg
9	9	-----> return 1
164	20203	---> __fish_svn_prompt
8	65	----> if not command -sq svn...
57	57	-----> not command -sq svn
97	19931	----> set -l checkout_info (command svn info ^/dev/null)
19834	19834	-----> command svn info ^/dev/null
12	43	----> if [ $status -ne 0 ]...
25	25	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
20	20	-> set_color normal
15	15	> echo $_ " "
32	75	> __fish_pwd
43	43	-> pwd
77	112	> __fish_disable_bracketed_paste 'cat fish_prompt'
35	35	-> printf "\e[?2004l"
32	32	> echo $_ " "
59	139	> __fish_pwd
80	80	-> pwd
4198	4198	> cat fish_prompt
59	105	> __fish_enable_bracketed_paste
46	46	-> printf "\e[?2004h"
67	564	> fish_mode_prompt
235	497	-> fish_default_mode_prompt
19	262	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
200	200	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
43	43	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
951	28330	> fish_prompt
92	92	-> set -l last_status $status
14	37	-> if not set -q __fish_git_prompt_show_informative_status...
23	23	--> not set -q __fish_git_prompt_show_informative_status
13	33	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
20	20	--> not set -q __fish_git_prompt_hide_untrackedfiles
12	31	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
12	31	-> if not set -q __fish_git_prompt_showupstream...
19	19	--> not set -q __fish_git_prompt_showupstream
14	32	-> if not set -q __fish_git_prompt_char_upstream_ahead...
18	18	--> not set -q __fish_git_prompt_char_upstream_ahead
13	30	-> if not set -q __fish_git_prompt_char_upstream_behind...
17	17	--> not set -q __fish_git_prompt_char_upstream_behind
12	31	-> if not set -q __fish_git_prompt_char_upstream_prefix...
19	19	--> not set -q __fish_git_prompt_char_upstream_prefix
13	35	-> if not set -q __fish_git_prompt_char_stagedstate...
22	22	--> not set -q __fish_git_prompt_char_stagedstate
12	31	-> if not set -q __fish_git_prompt_char_dirtystate...
19	19	--> not set -q __fish_git_prompt_char_dirtystate
12	30	-> if not set -q __fish_git_prompt_char_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_char_untrackedfiles
12	29	-> if not set -q __fish_git_prompt_char_conflictedstate...
17	17	--> not set -q __fish_git_prompt_char_conflictedstate
12	30	-> if not set -q __fish_git_prompt_char_cleanstate...
18	18	--> not set -q __fish_git_prompt_char_cleanstate
11	29	-> if not set -q __fish_git_prompt_color_dirtystate...
18	18	--> not set -q __fish_git_prompt_color_dirtystate
12	33	-> if not set -q __fish_git_prompt_color_stagedstate...
21	21	--> not set -q __fish_git_prompt_color_stagedstate
12	30	-> if not set -q __fish_git_prompt_color_invalidstate...
18	18	--> not set -q __fish_git_prompt_color_invalidstate
13	41	-> if not set -q __fish_git_prompt_color_untrackedfiles...
28	28	--> not set -q __fish_git_prompt_color_untrackedfiles
14	31	-> if not set -q __fish_git_prompt_color_cleanstate...
17	17	--> not set -q __fish_git_prompt_color_cleanstate
13	31	-> if not set -q __fish_prompt_normal...
18	18	--> not set -q __fish_prompt_normal
29	29	-> set -l color_cwd
28	28	-> set -l prefix
28	28	-> set -l suffix
38	112	-> switch "$USER"...
42	42	--> set color_cwd $fish_color_cwd
32	32	--> set suffix '$'
54	54	-> set_color $color_cwd
92	974	-> echo -n (prompt_pwd)
233	882	--> prompt_pwd
48	48	---> set -l options 'h/help'
59	59	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
17	41	---> if set -q _flag_help...
24	24	----> set -q _flag_help
23	23	---> set -q fish_prompt_pwd_dir_length
37	37	---> or set -l fish_prompt_pwd_dir_length 1
121	121	---> set realhome ~
115	202	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
87	87	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
16	118	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
49	49	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
53	53	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
28	28	-> set_color normal
66	25308	-> printf '%s ' (__fish_vcs_prompt)
56	25242	--> __fish_vcs_prompt
715	4622	---> __fish_git_prompt
10	105	----> if not command -sq git...
95	95	-----> not command -sq git
111	3767	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3656	3656	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
28	28	----> test -n "$repo_info"
7	7	----> or return
346	422	---> __fish_hg_prompt
11	76	----> if not command -sq hg...
56	56	-----> not command -sq hg
9	9	-----> return 1
162	20142	---> __fish_svn_prompt
8	68	----> if not command -sq svn...
60	60	-----> not command -sq svn
101	19864	----> set -l checkout_info (command svn info ^/dev/null)
19763	19763	-----> command svn info ^/dev/null
15	48	----> if [ $status -ne 0 ]...
26	26	-----> [ $status -ne 0 ]
7	7	-----> return
12	116	-> if not test $last_status -eq 0...
18	18	--> not test $last_status -eq 0
86	86	--> set_color $fish_color_error
19	19	-> echo -n "$suffix "
16	16	-> set_color normal
15	15	> echo $_ " "
28	63	> __fish_pwd
35	35	-> pwd
82	169	> __fish_disable_bracketed_paste 'cat fisher.fish '
87	87	-> printf "\e[?2004l"
71	71	> echo $_ " "
115	210	> __fish_pwd
95	95	-> pwd
9525	9525	> cat fisher.fish
84	136	> __fish_enable_bracketed_paste
52	52	-> printf "\e[?2004h"
56	426	> fish_mode_prompt
210	370	-> fish_default_mode_prompt
15	160	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
115	115	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
30	30	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
647	30484	> fish_prompt
41	41	-> set -l last_status $status
11	27	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
7	20	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
8	23	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
8	20	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
9	20	-> if not set -q __fish_git_prompt_char_dirtystate...
11	11	--> not set -q __fish_git_prompt_char_dirtystate
9	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_char_untrackedfiles
7	19	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
8	20	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
8	23	-> if not set -q __fish_git_prompt_color_stagedstate...
15	15	--> not set -q __fish_git_prompt_color_stagedstate
8	19	-> if not set -q __fish_git_prompt_color_invalidstate...
11	11	--> not set -q __fish_git_prompt_color_invalidstate
8	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
8	19	-> if not set -q __fish_git_prompt_color_cleanstate...
11	11	--> not set -q __fish_git_prompt_color_cleanstate
8	20	-> if not set -q __fish_prompt_normal...
12	12	--> not set -q __fish_prompt_normal
25	25	-> set -l color_cwd
31	31	-> set -l prefix
14	14	-> set -l suffix
21	63	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
20	20	--> set suffix '$'
53	53	-> set_color $color_cwd
56	657	-> echo -n (prompt_pwd)
167	601	--> prompt_pwd
26	26	---> set -l options 'h/help'
52	52	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
9	20	---> if set -q _flag_help...
11	11	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
63	63	---> set realhome ~
65	159	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
94	94	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	87	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
39	39	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
115	28356	-> printf '%s ' (__fish_vcs_prompt)
89	28241	--> __fish_vcs_prompt
567	4034	---> __fish_git_prompt
9	76	----> if not command -sq git...
67	67	-----> not command -sq git
92	3361	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3269	3269	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
23	23	----> test -n "$repo_info"
7	7	----> or return
351	421	---> __fish_hg_prompt
10	70	----> if not command -sq hg...
51	51	-----> not command -sq hg
9	9	-----> return 1
228	23697	---> __fish_svn_prompt
8	62	----> if not command -sq svn...
54	54	-----> not command -sq svn
263	23238	----> set -l checkout_info (command svn info ^/dev/null)
22975	22975	-----> command svn info ^/dev/null
48	169	----> if [ $status -ne 0 ]...
95	95	-----> [ $status -ne 0 ]
26	26	-----> return
24	81	-> if not test $last_status -eq 0...
57	57	--> not test $last_status -eq 0
53	53	-> echo -n "$suffix "
71	71	-> set_color normal
28	28	> echo $_ " "
69	233	> __fish_pwd
164	164	-> pwd
87	131	> __fish_disable_bracketed_paste 'cat pyenv.fish '
44	44	-> printf "\e[?2004l"
31	31	> echo $_ " "
50	125	> __fish_pwd
75	75	-> pwd
4230	4230	> cat pyenv.fish
88	165	> __fish_enable_bracketed_paste
77	77	-> printf "\e[?2004h"
87	805	> fish_mode_prompt
336	718	-> fish_default_mode_prompt
37	382	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
281	281	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
64	64	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
1067	32037	> fish_prompt
61	61	-> set -l last_status $status
13	30	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
11	24	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
9	27	-> if not set -q __fish_git_prompt_showupstream...
18	18	--> not set -q __fish_git_prompt_showupstream
9	22	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
30	47	-> if not set -q __fish_git_prompt_char_upstream_prefix...
17	17	--> not set -q __fish_git_prompt_char_upstream_prefix
12	37	-> if not set -q __fish_git_prompt_char_stagedstate...
25	25	--> not set -q __fish_git_prompt_char_stagedstate
9	24	-> if not set -q __fish_git_prompt_char_dirtystate...
15	15	--> not set -q __fish_git_prompt_char_dirtystate
7	25	-> if not set -q __fish_git_prompt_char_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_char_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
9	21	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
8	21	-> if not set -q __fish_git_prompt_color_stagedstate...
13	13	--> not set -q __fish_git_prompt_color_stagedstate
7	20	-> if not set -q __fish_git_prompt_color_invalidstate...
13	13	--> not set -q __fish_git_prompt_color_invalidstate
8	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
9	27	-> if not set -q __fish_prompt_normal...
18	18	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
20	20	-> set -l prefix
18	18	-> set -l suffix
27	76	-> switch "$USER"...
28	28	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
39	39	-> set_color $color_cwd
75	790	-> echo -n (prompt_pwd)
244	715	--> prompt_pwd
48	48	---> set -l options 'h/help'
41	41	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
11	27	---> if set -q _flag_help...
16	16	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
22	22	---> or set -l fish_prompt_pwd_dir_length 1
90	90	---> set realhome ~
81	148	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
67	67	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
13	81	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
23	23	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
45	45	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
21	21	-> set_color normal
58	29333	-> printf '%s ' (__fish_vcs_prompt)
46	29275	--> __fish_vcs_prompt
747	4355	---> __fish_git_prompt
13	109	----> if not command -sq git...
96	96	-----> not command -sq git
107	3470	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3363	3363	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
22	22	----> test -n "$repo_info"
7	7	----> or return
313	388	---> __fish_hg_prompt
11	75	----> if not command -sq hg...
55	55	-----> not command -sq hg
9	9	-----> return 1
163	24486	---> __fish_svn_prompt
9	65	----> if not command -sq svn...
56	56	-----> not command -sq svn
91	24212	----> set -l checkout_info (command svn info ^/dev/null)
24121	24121	-----> command svn info ^/dev/null
15	46	----> if [ $status -ne 0 ]...
24	24	-----> [ $status -ne 0 ]
7	7	-----> return
11	111	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
85	85	--> set_color $fish_color_error
17	17	-> echo -n "$suffix "
13	13	-> set_color normal
15	15	> echo $_ " "
27	69	> __fish_pwd
42	42	-> pwd
76	161	> __fish_disable_bracketed_paste 'cd pyenv.fish'
85	85	-> printf "\e[?2004l"
72	72	> echo $_ " "
113	205	> __fish_pwd
92	92	-> pwd
492	1601	> cd pyenv.fish
151	151	-> set -l MAX_DIR_HIST 25
18	287	-> if test (count $argv) -gt 1...
157	269	--> test (count $argv) -gt 1
112	112	---> count $argv
19	117	-> if status --is-command-substitution...
98	98	--> status --is-command-substitution
99	99	-> set -l previous $PWD
19	74	-> if test "$argv" = "-"...
55	55	--> test "$argv" = "-"
109	109	-> builtin cd $argv
85	85	-> set -l cd_status $status
28	129	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
101	101	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
58	58	-> return $cd_status
73	132	> __fish_enable_bracketed_paste
59	59	-> printf "\e[?2004h"
84	599	> fish_mode_prompt
376	515	-> fish_default_mode_prompt
25	139	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
72	72	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
42	42	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
955	30472	> fish_prompt
49	49	-> set -l last_status $status
15	37	-> if not set -q __fish_git_prompt_show_informative_status...
22	22	--> not set -q __fish_git_prompt_show_informative_status
13	33	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
20	20	--> not set -q __fish_git_prompt_hide_untrackedfiles
12	31	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
13	43	-> if not set -q __fish_git_prompt_showupstream...
30	30	--> not set -q __fish_git_prompt_showupstream
13	32	-> if not set -q __fish_git_prompt_char_upstream_ahead...
19	19	--> not set -q __fish_git_prompt_char_upstream_ahead
13	31	-> if not set -q __fish_git_prompt_char_upstream_behind...
18	18	--> not set -q __fish_git_prompt_char_upstream_behind
14	32	-> if not set -q __fish_git_prompt_char_upstream_prefix...
18	18	--> not set -q __fish_git_prompt_char_upstream_prefix
14	32	-> if not set -q __fish_git_prompt_char_stagedstate...
18	18	--> not set -q __fish_git_prompt_char_stagedstate
12	30	-> if not set -q __fish_git_prompt_char_dirtystate...
18	18	--> not set -q __fish_git_prompt_char_dirtystate
11	30	-> if not set -q __fish_git_prompt_char_untrackedfiles...
19	19	--> not set -q __fish_git_prompt_char_untrackedfiles
11	35	-> if not set -q __fish_git_prompt_char_conflictedstate...
24	24	--> not set -q __fish_git_prompt_char_conflictedstate
12	30	-> if not set -q __fish_git_prompt_char_cleanstate...
18	18	--> not set -q __fish_git_prompt_char_cleanstate
12	30	-> if not set -q __fish_git_prompt_color_dirtystate...
18	18	--> not set -q __fish_git_prompt_color_dirtystate
12	30	-> if not set -q __fish_git_prompt_color_stagedstate...
18	18	--> not set -q __fish_git_prompt_color_stagedstate
12	30	-> if not set -q __fish_git_prompt_color_invalidstate...
18	18	--> not set -q __fish_git_prompt_color_invalidstate
12	30	-> if not set -q __fish_git_prompt_color_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_color_untrackedfiles
12	30	-> if not set -q __fish_git_prompt_color_cleanstate...
18	18	--> not set -q __fish_git_prompt_color_cleanstate
12	30	-> if not set -q __fish_prompt_normal...
18	18	--> not set -q __fish_prompt_normal
30	30	-> set -l color_cwd
34	34	-> set -l prefix
27	27	-> set -l suffix
38	110	-> switch "$USER"...
41	41	--> set color_cwd $fish_color_cwd
31	31	--> set suffix '$'
100	100	-> set_color $color_cwd
88	1171	-> echo -n (prompt_pwd)
316	1083	--> prompt_pwd
44	44	---> set -l options 'h/help'
102	102	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
15	36	---> if set -q _flag_help...
21	21	----> set -q _flag_help
20	20	---> set -q fish_prompt_pwd_dir_length
31	31	---> or set -l fish_prompt_pwd_dir_length 1
107	107	---> set realhome ~
113	275	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
162	162	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
20	152	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
67	67	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
65	65	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
30	30	-> set_color normal
72	27221	-> printf '%s ' (__fish_vcs_prompt)
127	27149	--> __fish_vcs_prompt
1048	5862	---> __fish_git_prompt
16	120	----> if not command -sq git...
104	104	-----> not command -sq git
133	4652	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4519	4519	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
32	32	----> test -n "$repo_info"
10	10	----> or return
496	598	---> __fish_hg_prompt
16	102	----> if not command -sq hg...
73	73	-----> not command -sq hg
13	13	-----> return 1
305	20562	---> __fish_svn_prompt
13	95	----> if not command -sq svn...
82	82	-----> not command -sq svn
112	20113	----> set -l checkout_info (command svn info ^/dev/null)
20001	20001	-----> command svn info ^/dev/null
15	49	----> if [ $status -ne 0 ]...
26	26	-----> [ $status -ne 0 ]
8	8	-----> return
12	129	-> if not test $last_status -eq 0...
19	19	--> not test $last_status -eq 0
98	98	--> set_color $fish_color_error
21	21	-> echo -n "$suffix "
19	19	-> set_color normal
19	19	> echo $_ " "
30	76	> __fish_pwd
46	46	-> pwd
75	112	> __fish_disable_bracketed_paste 'cd ..'
37	37	-> printf "\e[?2004l"
33	33	> echo $_ " "
51	130	> __fish_pwd
79	79	-> pwd
285	28948	> cd ..
52	52	-> set -l MAX_DIR_HIST 25
12	136	-> if test (count $argv) -gt 1...
82	124	--> test (count $argv) -gt 1
42	42	---> count $argv
11	42	-> if status --is-command-substitution...
31	31	--> status --is-command-substitution
46	46	-> set -l previous $PWD
12	49	-> if test "$argv" = "-"...
37	37	--> test "$argv" = "-"
163	27990	-> builtin cd $argv
40	25954	--> __z_on_variable_pwd VARIABLE SET PWD
299	25914	---> __z_add
126	2391	----> set -l path (command dirname (status -f))
2244	2265	-----> command dirname (status -f)
21	21	------> status -f
101	176	----> for i in $Z_EXCLUDE...
11	75	-----> if contains -- $PWD $i...
64	64	------> contains -- $PWD $i
118	2238	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2120	2120	-----> mktemp $Z_DATA.XXXXXX
107	9525	----> if test -f $tmpfile...
41	41	-----> test -f $tmpfile
4655	7312	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
2657	2657	------> date +%s
20	143	-----> if test ! -z "$Z_OWNER"...
123	123	------> test ! -z "$Z_OWNER"
1922	1922	-----> command mv $tmpfile $Z_DATA
231	11285	----> __z_complete
566	10477	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
9911	9911	------> string replace -r '\|.*' '' < $Z_DATA | string escape
268	268	-----> complete -c $Z_CMD -a "$__z_marks" -f
199	199	-----> complete -c $ZO_CMD -a "$__z_marks" -f
22	22	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
15	15	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
14	14	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
17	17	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
13	13	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
15	15	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
14	14	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
57	1873	--> __update_cwd_osc VARIABLE SET PWD
9	32	---> if status --is-command-substitution...
14	14	----> status --is-command-substitution
9	9	----> or set -q INSIDE_EMACS
125	1784	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
1627	1627	----> hostname
32	32	----> string escape --style=url $PWD
41	41	-> set -l cd_status $status
34	286	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
56	56	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
22	22	--> set -q dirprev
52	52	--> set -q dirprev[$MAX_DIR_HIST]
66	66	--> set -g dirprev $dirprev $previous
29	29	--> set -e dirnext
27	27	--> set -g __fish_cd_direction prev
21	21	-> return $cd_status
27	44	> __fish_enable_bracketed_paste
17	17	-> printf "\e[?2004h"
27	255	> fish_mode_prompt
105	228	-> fish_default_mode_prompt
12	123	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
89	89	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
22	22	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
455	28081	> fish_prompt
25	25	-> set -l last_status $status
6	17	-> if not set -q __fish_git_prompt_show_informative_status...
11	11	--> not set -q __fish_git_prompt_show_informative_status
6	15	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
6	14	-> if not set -q __fish_git_prompt_showupstream...
8	8	--> not set -q __fish_git_prompt_showupstream
6	18	-> if not set -q __fish_git_prompt_char_upstream_ahead...
12	12	--> not set -q __fish_git_prompt_char_upstream_ahead
6	14	-> if not set -q __fish_git_prompt_char_upstream_behind...
8	8	--> not set -q __fish_git_prompt_char_upstream_behind
6	14	-> if not set -q __fish_git_prompt_char_upstream_prefix...
8	8	--> not set -q __fish_git_prompt_char_upstream_prefix
6	15	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
5	14	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	15	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
6	18	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
6	15	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
5	14	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
5	14	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
9	18	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
6	14	-> if not set -q __fish_git_prompt_color_cleanstate...
8	8	--> not set -q __fish_git_prompt_color_cleanstate
6	15	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
14	14	-> set -l color_cwd
14	14	-> set -l prefix
13	13	-> set -l suffix
17	56	-> switch "$USER"...
24	24	--> set color_cwd $fish_color_cwd
15	15	--> set suffix '$'
29	29	-> set_color $color_cwd
50	480	-> echo -n (prompt_pwd)
123	430	--> prompt_pwd
21	21	---> set -l options 'h/help'
30	30	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
7	17	---> if set -q _flag_help...
10	10	----> set -q _flag_help
9	9	---> set -q fish_prompt_pwd_dir_length
15	15	---> or set -l fish_prompt_pwd_dir_length 1
58	58	---> set realhome ~
55	98	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
43	43	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	59	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
16	16	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
31	31	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
16	16	-> set_color normal
76	26604	-> printf '%s ' (__fish_vcs_prompt)
42	26528	--> __fish_vcs_prompt
451	3764	---> __fish_git_prompt
7	71	----> if not command -sq git...
64	64	-----> not command -sq git
85	3215	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3130	3130	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
6	6	----> or return
266	329	---> __fish_hg_prompt
9	63	----> if not command -sq hg...
47	47	-----> not command -sq hg
7	7	-----> return 1
148	22393	---> __fish_svn_prompt
7	56	----> if not command -sq svn...
49	49	-----> not command -sq svn
150	22119	----> set -l checkout_info (command svn info ^/dev/null)
21969	21969	-----> command svn info ^/dev/null
21	70	----> if [ $status -ne 0 ]...
41	41	-----> [ $status -ne 0 ]
8	8	-----> return
12	34	-> if not test $last_status -eq 0...
22	22	--> not test $last_status -eq 0
26	26	-> echo -n "$suffix "
41	41	-> set_color normal
23	23	> echo $_ " "
57	162	> __fish_pwd
105	105	-> pwd
79	186	> __fish_disable_bracketed_paste ls
107	107	-> printf "\e[?2004l"
44	44	> echo $_ " "
66	161	> __fish_pwd
95	95	-> pwd
344	7557	> ls
7213	7213	-> command ls -G $argv
73	123	> __fish_enable_bracketed_paste
50	50	-> printf "\e[?2004h"
50	440	> fish_mode_prompt
201	390	-> fish_default_mode_prompt
15	189	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
134	134	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
40	40	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
830	29416	> fish_prompt
51	51	-> set -l last_status $status
14	36	-> if not set -q __fish_git_prompt_show_informative_status...
22	22	--> not set -q __fish_git_prompt_show_informative_status
12	32	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
20	20	--> not set -q __fish_git_prompt_hide_untrackedfiles
11	30	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
11	29	-> if not set -q __fish_git_prompt_showupstream...
18	18	--> not set -q __fish_git_prompt_showupstream
12	34	-> if not set -q __fish_git_prompt_char_upstream_ahead...
22	22	--> not set -q __fish_git_prompt_char_upstream_ahead
12	29	-> if not set -q __fish_git_prompt_char_upstream_behind...
17	17	--> not set -q __fish_git_prompt_char_upstream_behind
11	29	-> if not set -q __fish_git_prompt_char_upstream_prefix...
18	18	--> not set -q __fish_git_prompt_char_upstream_prefix
11	29	-> if not set -q __fish_git_prompt_char_stagedstate...
18	18	--> not set -q __fish_git_prompt_char_stagedstate
11	29	-> if not set -q __fish_git_prompt_char_dirtystate...
18	18	--> not set -q __fish_git_prompt_char_dirtystate
11	28	-> if not set -q __fish_git_prompt_char_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_char_untrackedfiles
11	28	-> if not set -q __fish_git_prompt_char_conflictedstate...
17	17	--> not set -q __fish_git_prompt_char_conflictedstate
10	26	-> if not set -q __fish_git_prompt_char_cleanstate...
16	16	--> not set -q __fish_git_prompt_char_cleanstate
10	26	-> if not set -q __fish_git_prompt_color_dirtystate...
16	16	--> not set -q __fish_git_prompt_color_dirtystate
11	28	-> if not set -q __fish_git_prompt_color_stagedstate...
17	17	--> not set -q __fish_git_prompt_color_stagedstate
12	28	-> if not set -q __fish_git_prompt_color_invalidstate...
16	16	--> not set -q __fish_git_prompt_color_invalidstate
11	28	-> if not set -q __fish_git_prompt_color_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_color_untrackedfiles
10	33	-> if not set -q __fish_git_prompt_color_cleanstate...
23	23	--> not set -q __fish_git_prompt_color_cleanstate
12	28	-> if not set -q __fish_prompt_normal...
16	16	--> not set -q __fish_prompt_normal
27	27	-> set -l color_cwd
27	27	-> set -l prefix
25	25	-> set -l suffix
33	98	-> switch "$USER"...
36	36	--> set color_cwd $fish_color_cwd
29	29	--> set suffix '$'
54	54	-> set_color $color_cwd
90	992	-> echo -n (prompt_pwd)
255	902	--> prompt_pwd
129	129	---> set -l options 'h/help'
75	75	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
13	35	---> if set -q _flag_help...
22	22	----> set -q _flag_help
20	20	---> set -q fish_prompt_pwd_dir_length
31	31	---> or set -l fish_prompt_pwd_dir_length 1
68	68	---> set realhome ~
104	182	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
78	78	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
18	107	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
29	29	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
60	60	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
29	29	-> set_color normal
74	26668	-> printf '%s ' (__fish_vcs_prompt)
69	26594	--> __fish_vcs_prompt
915	5424	---> __fish_git_prompt
15	124	----> if not command -sq git...
109	109	-----> not command -sq git
124	4338	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4214	4214	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
37	37	----> test -n "$repo_info"
10	10	----> or return
417	490	---> __fish_hg_prompt
10	73	----> if not command -sq hg...
55	55	-----> not command -sq hg
8	8	-----> return 1
147	20611	---> __fish_svn_prompt
8	61	----> if not command -sq svn...
53	53	-----> not command -sq svn
107	20347	----> set -l checkout_info (command svn info ^/dev/null)
20240	20240	-----> command svn info ^/dev/null
17	56	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
8	8	-----> return
12	35	-> if not test $last_status -eq 0...
23	23	--> not test $last_status -eq 0
23	23	-> echo -n "$suffix "
27	27	-> set_color normal
34	34	> echo $_ " "
47	106	> __fish_pwd
59	59	-> pwd
75	171	> __fish_disable_bracketed_paste 'cd conf.d/'
96	96	-> printf "\e[?2004l"
72	72	> echo $_ " "
144	254	> __fish_pwd
110	110	-> pwd
491	32860	> cd conf.d/
107	107	-> set -l MAX_DIR_HIST 25
19	263	-> if test (count $argv) -gt 1...
145	244	--> test (count $argv) -gt 1
99	99	---> count $argv
23	148	-> if status --is-command-substitution...
125	125	--> status --is-command-substitution
75	75	-> set -l previous $PWD
20	111	-> if test "$argv" = "-"...
91	91	--> test "$argv" = "-"
225	31251	-> builtin cd $argv
50	29103	--> __z_on_variable_pwd VARIABLE SET PWD
239	29053	---> __z_add
128	2292	----> set -l path (command dirname (status -f))
2130	2164	-----> command dirname (status -f)
34	34	------> status -f
99	143	----> for i in $Z_EXCLUDE...
11	44	-----> if contains -- $PWD $i...
33	33	------> contains -- $PWD $i
126	2266	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2140	2140	-----> mktemp $Z_DATA.XXXXXX
45	9233	----> if test -f $tmpfile...
41	41	-----> test -f $tmpfile
4492	7266	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
2774	2774	------> date +%s
86	199	-----> if test ! -z "$Z_OWNER"...
113	113	------> test ! -z "$Z_OWNER"
1682	1682	-----> command mv $tmpfile $Z_DATA
144	14880	----> __z_complete
989	14060	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
13071	13071	------> string replace -r '\|.*' '' < $Z_DATA | string escape
287	287	-----> complete -c $Z_CMD -a "$__z_marks" -f
267	267	-----> complete -c $ZO_CMD -a "$__z_marks" -f
28	28	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
17	17	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
15	15	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
19	19	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
14	14	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
15	15	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
14	14	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
60	1923	--> __update_cwd_osc VARIABLE SET PWD
8	33	---> if status --is-command-substitution...
15	15	----> status --is-command-substitution
10	10	----> or set -q INSIDE_EMACS
131	1830	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
1671	1671	----> hostname
28	28	----> string escape --style=url $PWD
42	42	-> set -l cd_status $status
39	350	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
60	60	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
23	23	--> set -q dirprev
30	30	--> set -q dirprev[$MAX_DIR_HIST]
139	139	--> set -g dirprev $dirprev $previous
30	30	--> set -e dirnext
29	29	--> set -g __fish_cd_direction prev
22	22	-> return $cd_status
24	43	> __fish_enable_bracketed_paste
19	19	-> printf "\e[?2004h"
30	319	> fish_mode_prompt
150	289	-> fish_default_mode_prompt
13	139	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
96	96	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
30	30	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
454	27803	> fish_prompt
26	26	-> set -l last_status $status
7	19	-> if not set -q __fish_git_prompt_show_informative_status...
12	12	--> not set -q __fish_git_prompt_show_informative_status
6	15	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
6	15	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
5	14	-> if not set -q __fish_git_prompt_char_upstream_ahead...
9	9	--> not set -q __fish_git_prompt_char_upstream_ahead
5	19	-> if not set -q __fish_git_prompt_char_upstream_behind...
14	14	--> not set -q __fish_git_prompt_char_upstream_behind
6	15	-> if not set -q __fish_git_prompt_char_upstream_prefix...
9	9	--> not set -q __fish_git_prompt_char_upstream_prefix
5	14	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
6	14	-> if not set -q __fish_git_prompt_char_dirtystate...
8	8	--> not set -q __fish_git_prompt_char_dirtystate
6	14	-> if not set -q __fish_git_prompt_char_untrackedfiles...
8	8	--> not set -q __fish_git_prompt_char_untrackedfiles
7	15	-> if not set -q __fish_git_prompt_char_conflictedstate...
8	8	--> not set -q __fish_git_prompt_char_conflictedstate
6	14	-> if not set -q __fish_git_prompt_char_cleanstate...
8	8	--> not set -q __fish_git_prompt_char_cleanstate
6	19	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
5	14	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
5	14	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
6	15	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
5	14	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
5	14	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
15	15	-> set -l color_cwd
13	13	-> set -l prefix
13	13	-> set -l suffix
20	57	-> switch "$USER"...
19	19	--> set color_cwd $fish_color_cwd
18	18	--> set suffix '$'
60	60	-> set_color $color_cwd
55	593	-> echo -n (prompt_pwd)
182	538	--> prompt_pwd
23	23	---> set -l options 'h/help'
54	54	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	18	---> if set -q _flag_help...
10	10	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
15	15	---> or set -l fish_prompt_pwd_dir_length 1
51	51	---> set realhome ~
59	106	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
47	47	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	79	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
36	36	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
33	33	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
16	16	-> set_color normal
48	26226	-> printf '%s ' (__fish_vcs_prompt)
73	26178	--> __fish_vcs_prompt
680	6129	---> __fish_git_prompt
21	214	----> if not command -sq git...
193	193	-----> not command -sq git
139	5208	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
5069	5069	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
6	6	----> or return
358	425	---> __fish_hg_prompt
10	67	----> if not command -sq hg...
49	49	-----> not command -sq hg
8	8	-----> return 1
179	19551	---> __fish_svn_prompt
7	59	----> if not command -sq svn...
52	52	-----> not command -sq svn
97	19272	----> set -l checkout_info (command svn info ^/dev/null)
19175	19175	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
14	14	-> echo -n "$suffix "
20	20	-> set_color normal
13	13	> echo $_ " "
29	72	> __fish_pwd
43	43	-> pwd
70	107	> __fish_disable_bracketed_paste ls
37	37	-> printf "\e[?2004l"
50	50	> echo $_ " "
51	118	> __fish_pwd
67	67	-> pwd
222	5294	> ls
5072	5072	-> command ls -G $argv
61	116	> __fish_enable_bracketed_paste
55	55	-> printf "\e[?2004h"
45	417	> fish_mode_prompt
179	372	-> fish_default_mode_prompt
14	193	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
148	148	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
31	31	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
982	31072	> fish_prompt
67	67	-> set -l last_status $status
34	60	-> if not set -q __fish_git_prompt_show_informative_status...
26	26	--> not set -q __fish_git_prompt_show_informative_status
13	42	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
29	29	--> not set -q __fish_git_prompt_hide_untrackedfiles
11	26	-> if not set -q __fish_git_prompt_color_branch...
15	15	--> not set -q __fish_git_prompt_color_branch
9	22	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
24	38	-> if not set -q __fish_git_prompt_char_upstream_ahead...
14	14	--> not set -q __fish_git_prompt_char_upstream_ahead
6	17	-> if not set -q __fish_git_prompt_char_upstream_behind...
11	11	--> not set -q __fish_git_prompt_char_upstream_behind
7	21	-> if not set -q __fish_git_prompt_char_upstream_prefix...
14	14	--> not set -q __fish_git_prompt_char_upstream_prefix
8	18	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_char_conflictedstate...
10	10	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
7	16	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
6	18	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
7	17	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
7	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
8	17	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
7	17	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
18	18	-> set -l color_cwd
16	16	-> set -l prefix
16	16	-> set -l suffix
23	71	-> switch "$USER"...
26	26	--> set color_cwd $fish_color_cwd
22	22	--> set suffix '$'
30	30	-> set_color $color_cwd
65	573	-> echo -n (prompt_pwd)
162	508	--> prompt_pwd
26	26	---> set -l options 'h/help'
32	32	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
58	58	---> set realhome ~
65	116	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
51	51	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	66	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
18	18	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
63	28781	-> printf '%s ' (__fish_vcs_prompt)
46	28718	--> __fish_vcs_prompt
618	4293	---> __fish_git_prompt
14	129	----> if not command -sq git...
115	115	-----> not command -sq git
114	3515	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3401	3401	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
7	7	----> or return
345	424	---> __fish_hg_prompt
11	79	----> if not command -sq hg...
59	59	-----> not command -sq hg
9	9	-----> return 1
171	23955	---> __fish_svn_prompt
9	65	----> if not command -sq svn...
56	56	-----> not command -sq svn
111	23658	----> set -l checkout_info (command svn info ^/dev/null)
23547	23547	-----> command svn info ^/dev/null
19	61	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
9	9	-----> return
13	37	-> if not test $last_status -eq 0...
24	24	--> not test $last_status -eq 0
24	24	-> echo -n "$suffix "
30	30	-> set_color normal
19	19	> echo $_ " "
31	78	> __fish_pwd
47	47	-> pwd
78	116	> __fish_disable_bracketed_paste 'ls -a'
38	38	-> printf "\e[?2004l"
39	39	> echo $_ " "
67	178	> __fish_pwd
111	111	-> pwd
286	5600	> ls -a
5314	5314	-> command ls -G $argv
109	211	> __fish_enable_bracketed_paste
102	102	-> printf "\e[?2004h"
95	525	> fish_mode_prompt
217	430	-> fish_default_mode_prompt
18	213	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
160	160	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
35	35	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
774	25908	> fish_prompt
46	46	-> set -l last_status $status
10	27	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
8	19	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
5	16	-> if not set -q __fish_git_prompt_color_branch...
11	11	--> not set -q __fish_git_prompt_color_branch
7	17	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
6	16	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
6	18	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
6	16	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
7	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
5	15	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	18	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
6	15	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
16	16	-> set -l prefix
14	14	-> set -l suffix
22	67	-> switch "$USER"...
26	26	--> set color_cwd $fish_color_cwd
19	19	--> set suffix '$'
30	30	-> set_color $color_cwd
63	703	-> echo -n (prompt_pwd)
198	640	--> prompt_pwd
70	70	---> set -l options 'h/help'
49	49	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	21	---> if set -q _flag_help...
13	13	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
18	18	---> or set -l fish_prompt_pwd_dir_length 1
79	79	---> set realhome ~
74	128	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
54	54	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	66	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
19	19	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
37	37	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
19	19	-> set_color normal
57	23855	-> printf '%s ' (__fish_vcs_prompt)
48	23798	--> __fish_vcs_prompt
582	4621	---> __fish_git_prompt
15	137	----> if not command -sq git...
122	122	-----> not command -sq git
132	3872	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3740	3740	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
6	6	----> or return
317	387	---> __fish_hg_prompt
10	70	----> if not command -sq hg...
52	52	-----> not command -sq hg
8	8	-----> return 1
147	18742	---> __fish_svn_prompt
7	59	----> if not command -sq svn...
52	52	-----> not command -sq svn
105	18490	----> set -l checkout_info (command svn info ^/dev/null)
18385	18385	-----> command svn info ^/dev/null
14	46	----> if [ $status -ne 0 ]...
26	26	-----> [ $status -ne 0 ]
6	6	-----> return
10	24	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
16	16	-> echo -n "$suffix "
23	23	-> set_color normal
15	15	> echo $_ " "
28	82	> __fish_pwd
54	54	-> pwd
78	115	> __fish_disable_bracketed_paste 'cd ..'
37	37	-> printf "\e[?2004l"
34	34	> echo $_ " "
58	150	> __fish_pwd
92	92	-> pwd
543	33748	> cd ..
82	82	-> set -l MAX_DIR_HIST 25
14	202	-> if test (count $argv) -gt 1...
125	188	--> test (count $argv) -gt 1
63	63	---> count $argv
13	50	-> if status --is-command-substitution...
37	37	--> status --is-command-substitution
51	51	-> set -l previous $PWD
12	51	-> if test "$argv" = "-"...
39	39	--> test "$argv" = "-"
190	32394	-> builtin cd $argv
73	30371	--> __z_on_variable_pwd VARIABLE SET PWD
244	30298	---> __z_add
117	2115	----> set -l path (command dirname (status -f))
1976	1998	-----> command dirname (status -f)
22	22	------> status -f
114	159	----> for i in $Z_EXCLUDE...
11	45	-----> if contains -- $PWD $i...
34	34	------> contains -- $PWD $i
112	2803	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
2691	2691	-----> mktemp $Z_DATA.XXXXXX
243	11063	----> if test -f $tmpfile...
35	35	-----> test -f $tmpfile
4856	8291	-----> command awk -v path="$PWD" -v now=(date +%s) -F "|" -f $path/zadd.awk $Z_DATA 2>/dev/null >$tmpfile
3435	3435	------> date +%s
16	120	-----> if test ! -z "$Z_OWNER"...
104	104	------> test ! -z "$Z_OWNER"
2374	2374	-----> command mv $tmpfile $Z_DATA
158	13914	----> __z_complete
651	13216	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
12565	12565	------> string replace -r '\|.*' '' < $Z_DATA | string escape
229	229	-----> complete -c $Z_CMD -a "$__z_marks" -f
201	201	-----> complete -c $ZO_CMD -a "$__z_marks" -f
22	22	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
15	15	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
14	14	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
17	17	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
14	14	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
14	14	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
14	14	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
55	1833	--> __update_cwd_osc VARIABLE SET PWD
7	31	---> if status --is-command-substitution...
15	15	----> status --is-command-substitution
9	9	----> or set -q INSIDE_EMACS
153	1747	---> printf \e\]7\;file://\%s\%s\a (hostname) (string escape --style=url $PWD)
1561	1561	----> hostname
33	33	----> string escape --style=url $PWD
39	39	-> set -l cd_status $status
37	315	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
70	70	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
23	23	--> set -q dirprev
50	50	--> set -q dirprev[$MAX_DIR_HIST]
79	79	--> set -g dirprev $dirprev $previous
28	28	--> set -e dirnext
28	28	--> set -g __fish_cd_direction prev
21	21	-> return $cd_status
27	45	> __fish_enable_bracketed_paste
18	18	-> printf "\e[?2004h"
31	254	> fish_mode_prompt
106	223	-> fish_default_mode_prompt
11	117	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
82	82	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
24	24	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
595	37448	> fish_prompt
32	32	-> set -l last_status $status
8	21	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
6	16	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
6	15	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
15	25	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
13	36	-> if not set -q __fish_git_prompt_char_upstream_behind...
23	23	--> not set -q __fish_git_prompt_char_upstream_behind
8	34	-> if not set -q __fish_git_prompt_char_upstream_prefix...
26	26	--> not set -q __fish_git_prompt_char_upstream_prefix
6	15	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
5	14	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
5	14	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
5	14	-> if not set -q __fish_git_prompt_char_cleanstate...
9	9	--> not set -q __fish_git_prompt_char_cleanstate
6	14	-> if not set -q __fish_git_prompt_color_dirtystate...
8	8	--> not set -q __fish_git_prompt_color_dirtystate
5	14	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
5	13	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
5	14	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
5	13	-> if not set -q __fish_git_prompt_color_cleanstate...
8	8	--> not set -q __fish_git_prompt_color_cleanstate
6	14	-> if not set -q __fish_prompt_normal...
8	8	--> not set -q __fish_prompt_normal
15	15	-> set -l color_cwd
13	13	-> set -l prefix
12	12	-> set -l suffix
20	54	-> switch "$USER"...
19	19	--> set color_cwd $fish_color_cwd
15	15	--> set suffix '$'
29	29	-> set_color $color_cwd
52	483	-> echo -n (prompt_pwd)
119	431	--> prompt_pwd
38	38	---> set -l options 'h/help'
33	33	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
7	17	---> if set -q _flag_help...
10	10	----> set -q _flag_help
9	9	---> set -q fish_prompt_pwd_dir_length
15	15	---> or set -l fish_prompt_pwd_dir_length 1
40	40	---> set realhome ~
60	103	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
43	43	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
9	57	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
17	17	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
31	31	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
54	35813	-> printf '%s ' (__fish_vcs_prompt)
44	35759	--> __fish_vcs_prompt
605	5060	---> __fish_git_prompt
9	95	----> if not command -sq git...
86	86	-----> not command -sq git
195	4291	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4096	4096	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
55	55	----> test -n "$repo_info"
14	14	----> or return
703	970	---> __fish_hg_prompt
33	267	----> if not command -sq hg...
207	207	-----> not command -sq hg
27	27	-----> return 1
249	29685	---> __fish_svn_prompt
24	248	----> if not command -sq svn...
224	224	-----> not command -sq svn
261	29139	----> set -l checkout_info (command svn info ^/dev/null)
28878	28878	-----> command svn info ^/dev/null
14	49	----> if [ $status -ne 0 ]...
28	28	-----> [ $status -ne 0 ]
7	7	-----> return
11	28	-> if not test $last_status -eq 0...
17	17	--> not test $last_status -eq 0
18	18	-> echo -n "$suffix "
23	23	-> set_color normal
16	16	> echo $_ " "
34	90	> __fish_pwd
56	56	-> pwd
67	104	> __fish_disable_bracketed_paste ls
37	37	-> printf "\e[?2004l"
34	34	> echo $_ " "
51	117	> __fish_pwd
66	66	-> pwd
210	5857	> ls
5647	5647	-> command ls -G $argv
53	110	> __fish_enable_bracketed_paste
57	57	-> printf "\e[?2004h"
54	454	> fish_mode_prompt
188	400	-> fish_default_mode_prompt
17	212	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
164	164	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
31	31	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
805	32256	> fish_prompt
60	60	-> set -l last_status $status
11	28	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_color_branch...
12	12	--> not set -q __fish_git_prompt_color_branch
8	21	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
8	28	-> if not set -q __fish_git_prompt_char_upstream_ahead...
20	20	--> not set -q __fish_git_prompt_char_upstream_ahead
8	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
7	20	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
7	20	-> if not set -q __fish_git_prompt_char_dirtystate...
13	13	--> not set -q __fish_git_prompt_char_dirtystate
9	24	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
14	57	-> if not set -q __fish_git_prompt_char_conflictedstate...
43	43	--> not set -q __fish_git_prompt_char_conflictedstate
9	29	-> if not set -q __fish_git_prompt_char_cleanstate...
20	20	--> not set -q __fish_git_prompt_char_cleanstate
8	24	-> if not set -q __fish_git_prompt_color_dirtystate...
16	16	--> not set -q __fish_git_prompt_color_dirtystate
7	18	-> if not set -q __fish_git_prompt_color_stagedstate...
11	11	--> not set -q __fish_git_prompt_color_stagedstate
7	17	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
6	19	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
8	17	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
7	17	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
17	17	-> set -l color_cwd
16	16	-> set -l prefix
14	14	-> set -l suffix
23	62	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
30	30	-> set_color $color_cwd
62	560	-> echo -n (prompt_pwd)
164	498	--> prompt_pwd
26	26	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
49	49	---> set realhome ~
64	117	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
53	53	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	64	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
18	18	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
63	30159	-> printf '%s ' (__fish_vcs_prompt)
50	30096	--> __fish_vcs_prompt
540	4098	---> __fish_git_prompt
10	91	----> if not command -sq git...
81	81	-----> not command -sq git
106	3435	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3329	3329	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
25	25	----> test -n "$repo_info"
7	7	----> or return
347	420	---> __fish_hg_prompt
10	73	----> if not command -sq hg...
54	54	-----> not command -sq hg
9	9	-----> return 1
173	25528	---> __fish_svn_prompt
10	68	----> if not command -sq svn...
58	58	-----> not command -sq svn
118	25228	----> set -l checkout_info (command svn info ^/dev/null)
25110	25110	-----> command svn info ^/dev/null
16	59	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
10	10	-----> return
13	38	-> if not test $last_status -eq 0...
25	25	--> not test $last_status -eq 0
24	24	-> echo -n "$suffix "
30	30	-> set_color normal
18	18	> echo $_ " "
31	78	> __fish_pwd
47	47	-> pwd
94	183	> __fish_disable_bracketed_paste 'cat fishfile '
89	89	-> printf "\e[?2004l"
62	62	> echo $_ " "
120	210	> __fish_pwd
90	90	-> pwd
11295	11295	> cat fishfile
60	111	> __fish_enable_bracketed_paste
51	51	-> printf "\e[?2004h"
52	534	> fish_mode_prompt
266	482	-> fish_default_mode_prompt
18	216	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
158	158	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
40	40	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
841	27315	> fish_prompt
81	81	-> set -l last_status $status
13	35	-> if not set -q __fish_git_prompt_show_informative_status...
22	22	--> not set -q __fish_git_prompt_show_informative_status
11	31	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
20	20	--> not set -q __fish_git_prompt_hide_untrackedfiles
11	30	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
11	29	-> if not set -q __fish_git_prompt_showupstream...
18	18	--> not set -q __fish_git_prompt_showupstream
11	28	-> if not set -q __fish_git_prompt_char_upstream_ahead...
17	17	--> not set -q __fish_git_prompt_char_upstream_ahead
12	29	-> if not set -q __fish_git_prompt_char_upstream_behind...
17	17	--> not set -q __fish_git_prompt_char_upstream_behind
12	35	-> if not set -q __fish_git_prompt_char_upstream_prefix...
23	23	--> not set -q __fish_git_prompt_char_upstream_prefix
11	28	-> if not set -q __fish_git_prompt_char_stagedstate...
17	17	--> not set -q __fish_git_prompt_char_stagedstate
11	28	-> if not set -q __fish_git_prompt_char_dirtystate...
17	17	--> not set -q __fish_git_prompt_char_dirtystate
11	29	-> if not set -q __fish_git_prompt_char_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_char_untrackedfiles
11	29	-> if not set -q __fish_git_prompt_char_conflictedstate...
18	18	--> not set -q __fish_git_prompt_char_conflictedstate
11	28	-> if not set -q __fish_git_prompt_char_cleanstate...
17	17	--> not set -q __fish_git_prompt_char_cleanstate
12	28	-> if not set -q __fish_git_prompt_color_dirtystate...
16	16	--> not set -q __fish_git_prompt_color_dirtystate
11	34	-> if not set -q __fish_git_prompt_color_stagedstate...
23	23	--> not set -q __fish_git_prompt_color_stagedstate
12	30	-> if not set -q __fish_git_prompt_color_invalidstate...
18	18	--> not set -q __fish_git_prompt_color_invalidstate
11	28	-> if not set -q __fish_git_prompt_color_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_color_untrackedfiles
11	28	-> if not set -q __fish_git_prompt_color_cleanstate...
17	17	--> not set -q __fish_git_prompt_color_cleanstate
11	28	-> if not set -q __fish_prompt_normal...
17	17	--> not set -q __fish_prompt_normal
27	27	-> set -l color_cwd
26	26	-> set -l prefix
26	26	-> set -l suffix
36	109	-> switch "$USER"...
44	44	--> set color_cwd $fish_color_cwd
29	29	--> set suffix '$'
81	81	-> set_color $color_cwd
83	1020	-> echo -n (prompt_pwd)
280	937	--> prompt_pwd
44	44	---> set -l options 'h/help'
85	85	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
13	35	---> if set -q _flag_help...
22	22	----> set -q _flag_help
19	19	---> set -q fish_prompt_pwd_dir_length
30	30	---> or set -l fish_prompt_pwd_dir_length 1
66	66	---> set realhome ~
107	239	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
132	132	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
19	139	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
62	62	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
58	58	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
28	28	-> set_color normal
78	24448	-> printf '%s ' (__fish_vcs_prompt)
119	24370	--> __fish_vcs_prompt
948	5119	---> __fish_git_prompt
14	118	----> if not command -sq git...
104	104	-----> not command -sq git
134	4016	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3882	3882	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
28	28	----> test -n "$repo_info"
9	9	----> or return
348	412	---> __fish_hg_prompt
10	64	----> if not command -sq hg...
46	46	-----> not command -sq hg
8	8	-----> return 1
177	18720	---> __fish_svn_prompt
8	57	----> if not command -sq svn...
49	49	-----> not command -sq svn
130	18433	----> set -l checkout_info (command svn info ^/dev/null)
18303	18303	-----> command svn info ^/dev/null
16	53	----> if [ $status -ne 0 ]...
29	29	-----> [ $status -ne 0 ]
8	8	-----> return
13	46	-> if not test $last_status -eq 0...
33	33	--> not test $last_status -eq 0
21	21	-> echo -n "$suffix "
26	26	-> set_color normal
21	21	> echo $_ " "
40	99	> __fish_pwd
59	59	-> pwd
70	147	> __fish_disable_bracketed_paste 'cat fishd.88e9fe636c53 '
77	77	-> printf "\e[?2004l"
70	70	> echo $_ " "
113	205	> __fish_pwd
92	92	-> pwd
10650	10650	> cat fishd.88e9fe636c53
105	197	> __fish_enable_bracketed_paste
92	92	-> printf "\e[?2004h"
63	567	> fish_mode_prompt
271	504	-> fish_default_mode_prompt
18	233	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
172	172	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
43	43	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
753	36699	> fish_prompt
80	80	-> set -l last_status $status
13	33	-> if not set -q __fish_git_prompt_show_informative_status...
20	20	--> not set -q __fish_git_prompt_show_informative_status
10	27	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	25	-> if not set -q __fish_git_prompt_color_branch...
16	16	--> not set -q __fish_git_prompt_color_branch
11	26	-> if not set -q __fish_git_prompt_showupstream...
15	15	--> not set -q __fish_git_prompt_showupstream
10	26	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
10	25	-> if not set -q __fish_git_prompt_char_upstream_behind...
15	15	--> not set -q __fish_git_prompt_char_upstream_behind
11	26	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
10	25	-> if not set -q __fish_git_prompt_char_stagedstate...
15	15	--> not set -q __fish_git_prompt_char_stagedstate
10	24	-> if not set -q __fish_git_prompt_char_dirtystate...
14	14	--> not set -q __fish_git_prompt_char_dirtystate
10	25	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
10	29	-> if not set -q __fish_git_prompt_char_conflictedstate...
19	19	--> not set -q __fish_git_prompt_char_conflictedstate
9	24	-> if not set -q __fish_git_prompt_char_cleanstate...
15	15	--> not set -q __fish_git_prompt_char_cleanstate
11	26	-> if not set -q __fish_git_prompt_color_dirtystate...
15	15	--> not set -q __fish_git_prompt_color_dirtystate
10	24	-> if not set -q __fish_git_prompt_color_stagedstate...
14	14	--> not set -q __fish_git_prompt_color_stagedstate
9	24	-> if not set -q __fish_git_prompt_color_invalidstate...
15	15	--> not set -q __fish_git_prompt_color_invalidstate
10	25	-> if not set -q __fish_git_prompt_color_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_color_untrackedfiles
11	29	-> if not set -q __fish_git_prompt_color_cleanstate...
18	18	--> not set -q __fish_git_prompt_color_cleanstate
9	24	-> if not set -q __fish_prompt_normal...
15	15	--> not set -q __fish_prompt_normal
25	25	-> set -l color_cwd
24	24	-> set -l prefix
22	22	-> set -l suffix
32	91	-> switch "$USER"...
33	33	--> set color_cwd $fish_color_cwd
26	26	--> set suffix '$'
78	78	-> set_color $color_cwd
75	1000	-> echo -n (prompt_pwd)
264	925	--> prompt_pwd
40	40	---> set -l options 'h/help'
84	84	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
12	30	---> if set -q _flag_help...
18	18	----> set -q _flag_help
16	16	---> set -q fish_prompt_pwd_dir_length
26	26	---> or set -l fish_prompt_pwd_dir_length 1
90	90	---> set realhome ~
98	244	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
146	146	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
15	131	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
73	73	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
43	43	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
22	22	-> set_color normal
58	34079	-> printf '%s ' (__fish_vcs_prompt)
94	34021	--> __fish_vcs_prompt
699	4959	---> __fish_git_prompt
11	89	----> if not command -sq git...
78	78	-----> not command -sq git
152	4127	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3975	3975	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
35	35	----> test -n "$repo_info"
9	9	----> or return
439	526	---> __fish_hg_prompt
14	87	----> if not command -sq hg...
62	62	-----> not command -sq hg
11	11	-----> return 1
242	28442	---> __fish_svn_prompt
10	76	----> if not command -sq svn...
66	66	-----> not command -sq svn
97	28083	----> set -l checkout_info (command svn info ^/dev/null)
27986	27986	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
20	20	-> set_color normal
18	18	> echo $_ " "
35	84	> __fish_pwd
49	49	-> pwd
378	872	> up-or-search
23	138	-> if commandline --search-mode...
115	115	--> commandline --search-mode
18	65	-> if commandline --paging-mode...
47	47	--> commandline --paging-mode
154	210	-> set lineno (commandline -L)
56	56	--> commandline -L
32	81	-> switch $lineno...
49	49	--> commandline -f history-search-backward
391	6765	> down-or-search
6162	6220	-> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/down-or-search.fish
58	58	--> function down-or-search -d "Depending on cursor position and current mode, either search forward or move down one line"...
31	154	-> if commandline --search-mode...
52	52	--> commandline --search-mode
43	43	--> commandline -f history-search-forward
28	28	--> return
66	103	> __fish_disable_bracketed_paste ls
37	37	-> printf "\e[?2004l"
52	52	> echo $_ " "
52	115	> __fish_pwd
63	63	-> pwd
242	5104	> ls
4862	4862	-> command ls -G $argv
48	94	> __fish_enable_bracketed_paste
46	46	-> printf "\e[?2004h"
51	380	> fish_mode_prompt
169	329	-> fish_default_mode_prompt
14	160	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
117	117	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
29	29	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
615	32149	> fish_prompt
40	40	-> set -l last_status $status
10	26	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
8	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
7	20	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
9	22	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
7	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
9	21	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	20	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
8	20	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
7	25	-> if not set -q __fish_git_prompt_char_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_char_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
7	20	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
9	21	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
8	24	-> if not set -q __fish_git_prompt_color_invalidstate...
16	16	--> not set -q __fish_git_prompt_color_invalidstate
8	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
8	21	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
20	20	-> set -l color_cwd
19	19	-> set -l prefix
18	18	-> set -l suffix
26	74	-> switch "$USER"...
27	27	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
31	31	-> set_color $color_cwd
61	553	-> echo -n (prompt_pwd)
168	492	--> prompt_pwd
25	25	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	19	---> if set -q _flag_help...
11	11	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
42	42	---> set realhome ~
61	114	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
53	53	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	66	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
20	20	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
52	30320	-> printf '%s ' (__fish_vcs_prompt)
40	30268	--> __fish_vcs_prompt
674	8091	---> __fish_git_prompt
24	241	----> if not command -sq git...
217	217	-----> not command -sq git
173	7147	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
6974	6974	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
23	23	----> test -n "$repo_info"
6	6	----> or return
299	378	---> __fish_hg_prompt
9	79	----> if not command -sq hg...
62	62	-----> not command -sq hg
8	8	-----> return 1
147	21759	---> __fish_svn_prompt
8	74	----> if not command -sq svn...
66	66	-----> not command -sq svn
101	21496	----> set -l checkout_info (command svn info ^/dev/null)
21395	21395	-----> command svn info ^/dev/null
13	42	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
14	14	> echo $_ " "
30	70	> __fish_pwd
40	40	-> pwd
83	170	> __fish_disable_bracketed_paste 'cat profile.txt '
87	87	-> printf "\e[?2004l"
61	61	> echo $_ " "
111	203	> __fish_pwd
92	92	-> pwd
109317	109317	> cat profile.txt
39	75	> __fish_enable_bracketed_paste
36	36	-> printf "\e[?2004h"
28	308	> fish_mode_prompt
150	280	-> fish_default_mode_prompt
11	130	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
99	99	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
20	20	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
442	27387	> fish_prompt
46	46	-> set -l last_status $status
6	18	-> if not set -q __fish_git_prompt_show_informative_status...
12	12	--> not set -q __fish_git_prompt_show_informative_status
7	16	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
5	14	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
5	14	-> if not set -q __fish_git_prompt_char_upstream_ahead...
9	9	--> not set -q __fish_git_prompt_char_upstream_ahead
6	14	-> if not set -q __fish_git_prompt_char_upstream_behind...
8	8	--> not set -q __fish_git_prompt_char_upstream_behind
6	14	-> if not set -q __fish_git_prompt_char_upstream_prefix...
8	8	--> not set -q __fish_git_prompt_char_upstream_prefix
5	14	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
6	14	-> if not set -q __fish_git_prompt_char_dirtystate...
8	8	--> not set -q __fish_git_prompt_char_dirtystate
6	14	-> if not set -q __fish_git_prompt_char_untrackedfiles...
8	8	--> not set -q __fish_git_prompt_char_untrackedfiles
5	13	-> if not set -q __fish_git_prompt_char_conflictedstate...
8	8	--> not set -q __fish_git_prompt_char_conflictedstate
6	19	-> if not set -q __fish_git_prompt_char_cleanstate...
13	13	--> not set -q __fish_git_prompt_char_cleanstate
5	13	-> if not set -q __fish_git_prompt_color_dirtystate...
8	8	--> not set -q __fish_git_prompt_color_dirtystate
6	14	-> if not set -q __fish_git_prompt_color_stagedstate...
8	8	--> not set -q __fish_git_prompt_color_stagedstate
5	13	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
5	14	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
5	13	-> if not set -q __fish_git_prompt_color_cleanstate...
8	8	--> not set -q __fish_git_prompt_color_cleanstate
6	14	-> if not set -q __fish_prompt_normal...
8	8	--> not set -q __fish_prompt_normal
14	14	-> set -l color_cwd
13	13	-> set -l prefix
12	12	-> set -l suffix
18	55	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
14	14	--> set suffix '$'
47	47	-> set_color $color_cwd
48	546	-> echo -n (prompt_pwd)
145	498	--> prompt_pwd
22	22	---> set -l options 'h/help'
50	50	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	18	---> if set -q _flag_help...
10	10	----> set -q _flag_help
9	9	---> set -q fish_prompt_pwd_dir_length
14	14	---> or set -l fish_prompt_pwd_dir_length 1
38	38	---> set realhome ~
54	129	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
75	75	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
9	73	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
33	33	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
31	31	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
16	16	-> set_color normal
48	25879	-> printf '%s ' (__fish_vcs_prompt)
70	25831	--> __fish_vcs_prompt
502	4155	---> __fish_git_prompt
9	73	----> if not command -sq git...
64	64	-----> not command -sq git
101	3545	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3444	3444	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
8	8	----> or return
517	598	---> __fish_hg_prompt
14	81	----> if not command -sq hg...
57	57	-----> not command -sq hg
10	10	-----> return 1
265	21008	---> __fish_svn_prompt
12	73	----> if not command -sq svn...
61	61	-----> not command -sq svn
106	20627	----> set -l checkout_info (command svn info ^/dev/null)
20521	20521	-----> command svn info ^/dev/null
12	43	----> if [ $status -ne 0 ]...
25	25	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
15	15	> echo $_ " "
32	71	> __fish_pwd
39	39	-> pwd
431	878	> up-or-search
18	160	-> if commandline --search-mode...
142	142	--> commandline --search-mode
15	48	-> if commandline --paging-mode...
33	33	--> commandline --paging-mode
147	185	-> set lineno (commandline -L)
38	38	--> commandline -L
22	54	-> switch $lineno...
32	32	--> commandline -f history-search-backward
82	162	> __fish_disable_bracketed_paste 'cat profile.txt '
80	80	-> printf "\e[?2004l"
63	63	> echo $_ " "
115	208	> __fish_pwd
93	93	-> pwd
129726	129726	> cat profile.txt
55	102	> __fish_enable_bracketed_paste
47	47	-> printf "\e[?2004h"
48	475	> fish_mode_prompt
231	427	-> fish_default_mode_prompt
16	196	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
144	144	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
36	36	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
720	25642	> fish_prompt
42	42	-> set -l last_status $status
11	28	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
10	25	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	23	-> if not set -q __fish_git_prompt_color_branch...
14	14	--> not set -q __fish_git_prompt_color_branch
10	23	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
8	22	-> if not set -q __fish_git_prompt_char_upstream_ahead...
14	14	--> not set -q __fish_git_prompt_char_upstream_ahead
8	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
10	23	-> if not set -q __fish_git_prompt_char_upstream_prefix...
13	13	--> not set -q __fish_git_prompt_char_upstream_prefix
8	22	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
10	22	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
8	22	-> if not set -q __fish_git_prompt_char_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_char_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
9	22	-> if not set -q __fish_git_prompt_char_cleanstate...
13	13	--> not set -q __fish_git_prompt_char_cleanstate
9	23	-> if not set -q __fish_git_prompt_color_dirtystate...
14	14	--> not set -q __fish_git_prompt_color_dirtystate
8	22	-> if not set -q __fish_git_prompt_color_stagedstate...
14	14	--> not set -q __fish_git_prompt_color_stagedstate
9	27	-> if not set -q __fish_git_prompt_color_invalidstate...
18	18	--> not set -q __fish_git_prompt_color_invalidstate
9	22	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_cleanstate...
13	13	--> not set -q __fish_git_prompt_color_cleanstate
9	23	-> if not set -q __fish_prompt_normal...
14	14	--> not set -q __fish_prompt_normal
22	22	-> set -l color_cwd
21	21	-> set -l prefix
20	20	-> set -l suffix
28	80	-> switch "$USER"...
29	29	--> set color_cwd $fish_color_cwd
23	23	--> set suffix '$'
66	66	-> set_color $color_cwd
67	837	-> echo -n (prompt_pwd)
225	770	--> prompt_pwd
34	34	---> set -l options 'h/help'
67	67	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
11	27	---> if set -q _flag_help...
16	16	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
23	23	---> or set -l fish_prompt_pwd_dir_length 1
76	76	---> set realhome ~
78	196	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
118	118	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	108	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
48	48	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
46	46	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
22	22	-> set_color normal
106	23239	-> printf '%s ' (__fish_vcs_prompt)
99	23133	--> __fish_vcs_prompt
781	4769	---> __fish_git_prompt
12	88	----> if not command -sq git...
76	76	-----> not command -sq git
103	3868	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3765	3765	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
8	8	----> or return
454	529	---> __fish_hg_prompt
11	75	----> if not command -sq hg...
56	56	-----> not command -sq hg
8	8	-----> return 1
223	17736	---> __fish_svn_prompt
8	55	----> if not command -sq svn...
47	47	-----> not command -sq svn
80	17372	----> set -l checkout_info (command svn info ^/dev/null)
17292	17292	-----> command svn info ^/dev/null
21	86	----> if [ $status -ne 0 ]...
50	50	-----> [ $status -ne 0 ]
15	15	-----> return
23	64	-> if not test $last_status -eq 0...
41	41	--> not test $last_status -eq 0
39	39	-> echo -n "$suffix "
57	57	-> set_color normal
47	47	> echo $_ " "
75	225	> __fish_pwd
150	150	-> pwd
166	439	> up-or-search
23	68	-> if commandline --search-mode...
45	45	--> commandline --search-mode
11	56	-> if commandline --paging-mode...
45	45	--> commandline --paging-mode
80	109	-> set lineno (commandline -L)
29	29	--> commandline -L
17	40	-> switch $lineno...
23	23	--> commandline -f history-search-backward
98	133	> __fish_disable_bracketed_paste 'cat profile.txt '
35	35	-> printf "\e[?2004l"
38	38	> echo $_ " "
51	124	> __fish_pwd
73	73	-> pwd
133418	133418	> cat profile.txt
66	110	> __fish_enable_bracketed_paste
44	44	-> printf "\e[?2004h"
42	397	> fish_mode_prompt
172	355	-> fish_default_mode_prompt
15	183	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
132	132	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
36	36	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
748	30303	> fish_prompt
41	41	-> set -l last_status $status
10	29	-> if not set -q __fish_git_prompt_show_informative_status...
19	19	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
11	25	-> if not set -q __fish_git_prompt_showupstream...
14	14	--> not set -q __fish_git_prompt_showupstream
9	25	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
9	24	-> if not set -q __fish_git_prompt_char_upstream_behind...
15	15	--> not set -q __fish_git_prompt_char_upstream_behind
9	27	-> if not set -q __fish_git_prompt_char_upstream_prefix...
18	18	--> not set -q __fish_git_prompt_char_upstream_prefix
9	23	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
9	24	-> if not set -q __fish_git_prompt_char_dirtystate...
15	15	--> not set -q __fish_git_prompt_char_dirtystate
8	23	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
9	24	-> if not set -q __fish_git_prompt_char_conflictedstate...
15	15	--> not set -q __fish_git_prompt_char_conflictedstate
9	23	-> if not set -q __fish_git_prompt_char_cleanstate...
14	14	--> not set -q __fish_git_prompt_char_cleanstate
10	25	-> if not set -q __fish_git_prompt_color_dirtystate...
15	15	--> not set -q __fish_git_prompt_color_dirtystate
9	28	-> if not set -q __fish_git_prompt_color_stagedstate...
19	19	--> not set -q __fish_git_prompt_color_stagedstate
9	24	-> if not set -q __fish_git_prompt_color_invalidstate...
15	15	--> not set -q __fish_git_prompt_color_invalidstate
9	22	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
10	24	-> if not set -q __fish_git_prompt_color_cleanstate...
14	14	--> not set -q __fish_git_prompt_color_cleanstate
10	24	-> if not set -q __fish_prompt_normal...
14	14	--> not set -q __fish_prompt_normal
24	24	-> set -l color_cwd
21	21	-> set -l prefix
21	21	-> set -l suffix
29	86	-> switch "$USER"...
32	32	--> set color_cwd $fish_color_cwd
25	25	--> set suffix '$'
37	37	-> set_color $color_cwd
71	717	-> echo -n (prompt_pwd)
188	646	--> prompt_pwd
38	38	---> set -l options 'h/help'
43	43	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
12	30	---> if set -q _flag_help...
18	18	----> set -q _flag_help
16	16	---> set -q fish_prompt_pwd_dir_length
25	25	---> or set -l fish_prompt_pwd_dir_length 1
62	62	---> set realhome ~
84	150	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
66	66	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
17	94	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
27	27	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
50	50	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
22	22	-> set_color normal
130	27893	-> printf '%s ' (__fish_vcs_prompt)
69	27763	--> __fish_vcs_prompt
742	4905	---> __fish_git_prompt
11	111	----> if not command -sq git...
100	100	-----> not command -sq git
118	4010	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3892	3892	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
34	34	----> test -n "$repo_info"
8	8	----> or return
425	508	---> __fish_hg_prompt
14	83	----> if not command -sq hg...
59	59	-----> not command -sq hg
10	10	-----> return 1
244	22281	---> __fish_svn_prompt
11	74	----> if not command -sq svn...
63	63	-----> not command -sq svn
264	21805	----> set -l checkout_info (command svn info ^/dev/null)
21541	21541	-----> command svn info ^/dev/null
44	158	----> if [ $status -ne 0 ]...
90	90	-----> [ $status -ne 0 ]
24	24	-----> return
26	100	-> if not test $last_status -eq 0...
74	74	--> not test $last_status -eq 0
69	69	-> echo -n "$suffix "
84	84	-> set_color normal
20	20	> echo $_ " "
39	104	> __fish_pwd
65	65	-> pwd
344	744	> up-or-search
20	95	-> if commandline --search-mode...
75	75	--> commandline --search-mode
16	56	-> if commandline --paging-mode...
40	40	--> commandline --paging-mode
131	183	-> set lineno (commandline -L)
52	52	--> commandline -L
27	66	-> switch $lineno...
39	39	--> commandline -f history-search-backward
381	589	> up-or-search
29	208	-> if commandline --search-mode...
119	119	--> commandline --search-mode
36	36	--> commandline -f history-search-backward
24	24	--> return
336	489	> down-or-search
40	153	-> if commandline --search-mode...
53	53	--> commandline --search-mode
35	35	--> commandline -f history-search-forward
25	25	--> return
154	304	> up-or-search
26	150	-> if commandline --search-mode...
60	60	--> commandline --search-mode
38	38	--> commandline -f history-search-backward
26	26	--> return
194	369	> down-or-search
32	175	-> if commandline --search-mode...
70	70	--> commandline --search-mode
44	44	--> commandline -f history-search-forward
29	29	--> return
5907	15066	> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/grep.fish
130	9159	-> if echo | command grep --color=auto "" >/dev/null 2>&1...
9006	9006	--> echo | command grep --color=auto "" >/dev/null 2>&1
23	23	--> function grep...
1491	2706	> source /usr/local/Cellar/fish/2.7.1/share/fish/completions/grep.fish
108	108	-> complete -c grep -s A -l after-context --description "Print NUM lines of trailing context"
27	27	-> complete -c grep -s a -l text --description "Process binary file as text"
24	24	-> complete -c grep -s B -l before-context --description "Print NUM lines of leading context"
22	22	-> complete -c grep -s C -l context --description "Print NUM lines of context"
21	21	-> complete -c grep -s b -l byte-offset --description "Print byte offset of matches"
38	38	-> complete -c grep -l binary-files --description "Assume data type for binary files" -x -a "binary\tBinary\ format text\tText\ format"
35	35	-> complete -c grep -l colour -x --description "Colour output" -a "never always auto"
31	31	-> complete -c grep -l color -x --description "Color output" -a "never always auto"
22	22	-> complete -c grep -s c -l count --description "Only print number of matches"
32	32	-> complete -c grep -s D -l devices -x -a "read skip" --description "Action for devices"
34	34	-> complete -c grep -s d -l directories -x -a "read skip recurse" --description "Action for directories"
26	26	-> complete -c grep -s E -l extended-regexp --description "Pattern is extended regexp"
22	22	-> complete -xc grep -s e -l regexp --description "Pattern is a regexp"
23	23	-> complete -rc grep -l exclude-from --description "Read pattern list from file. Skip files whose base name matches list"
22	22	-> complete -rc grep -l exclude-dir --description "Exclude matching directories from recursive searches"
25	25	-> complete -c grep -s F -l fixed-strings --description "Pattern is a fixed string"
21	21	-> complete -rc grep -s f -l file -r --description "Use patterns from a file"
21	21	-> complete -c grep -s G -l basic-regexp --description "Pattern is basic regex"
21	21	-> complete -c grep -s H -l with-filename --description "Print filename"
22	22	-> complete -c grep -s h -l no-filename --description "Suppress printing filename"
19	19	-> complete -c grep -l help --description "Display help and exit"
22	22	-> complete -c grep -s I --description "Skip binary files"
21	21	-> complete -c grep -s i -l ignore-case --description "Ignore case"
22	22	-> complete -c grep -s L -l files-without-match --description "Print first non-matching file"
22	22	-> complete -c grep -s l -l files-with-match --description "Print first matching file"
22	22	-> complete -c grep -s m -l max-count --description "Stop reading after NUM matches"
20	20	-> complete -c grep -l mmap --description "Use the mmap system call to read input"
21	21	-> complete -c grep -s n -l line-number --description "Print line number"
22	22	-> complete -c grep -s o -l only-matching --description "Show only matching part"
20	20	-> complete -c grep -l label --description "Rename stdin"
20	20	-> complete -c grep -l line-buffered --description "Use line buffering"
24	24	-> complete -c grep -s P -l perl-regexp --description "Pattern is a Perl regexp (PCRE) string"
21	21	-> complete -c grep -s q -l quiet --description "Do not write anything"
20	20	-> complete -c grep -l silent --description "Do not write anything"
21	21	-> complete -c grep -s R -l recursive --description "Read files under each directory, recursively"
23	23	-> complete -c grep -s r --description "Read files under each directory, recursively"
20	20	-> complete -c grep -l include --description "Search only files matching PATTERN"
20	20	-> complete -c grep -l exclude --description "Skip files matching PATTERN"
21	21	-> complete -c grep -s s -l no-messages --description "Suppress error messages"
23	23	-> complete -c grep -s T -l initial-tab --description "Ensure first character of actual line content lies on a tab stop"
23	23	-> complete -c grep -s U -l binary --description "Treat files as binary"
22	22	-> complete -c grep -s u -l unix-byte-offsets --description "Report Unix-style byte offsets"
21	21	-> complete -c grep -s V -l version --description "Display version and exit"
21	21	-> complete -c grep -s v -l invert-match --description "Invert the sense of matching"
21	21	-> complete -c grep -s w -l word-regexp --description "Only whole matching words"
25	25	-> complete -c grep -s x -l line-regexp --description "Only whole matching lines"
20	20	-> complete -c grep -s y --description "Ignore case (deprecated: use -i instead)"
21	21	-> complete -c grep -s z -l null-data --description "Treat input as a set of zero-terminated lines"
20	20	-> complete -c grep -s Z -l null --description "Output a zero byte after filename"
74	151	> __fish_disable_bracketed_paste 'cat profile.txt | grep export'
77	77	-> printf "\e[?2004l"
39	39	> echo $_ " "
120	215	> __fish_pwd
95	95	-> pwd
1774	55290	> cat profile.txt | grep export
53516	53516	-> command grep --color=auto $argv
79	209	> __fish_enable_bracketed_paste
130	130	-> printf "\e[?2004h"
56	503	> fish_mode_prompt
218	447	-> fish_default_mode_prompt
14	229	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
181	181	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
34	34	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
545	51769	> fish_prompt
74	74	-> set -l last_status $status
10	28	-> if not set -q __fish_git_prompt_show_informative_status...
18	18	--> not set -q __fish_git_prompt_show_informative_status
8	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_branch...
12	12	--> not set -q __fish_git_prompt_color_branch
8	21	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
6	20	-> if not set -q __fish_git_prompt_char_upstream_ahead...
14	14	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
7	18	-> if not set -q __fish_git_prompt_char_upstream_prefix...
11	11	--> not set -q __fish_git_prompt_char_upstream_prefix
7	20	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
8	24	-> if not set -q __fish_git_prompt_char_dirtystate...
16	16	--> not set -q __fish_git_prompt_char_dirtystate
7	19	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
7	19	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
7	17	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
7	19	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
6	18	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
11	26	-> if not set -q __fish_git_prompt_color_invalidstate...
15	15	--> not set -q __fish_git_prompt_color_invalidstate
7	23	-> if not set -q __fish_git_prompt_color_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
6	20	-> if not set -q __fish_prompt_normal...
14	14	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
18	18	-> set -l prefix
18	18	-> set -l suffix
25	70	-> switch "$USER"...
24	24	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
75	75	-> set_color $color_cwd
77	1018	-> echo -n (prompt_pwd)
307	941	--> prompt_pwd
39	39	---> set -l options 'h/help'
69	69	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
11	28	---> if set -q _flag_help...
17	17	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
23	23	---> or set -l fish_prompt_pwd_dir_length 1
108	108	---> set realhome ~
88	232	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
144	144	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
15	121	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
56	56	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
50	50	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
26	26	-> set_color normal
67	49349	-> printf '%s ' (__fish_vcs_prompt)
109	49282	--> __fish_vcs_prompt
568	15266	---> __fish_git_prompt
13	133	----> if not command -sq git...
120	120	-----> not command -sq git
131	14523	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
14392	14392	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
33	33	----> test -n "$repo_info"
9	9	----> or return
489	574	---> __fish_hg_prompt
13	85	----> if not command -sq hg...
62	62	-----> not command -sq hg
10	10	-----> return 1
246	33333	---> __fish_svn_prompt
10	76	----> if not command -sq svn...
66	66	-----> not command -sq svn
140	32961	----> set -l checkout_info (command svn info ^/dev/null)
32821	32821	-----> command svn info ^/dev/null
15	50	----> if [ $status -ne 0 ]...
28	28	-----> [ $status -ne 0 ]
7	7	-----> return
15	148	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
118	118	--> set_color $fish_color_error
19	19	-> echo -n "$suffix "
14	14	-> set_color normal
16	16	> echo $_ " "
32	101	> __fish_pwd
69	69	-> pwd
325	738	> up-or-search
19	114	-> if commandline --search-mode...
95	95	--> commandline --search-mode
16	55	-> if commandline --paging-mode...
39	39	--> commandline --paging-mode
132	178	-> set lineno (commandline -L)
46	46	--> commandline -L
27	66	-> switch $lineno...
39	39	--> commandline -f history-search-backward
74	117	> __fish_disable_bracketed_paste 'cat profile.txt | grep ex'
43	43	-> printf "\e[?2004l"
39	39	> echo $_ " "
54	128	> __fish_pwd
74	74	-> pwd
1349	59473	> cat profile.txt | grep ex
58124	58124	-> command grep --color=auto $argv
355	425	> __fish_enable_bracketed_paste
70	70	-> printf "\e[?2004h"
50	520	> fish_mode_prompt
188	470	-> fish_default_mode_prompt
19	282	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
221	221	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
42	42	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
702	39371	> fish_prompt
39	39	-> set -l last_status $status
10	26	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
8	21	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
9	22	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	24	-> if not set -q __fish_git_prompt_char_upstream_behind...
15	15	--> not set -q __fish_git_prompt_char_upstream_behind
7	19	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
11	40	-> if not set -q __fish_git_prompt_char_stagedstate...
29	29	--> not set -q __fish_git_prompt_char_stagedstate
7	21	-> if not set -q __fish_git_prompt_char_dirtystate...
14	14	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
9	22	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
7	20	-> if not set -q __fish_git_prompt_color_stagedstate...
13	13	--> not set -q __fish_git_prompt_color_stagedstate
8	21	-> if not set -q __fish_git_prompt_color_invalidstate...
13	13	--> not set -q __fish_git_prompt_color_invalidstate
8	21	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
8	24	-> if not set -q __fish_git_prompt_color_cleanstate...
16	16	--> not set -q __fish_git_prompt_color_cleanstate
8	21	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
18	18	-> set -l prefix
19	19	-> set -l suffix
27	76	-> switch "$USER"...
28	28	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
35	35	-> set_color $color_cwd
73	747	-> echo -n (prompt_pwd)
219	674	--> prompt_pwd
54	54	---> set -l options 'h/help'
44	44	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
11	25	---> if set -q _flag_help...
14	14	----> set -q _flag_help
15	15	---> set -q fish_prompt_pwd_dir_length
22	22	---> or set -l fish_prompt_pwd_dir_length 1
65	65	---> set realhome ~
78	144	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
66	66	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	86	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
27	27	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
45	45	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
23	23	-> set_color normal
59	37215	-> printf '%s ' (__fish_vcs_prompt)
50	37156	--> __fish_vcs_prompt
690	10185	---> __fish_git_prompt
13	126	----> if not command -sq git...
113	113	-----> not command -sq git
123	9331	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
9208	9208	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
29	29	----> test -n "$repo_info"
9	9	----> or return
459	560	---> __fish_hg_prompt
14	101	----> if not command -sq hg...
77	77	-----> not command -sq hg
10	10	-----> return 1
210	26361	---> __fish_svn_prompt
11	94	----> if not command -sq svn...
83	83	-----> not command -sq svn
125	26008	----> set -l checkout_info (command svn info ^/dev/null)
25883	25883	-----> command svn info ^/dev/null
15	49	----> if [ $status -ne 0 ]...
27	27	-----> [ $status -ne 0 ]
7	7	-----> return
8	26	-> if not test $last_status -eq 0...
18	18	--> not test $last_status -eq 0
18	18	-> echo -n "$suffix "
26	26	-> set_color normal
20	20	> echo $_ " "
46	105	> __fish_pwd
59	59	-> pwd
202	576	> up-or-search
18	86	-> if commandline --search-mode...
68	68	--> commandline --search-mode
15	55	-> if commandline --paging-mode...
40	40	--> commandline --paging-mode
123	168	-> set lineno (commandline -L)
45	45	--> commandline -L
26	65	-> switch $lineno...
39	39	--> commandline -f history-search-backward
73	115	> __fish_disable_bracketed_paste 'cat profile.txt | grep exclude'
42	42	-> printf "\e[?2004l"
40	40	> echo $_ " "
55	134	> __fish_pwd
79	79	-> pwd
1975	60025	> cat profile.txt | grep exclude
58050	58050	-> command grep --color=auto $argv
75	438	> __fish_enable_bracketed_paste
363	363	-> printf "\e[?2004h"
30	407	> fish_mode_prompt
227	377	-> fish_default_mode_prompt
11	150	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
119	119	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
20	20	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
464	33036	> fish_prompt
30	30	-> set -l last_status $status
7	18	-> if not set -q __fish_git_prompt_show_informative_status...
11	11	--> not set -q __fish_git_prompt_show_informative_status
6	15	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_hide_untrackedfiles
5	14	-> if not set -q __fish_git_prompt_color_branch...
9	9	--> not set -q __fish_git_prompt_color_branch
5	14	-> if not set -q __fish_git_prompt_showupstream...
9	9	--> not set -q __fish_git_prompt_showupstream
5	14	-> if not set -q __fish_git_prompt_char_upstream_ahead...
9	9	--> not set -q __fish_git_prompt_char_upstream_ahead
5	14	-> if not set -q __fish_git_prompt_char_upstream_behind...
9	9	--> not set -q __fish_git_prompt_char_upstream_behind
6	14	-> if not set -q __fish_git_prompt_char_upstream_prefix...
8	8	--> not set -q __fish_git_prompt_char_upstream_prefix
5	14	-> if not set -q __fish_git_prompt_char_stagedstate...
9	9	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
5	14	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
6	14	-> if not set -q __fish_git_prompt_char_conflictedstate...
8	8	--> not set -q __fish_git_prompt_char_conflictedstate
5	14	-> if not set -q __fish_git_prompt_char_cleanstate...
9	9	--> not set -q __fish_git_prompt_char_cleanstate
6	14	-> if not set -q __fish_git_prompt_color_dirtystate...
8	8	--> not set -q __fish_git_prompt_color_dirtystate
5	14	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
5	13	-> if not set -q __fish_git_prompt_color_invalidstate...
8	8	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
5	13	-> if not set -q __fish_git_prompt_color_cleanstate...
8	8	--> not set -q __fish_git_prompt_color_cleanstate
6	14	-> if not set -q __fish_prompt_normal...
8	8	--> not set -q __fish_prompt_normal
14	14	-> set -l color_cwd
13	13	-> set -l prefix
12	12	-> set -l suffix
17	51	-> switch "$USER"...
19	19	--> set color_cwd $fish_color_cwd
15	15	--> set suffix '$'
26	26	-> set_color $color_cwd
48	512	-> echo -n (prompt_pwd)
153	464	--> prompt_pwd
24	24	---> set -l options 'h/help'
28	28	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
7	17	---> if set -q _flag_help...
10	10	----> set -q _flag_help
9	9	---> set -q fish_prompt_pwd_dir_length
15	15	---> or set -l fish_prompt_pwd_dir_length 1
59	59	---> set realhome ~
54	100	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
46	46	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
9	59	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
18	18	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
32	32	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
15	15	-> set_color normal
98	31468	-> printf '%s ' (__fish_vcs_prompt)
49	31370	--> __fish_vcs_prompt
459	3881	---> __fish_git_prompt
8	74	----> if not command -sq git...
66	66	-----> not command -sq git
110	3304	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3194	3194	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
35	35	----> test -n "$repo_info"
9	9	----> or return
785	910	---> __fish_hg_prompt
25	125	----> if not command -sq hg...
87	87	-----> not command -sq hg
13	13	-----> return 1
326	26530	---> __fish_svn_prompt
49	165	----> if not command -sq svn...
116	116	-----> not command -sq svn
263	25925	----> set -l checkout_info (command svn info ^/dev/null)
25662	25662	-----> command svn info ^/dev/null
32	114	----> if [ $status -ne 0 ]...
65	65	-----> [ $status -ne 0 ]
17	17	-----> return
20	67	-> if not test $last_status -eq 0...
47	47	--> not test $last_status -eq 0
45	45	-> echo -n "$suffix "
60	60	-> set_color normal
45	45	> echo $_ " "
84	237	> __fish_pwd
153	153	-> pwd
218	607	> up-or-search
18	85	-> if commandline --search-mode...
67	67	--> commandline --search-mode
15	56	-> if commandline --paging-mode...
41	41	--> commandline --paging-mode
124	171	-> set lineno (commandline -L)
47	47	--> commandline -L
37	77	-> switch $lineno...
40	40	--> commandline -f history-search-backward
66	97	> __fish_disable_bracketed_paste 'cat profile.txt | grep git'
31	31	-> printf "\e[?2004l"
31	31	> echo $_ " "
52	132	> __fish_pwd
80	80	-> pwd
1679	106918	> cat profile.txt | grep git
105239	105239	-> command grep --color=auto $argv
84	125	> __fish_enable_bracketed_paste
41	41	-> printf "\e[?2004h"
49	425	> fish_mode_prompt
185	376	-> fish_default_mode_prompt
16	191	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
141	141	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
34	34	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
741	35775	> fish_prompt
47	47	-> set -l last_status $status
11	28	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
9	22	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
9	22	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	22	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
8	25	-> if not set -q __fish_git_prompt_char_upstream_prefix...
17	17	--> not set -q __fish_git_prompt_char_upstream_prefix
9	21	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
9	22	-> if not set -q __fish_git_prompt_char_dirtystate...
13	13	--> not set -q __fish_git_prompt_char_dirtystate
9	25	-> if not set -q __fish_git_prompt_char_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_char_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
8	21	-> if not set -q __fish_git_prompt_char_cleanstate...
13	13	--> not set -q __fish_git_prompt_char_cleanstate
9	37	-> if not set -q __fish_git_prompt_color_dirtystate...
28	28	--> not set -q __fish_git_prompt_color_dirtystate
8	21	-> if not set -q __fish_git_prompt_color_stagedstate...
13	13	--> not set -q __fish_git_prompt_color_stagedstate
9	21	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
9	25	-> if not set -q __fish_git_prompt_color_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
9	21	-> if not set -q __fish_prompt_normal...
12	12	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
20	20	-> set -l prefix
19	19	-> set -l suffix
28	78	-> switch "$USER"...
28	28	--> set color_cwd $fish_color_cwd
22	22	--> set suffix '$'
34	34	-> set_color $color_cwd
56	581	-> echo -n (prompt_pwd)
181	525	--> prompt_pwd
31	31	---> set -l options 'h/help'
40	40	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
9	23	---> if set -q _flag_help...
14	14	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
15	15	---> or set -l fish_prompt_pwd_dir_length 1
63	63	---> set realhome ~
55	101	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
46	46	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
11	61	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
19	19	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
31	31	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
16	16	-> set_color normal
53	33734	-> printf '%s ' (__fish_vcs_prompt)
37	33681	--> __fish_vcs_prompt
461	10222	---> __fish_git_prompt
7	75	----> if not command -sq git...
68	68	-----> not command -sq git
85	9659	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
9574	9574	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
6	6	----> or return
285	355	---> __fish_hg_prompt
9	70	----> if not command -sq hg...
53	53	-----> not command -sq hg
8	8	-----> return 1
139	23067	---> __fish_svn_prompt
7	57	----> if not command -sq svn...
50	50	-----> not command -sq svn
109	22820	----> set -l checkout_info (command svn info ^/dev/null)
22711	22711	-----> command svn info ^/dev/null
14	51	----> if [ $status -ne 0 ]...
30	30	-----> [ $status -ne 0 ]
7	7	-----> return
11	27	-> if not test $last_status -eq 0...
16	16	--> not test $last_status -eq 0
16	16	-> echo -n "$suffix "
20	20	-> set_color normal
28	28	> echo $_ " "
49	106	> __fish_pwd
57	57	-> pwd
194	448	> up-or-search
11	67	-> if commandline --search-mode...
56	56	--> commandline --search-mode
8	30	-> if commandline --paging-mode...
22	22	--> commandline --paging-mode
93	119	-> set lineno (commandline -L)
26	26	--> commandline -L
15	38	-> switch $lineno...
23	23	--> commandline -f history-search-backward
157	3098	> __fish_start_bracketed_paste
75	75	-> set -g __fish_last_bind_mode $fish_bind_mode
380	2866	-> __fish_commandline_is_singlequoted
46	46	--> set -l state normal
278	2323	--> for char in (commandline -ct | string split "")...
2001	2001	---> commandline -ct | string split ""
26	44	---> switch $char...
18	18	----> switch $state...
15	117	--> if contains -- $state single single-escaped...
81	81	---> contains -- $state single single-escaped
21	21	---> return 1
152	286	> __fish_stop_bracketed_paste
73	73	-> set fish_bind_mode $__fish_last_bind_mode
33	33	-> set -e __fish_paste_quoted
28	28	-> commandline -f force-repaint
32	277	> fish_mode_prompt
154	245	-> fish_default_mode_prompt
12	91	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
57	57	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
22	22	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
503	24470	> fish_prompt
26	26	-> set -l last_status $status
8	20	-> if not set -q __fish_git_prompt_show_informative_status...
12	12	--> not set -q __fish_git_prompt_show_informative_status
6	17	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_branch...
10	10	--> not set -q __fish_git_prompt_color_branch
6	20	-> if not set -q __fish_git_prompt_showupstream...
14	14	--> not set -q __fish_git_prompt_showupstream
6	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
11	11	--> not set -q __fish_git_prompt_char_upstream_ahead
6	16	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
6	16	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
6	16	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
6	15	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
7	16	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
7	17	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
6	15	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
8	17	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
6	20	-> if not set -q __fish_git_prompt_color_cleanstate...
14	14	--> not set -q __fish_git_prompt_color_cleanstate
7	17	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
16	16	-> set -l prefix
15	15	-> set -l suffix
21	60	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
50	50	-> set_color $color_cwd
73	645	-> echo -n (prompt_pwd)
168	572	--> prompt_pwd
26	26	---> set -l options 'h/help'
56	56	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
9	20	---> if set -q _flag_help...
11	11	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
58	58	---> set realhome ~
63	114	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
51	51	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
13	102	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
53	53	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
77	22755	-> printf '%s ' (__fish_vcs_prompt)
102	22678	--> __fish_vcs_prompt
581	4018	---> __fish_git_prompt
9	71	----> if not command -sq git...
62	62	-----> not command -sq git
102	3332	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3230	3230	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
20	20	----> test -n "$repo_info"
14	14	----> or return
349	413	---> __fish_hg_prompt
10	64	----> if not command -sq hg...
46	46	-----> not command -sq hg
8	8	-----> return 1
192	18145	---> __fish_svn_prompt
8	54	----> if not command -sq svn...
46	46	-----> not command -sq svn
85	17845	----> set -l checkout_info (command svn info ^/dev/null)
17760	17760	-----> command svn info ^/dev/null
16	54	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
7	7	-----> return
10	28	-> if not test $last_status -eq 0...
18	18	--> not test $last_status -eq 0
16	16	-> echo -n "$suffix "
19	19	-> set_color normal
17	17	> echo $_ " "
72	124	> __fish_pwd
52	52	-> pwd
132	3114	> __fish_start_bracketed_paste
75	75	-> set -g __fish_last_bind_mode $fish_bind_mode
356	2907	-> __fish_commandline_is_singlequoted
46	46	--> set -l state normal
290	2359	--> for char in (commandline -ct | string split "")...
2011	2011	---> commandline -ct | string split ""
32	58	---> switch $char...
26	26	----> switch $state...
18	146	--> if contains -- $state single single-escaped...
100	100	---> contains -- $state single single-escaped
28	28	---> return 1
106	253	> __fish_stop_bracketed_paste
72	72	-> set fish_bind_mode $__fish_last_bind_mode
41	41	-> set -e __fish_paste_quoted
34	34	-> commandline -f force-repaint
42	286	> fish_mode_prompt
160	244	-> fish_default_mode_prompt
13	84	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
43	43	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
28	28	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
606	24980	> fish_prompt
32	32	-> set -l last_status $status
11	26	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
7	20	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
8	20	-> if not set -q __fish_git_prompt_char_upstream_ahead...
12	12	--> not set -q __fish_git_prompt_char_upstream_ahead
8	24	-> if not set -q __fish_git_prompt_char_upstream_behind...
16	16	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
7	20	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
7	19	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
7	19	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
9	24	-> if not set -q __fish_git_prompt_color_dirtystate...
15	15	--> not set -q __fish_git_prompt_color_dirtystate
8	20	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
21	38	-> if not set -q __fish_git_prompt_color_invalidstate...
17	17	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
15	15	-> set -l prefix
14	14	-> set -l suffix
21	62	-> switch "$USER"...
24	24	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
28	28	-> set_color $color_cwd
53	521	-> echo -n (prompt_pwd)
127	468	--> prompt_pwd
25	25	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
61	61	---> set realhome ~
62	109	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
47	47	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
11	67	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
21	21	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
35	35	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
50	23228	-> printf '%s ' (__fish_vcs_prompt)
40	23178	--> __fish_vcs_prompt
621	3973	---> __fish_git_prompt
9	83	----> if not command -sq git...
74	74	-----> not command -sq git
99	3239	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3140	3140	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
23	23	----> test -n "$repo_info"
7	7	----> or return
345	418	---> __fish_hg_prompt
11	73	----> if not command -sq hg...
53	53	-----> not command -sq hg
9	9	-----> return 1
162	18747	---> __fish_svn_prompt
8	65	----> if not command -sq svn...
57	57	-----> not command -sq svn
98	18478	----> set -l checkout_info (command svn info ^/dev/null)
18380	18380	-----> command svn info ^/dev/null
12	42	----> if [ $status -ne 0 ]...
24	24	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
16	16	-> echo -n "$suffix "
19	19	-> set_color normal
14	14	> echo $_ " "
28	67	> __fish_pwd
39	39	-> pwd
76	118	> __fish_disable_bracketed_paste 'cat profile.txt | grep git ls-files --others'
42	42	-> printf "\e[?2004l"
41	41	> echo $_ " "
57	139	> __fish_pwd
82	82	-> pwd
2000	5951	> cat profile.txt | grep git ls-files --others
3951	3951	-> command grep --color=auto $argv
56	103	> __fish_enable_bracketed_paste
47	47	-> printf "\e[?2004h"
59	515	> fish_mode_prompt
248	456	-> fish_default_mode_prompt
19	208	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
146	146	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
43	43	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
921	28040	> fish_prompt
54	54	-> set -l last_status $status
15	38	-> if not set -q __fish_git_prompt_show_informative_status...
23	23	--> not set -q __fish_git_prompt_show_informative_status
14	33	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
19	19	--> not set -q __fish_git_prompt_hide_untrackedfiles
13	32	-> if not set -q __fish_git_prompt_color_branch...
19	19	--> not set -q __fish_git_prompt_color_branch
14	32	-> if not set -q __fish_git_prompt_showupstream...
18	18	--> not set -q __fish_git_prompt_showupstream
12	31	-> if not set -q __fish_git_prompt_char_upstream_ahead...
19	19	--> not set -q __fish_git_prompt_char_upstream_ahead
24	43	-> if not set -q __fish_git_prompt_char_upstream_behind...
19	19	--> not set -q __fish_git_prompt_char_upstream_behind
9	24	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
11	25	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
11	31	-> if not set -q __fish_git_prompt_char_dirtystate...
20	20	--> not set -q __fish_git_prompt_char_dirtystate
9	24	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
9	24	-> if not set -q __fish_git_prompt_char_conflictedstate...
15	15	--> not set -q __fish_git_prompt_char_conflictedstate
9	24	-> if not set -q __fish_git_prompt_char_cleanstate...
15	15	--> not set -q __fish_git_prompt_char_cleanstate
10	25	-> if not set -q __fish_git_prompt_color_dirtystate...
15	15	--> not set -q __fish_git_prompt_color_dirtystate
10	25	-> if not set -q __fish_git_prompt_color_stagedstate...
15	15	--> not set -q __fish_git_prompt_color_stagedstate
10	28	-> if not set -q __fish_git_prompt_color_invalidstate...
18	18	--> not set -q __fish_git_prompt_color_invalidstate
10	25	-> if not set -q __fish_git_prompt_color_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_color_untrackedfiles
10	24	-> if not set -q __fish_git_prompt_color_cleanstate...
14	14	--> not set -q __fish_git_prompt_color_cleanstate
10	24	-> if not set -q __fish_prompt_normal...
14	14	--> not set -q __fish_prompt_normal
24	24	-> set -l color_cwd
23	23	-> set -l prefix
22	22	-> set -l suffix
30	88	-> switch "$USER"...
33	33	--> set color_cwd $fish_color_cwd
25	25	--> set suffix '$'
39	39	-> set_color $color_cwd
76	822	-> echo -n (prompt_pwd)
247	746	--> prompt_pwd
37	37	---> set -l options 'h/help'
47	47	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
12	29	---> if set -q _flag_help...
17	17	----> set -q _flag_help
16	16	---> set -q fish_prompt_pwd_dir_length
26	26	---> or set -l fish_prompt_pwd_dir_length 1
92	92	---> set realhome ~
87	159	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
72	72	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
16	93	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
26	26	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
51	51	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
25	25	-> set_color normal
57	25380	-> printf '%s ' (__fish_vcs_prompt)
51	25323	--> __fish_vcs_prompt
791	5399	---> __fish_git_prompt
12	116	----> if not command -sq git...
104	104	-----> not command -sq git
128	4458	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4330	4330	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
7	7	----> or return
393	474	---> __fish_hg_prompt
11	81	----> if not command -sq hg...
61	61	-----> not command -sq hg
9	9	-----> return 1
162	19399	---> __fish_svn_prompt
9	70	----> if not command -sq svn...
61	61	-----> not command -sq svn
91	19127	----> set -l checkout_info (command svn info ^/dev/null)
19036	19036	-----> command svn info ^/dev/null
12	40	----> if [ $status -ne 0 ]...
22	22	-----> [ $status -ne 0 ]
6	6	-----> return
10	101	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
77	77	--> set_color $fish_color_error
16	16	-> echo -n "$suffix "
13	13	-> set_color normal
13	13	> echo $_ " "
27	68	> __fish_pwd
41	41	-> pwd
217	607	> up-or-search
19	91	-> if commandline --search-mode...
72	72	--> commandline --search-mode
15	60	-> if commandline --paging-mode...
45	45	--> commandline --paging-mode
127	173	-> set lineno (commandline -L)
46	46	--> commandline -L
28	66	-> switch $lineno...
38	38	--> commandline -f history-search-backward
72	104	> __fish_disable_bracketed_paste 'cat profile.txt | grep git ls-files --others'
32	32	-> printf "\e[?2004l"
38	38	> echo $_ " "
52	129	> __fish_pwd
77	77	-> pwd
1940	6187	> cat profile.txt | grep git ls-files --others
4247	4247	-> command grep --color=auto $argv
58	112	> __fish_enable_bracketed_paste
54	54	-> printf "\e[?2004h"
58	571	> fish_mode_prompt
258	513	-> fish_default_mode_prompt
22	255	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
187	187	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
46	46	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
676	28126	> fish_prompt
68	68	-> set -l last_status $status
10	25	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
8	19	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	23	-> if not set -q __fish_git_prompt_color_branch...
16	16	--> not set -q __fish_git_prompt_color_branch
7	17	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
6	17	-> if not set -q __fish_git_prompt_char_upstream_behind...
11	11	--> not set -q __fish_git_prompt_char_upstream_behind
7	17	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
7	21	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
6	17	-> if not set -q __fish_git_prompt_char_dirtystate...
11	11	--> not set -q __fish_git_prompt_char_dirtystate
8	18	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
6	19	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
7	18	-> if not set -q __fish_git_prompt_char_cleanstate...
11	11	--> not set -q __fish_git_prompt_char_cleanstate
7	17	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	17	-> if not set -q __fish_git_prompt_color_stagedstate...
11	11	--> not set -q __fish_git_prompt_color_stagedstate
7	18	-> if not set -q __fish_git_prompt_color_invalidstate...
11	11	--> not set -q __fish_git_prompt_color_invalidstate
7	17	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	17	-> if not set -q __fish_prompt_normal...
11	11	--> not set -q __fish_prompt_normal
23	23	-> set -l color_cwd
17	17	-> set -l prefix
17	17	-> set -l suffix
25	71	-> switch "$USER"...
26	26	--> set color_cwd $fish_color_cwd
20	20	--> set suffix '$'
36	36	-> set_color $color_cwd
70	611	-> echo -n (prompt_pwd)
151	541	--> prompt_pwd
31	31	---> set -l options 'h/help'
37	37	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
84	84	---> set realhome ~
67	121	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
54	54	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	69	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
23	23	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
58	26095	-> printf '%s ' (__fish_vcs_prompt)
45	26037	--> __fish_vcs_prompt
687	4147	---> __fish_git_prompt
11	98	----> if not command -sq git...
87	87	-----> not command -sq git
99	3332	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3233	3233	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
23	23	----> test -n "$repo_info"
7	7	----> or return
337	410	---> __fish_hg_prompt
12	73	----> if not command -sq hg...
53	53	-----> not command -sq hg
8	8	-----> return 1
167	21435	---> __fish_svn_prompt
9	66	----> if not command -sq svn...
57	57	-----> not command -sq svn
105	21148	----> set -l checkout_info (command svn info ^/dev/null)
21043	21043	-----> command svn info ^/dev/null
15	54	----> if [ $status -ne 0 ]...
30	30	-----> [ $status -ne 0 ]
9	9	-----> return
13	129	-> if not test $last_status -eq 0...
18	18	--> not test $last_status -eq 0
98	98	--> set_color $fish_color_error
19	19	-> echo -n "$suffix "
15	15	-> set_color normal
16	16	> echo $_ " "
28	76	> __fish_pwd
48	48	-> pwd
411	856	> up-or-search
23	101	-> if commandline --search-mode...
78	78	--> commandline --search-mode
17	65	-> if commandline --paging-mode...
48	48	--> commandline --paging-mode
143	199	-> set lineno (commandline -L)
56	56	--> commandline -L
33	80	-> switch $lineno...
47	47	--> commandline -f history-search-backward
45	95	> __fish_disable_bracketed_paste 'cat profile.txt | grep ls-files'
50	50	-> printf "\e[?2004l"
39	39	> echo $_ " "
65	119	> __fish_pwd
54	54	-> pwd
1213	61763	> cat profile.txt | grep ls-files
60550	60550	-> command grep --color=auto $argv
70	717	> __fish_enable_bracketed_paste
647	647	-> printf "\e[?2004h"
53	1055	> fish_mode_prompt
390	1002	-> fish_default_mode_prompt
45	612	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
478	478	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
89	89	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
930	43435	> fish_prompt
132	132	-> set -l last_status $status
14	42	-> if not set -q __fish_git_prompt_show_informative_status...
28	28	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
7	19	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
7	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	25	-> if not set -q __fish_git_prompt_char_stagedstate...
17	17	--> not set -q __fish_git_prompt_char_stagedstate
9	25	-> if not set -q __fish_git_prompt_char_dirtystate...
16	16	--> not set -q __fish_git_prompt_char_dirtystate
10	27	-> if not set -q __fish_git_prompt_char_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_char_untrackedfiles
9	27	-> if not set -q __fish_git_prompt_char_conflictedstate...
18	18	--> not set -q __fish_git_prompt_char_conflictedstate
10	27	-> if not set -q __fish_git_prompt_char_cleanstate...
17	17	--> not set -q __fish_git_prompt_char_cleanstate
10	26	-> if not set -q __fish_git_prompt_color_dirtystate...
16	16	--> not set -q __fish_git_prompt_color_dirtystate
9	27	-> if not set -q __fish_git_prompt_color_stagedstate...
18	18	--> not set -q __fish_git_prompt_color_stagedstate
10	32	-> if not set -q __fish_git_prompt_color_invalidstate...
22	22	--> not set -q __fish_git_prompt_color_invalidstate
10	28	-> if not set -q __fish_git_prompt_color_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_color_untrackedfiles
10	26	-> if not set -q __fish_git_prompt_color_cleanstate...
16	16	--> not set -q __fish_git_prompt_color_cleanstate
11	28	-> if not set -q __fish_prompt_normal...
17	17	--> not set -q __fish_prompt_normal
28	28	-> set -l color_cwd
27	27	-> set -l prefix
26	26	-> set -l suffix
33	95	-> switch "$USER"...
34	34	--> set color_cwd $fish_color_cwd
28	28	--> set suffix '$'
94	94	-> set_color $color_cwd
97	1120	-> echo -n (prompt_pwd)
293	1023	--> prompt_pwd
40	40	---> set -l options 'h/help'
87	87	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
13	32	---> if set -q _flag_help...
19	19	----> set -q _flag_help
18	18	---> set -q fish_prompt_pwd_dir_length
28	28	---> or set -l fish_prompt_pwd_dir_length 1
103	103	---> set realhome ~
108	274	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
166	166	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
20	148	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
72	72	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
56	56	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
27	27	-> set_color normal
77	40398	-> printf '%s ' (__fish_vcs_prompt)
127	40321	--> __fish_vcs_prompt
833	6210	---> __fish_git_prompt
12	101	----> if not command -sq git...
89	89	-----> not command -sq git
120	5227	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
5107	5107	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
39	39	----> test -n "$repo_info"
10	10	----> or return
554	654	---> __fish_hg_prompt
16	100	----> if not command -sq hg...
72	72	-----> not command -sq hg
12	12	-----> return 1
485	33330	---> __fish_svn_prompt
9	79	----> if not command -sq svn...
70	70	-----> not command -sq svn
121	32706	----> set -l checkout_info (command svn info ^/dev/null)
32585	32585	-----> command svn info ^/dev/null
16	60	----> if [ $status -ne 0 ]...
34	34	-----> [ $status -ne 0 ]
10	10	-----> return
13	37	-> if not test $last_status -eq 0...
24	24	--> not test $last_status -eq 0
25	25	-> echo -n "$suffix "
32	32	-> set_color normal
22	22	> echo $_ " "
43	124	> __fish_pwd
81	81	-> pwd
262	594	> up-or-search
15	90	-> if commandline --search-mode...
75	75	--> commandline --search-mode
13	44	-> if commandline --paging-mode...
31	31	--> commandline --paging-mode
104	141	-> set lineno (commandline -L)
37	37	--> commandline -L
24	57	-> switch $lineno...
33	33	--> commandline -f history-search-backward
180	3040	> __fish_start_bracketed_paste
74	74	-> set -g __fish_last_bind_mode $fish_bind_mode
392	2786	-> __fish_commandline_is_singlequoted
47	47	--> set -l state normal
298	2143	--> for char in (commandline -ct | string split "")...
1796	1796	---> commandline -ct | string split ""
28	49	---> switch $char...
21	21	----> switch $state...
19	204	--> if contains -- $state single single-escaped...
156	156	---> contains -- $state single single-escaped
29	29	---> return 1
135	284	> __fish_stop_bracketed_paste
73	73	-> set fish_bind_mode $__fish_last_bind_mode
41	41	-> set -e __fish_paste_quoted
35	35	-> commandline -f force-repaint
38	292	> fish_mode_prompt
169	254	-> fish_default_mode_prompt
15	85	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
43	43	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
27	27	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
600	24328	> fish_prompt
33	33	-> set -l last_status $status
10	25	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
9	21	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	20	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
8	24	-> if not set -q __fish_git_prompt_showupstream...
16	16	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
7	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
7	20	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
7	19	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
7	27	-> if not set -q __fish_git_prompt_char_conflictedstate...
20	20	--> not set -q __fish_git_prompt_char_conflictedstate
20	30	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
7	16	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
7	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
7	19	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
16	16	-> set -l prefix
15	15	-> set -l suffix
21	60	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
27	27	-> set_color $color_cwd
53	532	-> echo -n (prompt_pwd)
135	479	--> prompt_pwd
25	25	---> set -l options 'h/help'
34	34	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	19	---> if set -q _flag_help...
11	11	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
60	60	---> set realhome ~
62	112	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
50	50	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	66	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
21	21	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
35	35	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
50	22590	-> printf '%s ' (__fish_vcs_prompt)
40	22540	--> __fish_vcs_prompt
537	3944	---> __fish_git_prompt
9	73	----> if not command -sq git...
64	64	-----> not command -sq git
97	3304	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3207	3207	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
6	6	----> or return
350	424	---> __fish_hg_prompt
12	74	----> if not command -sq hg...
54	54	-----> not command -sq hg
8	8	-----> return 1
167	18132	---> __fish_svn_prompt
9	66	----> if not command -sq svn...
57	57	-----> not command -sq svn
90	17858	----> set -l checkout_info (command svn info ^/dev/null)
17768	17768	-----> command svn info ^/dev/null
11	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
7	7	-----> return
8	22	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
14	14	> echo $_ " "
33	74	> __fish_pwd
41	41	-> pwd
71	103	> __fish_disable_bracketed_paste 'cat profile.txt | grep --exclude-standard'
32	32	-> printf "\e[?2004l"
35	35	> echo $_ " "
56	134	> __fish_pwd
78	78	-> pwd
1920	6800	> cat profile.txt | grep --exclude-standard
4880	4880	-> command grep --color=auto $argv
58	126	> __fish_enable_bracketed_paste
68	68	-> printf "\e[?2004h"
81	375	> fish_mode_prompt
137	294	-> fish_default_mode_prompt
13	157	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
121	121	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
23	23	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
510	33942	> fish_prompt
32	32	-> set -l last_status $status
8	21	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
7	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_color_branch...
10	10	--> not set -q __fish_git_prompt_color_branch
7	17	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
7	17	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
6	16	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
6	16	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
6	19	-> if not set -q __fish_git_prompt_char_dirtystate...
13	13	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
6	19	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
7	16	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
6	16	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
6	15	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
7	16	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
19	19	-> set -l prefix
14	14	-> set -l suffix
21	59	-> switch "$USER"...
21	21	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
29	29	-> set_color $color_cwd
54	572	-> echo -n (prompt_pwd)
189	518	--> prompt_pwd
25	25	---> set -l options 'h/help'
35	35	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
44	44	---> set realhome ~
62	114	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
52	52	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	64	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
18	18	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
57	32099	-> printf '%s ' (__fish_vcs_prompt)
47	32042	--> __fish_vcs_prompt
534	7410	---> __fish_git_prompt
8	84	----> if not command -sq git...
76	76	-----> not command -sq git
113	6757	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
6644	6644	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
8	8	----> or return
373	458	---> __fish_hg_prompt
13	85	----> if not command -sq hg...
63	63	-----> not command -sq hg
9	9	-----> return 1
222	24127	---> __fish_svn_prompt
11	82	----> if not command -sq svn...
71	71	-----> not command -sq svn
125	23764	----> set -l checkout_info (command svn info ^/dev/null)
23639	23639	-----> command svn info ^/dev/null
18	59	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
8	8	-----> return
14	237	-> if not test $last_status -eq 0...
20	20	--> not test $last_status -eq 0
203	203	--> set_color $fish_color_error
19	19	-> echo -n "$suffix "
14	14	-> set_color normal
15	15	> echo $_ " "
29	68	> __fish_pwd
39	39	-> pwd
125	365	> up-or-search
11	62	-> if commandline --search-mode...
51	51	--> commandline --search-mode
9	32	-> if commandline --paging-mode...
23	23	--> commandline --paging-mode
80	108	-> set lineno (commandline -L)
28	28	--> commandline -L
16	38	-> switch $lineno...
22	22	--> commandline -f history-search-backward
163	3711	> __fish_start_bracketed_paste
121	121	-> set -g __fish_last_bind_mode $fish_bind_mode
391	3427	-> __fish_commandline_is_singlequoted
53	53	--> set -l state normal
456	2773	--> for char in (commandline -ct | string split "")...
1618	1618	---> commandline -ct | string split ""
28	51	---> switch $char...
23	23	----> switch $state...
24	41	---> switch $char...
17	17	----> switch $state...
23	40	---> switch $char...
17	17	----> switch $state...
22	39	---> switch $char...
17	17	----> switch $state...
21	38	---> switch $char...
17	17	----> switch $state...
24	41	---> switch $char...
17	17	----> switch $state...
20	37	---> switch $char...
17	17	----> switch $state...
20	37	---> switch $char...
17	17	----> switch $state...
20	36	---> switch $char...
16	16	----> switch $state...
19	35	---> switch $char...
16	16	----> switch $state...
19	38	---> switch $char...
19	19	----> switch $state...
27	48	---> switch $char...
21	21	----> switch $state...
27	43	---> switch $char...
16	16	----> switch $state...
20	35	---> switch $char...
15	15	----> switch $state...
20	35	---> switch $char...
15	15	----> switch $state...
20	35	---> switch $char...
15	15	----> switch $state...
19	35	---> switch $char...
16	16	----> switch $state...
20	35	---> switch $char...
15	15	----> switch $state...
18	210	--> if contains -- $state single single-escaped...
161	161	---> contains -- $state single single-escaped
31	31	---> return 1
184	528	> __fish_stop_bracketed_paste
150	150	-> set fish_bind_mode $__fish_last_bind_mode
109	109	-> set -e __fish_paste_quoted
85	85	-> commandline -f force-repaint
82	580	> fish_mode_prompt
326	498	-> fish_default_mode_prompt
42	172	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
90	90	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
40	40	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
764	24788	> fish_prompt
58	58	-> set -l last_status $status
16	39	-> if not set -q __fish_git_prompt_show_informative_status...
23	23	--> not set -q __fish_git_prompt_show_informative_status
11	29	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	25	-> if not set -q __fish_git_prompt_color_branch...
16	16	--> not set -q __fish_git_prompt_color_branch
10	27	-> if not set -q __fish_git_prompt_showupstream...
17	17	--> not set -q __fish_git_prompt_showupstream
8	27	-> if not set -q __fish_git_prompt_char_upstream_ahead...
19	19	--> not set -q __fish_git_prompt_char_upstream_ahead
10	26	-> if not set -q __fish_git_prompt_char_upstream_behind...
16	16	--> not set -q __fish_git_prompt_char_upstream_behind
10	26	-> if not set -q __fish_git_prompt_char_upstream_prefix...
16	16	--> not set -q __fish_git_prompt_char_upstream_prefix
10	26	-> if not set -q __fish_git_prompt_char_stagedstate...
16	16	--> not set -q __fish_git_prompt_char_stagedstate
11	26	-> if not set -q __fish_git_prompt_char_dirtystate...
15	15	--> not set -q __fish_git_prompt_char_dirtystate
10	26	-> if not set -q __fish_git_prompt_char_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_char_untrackedfiles
9	26	-> if not set -q __fish_git_prompt_char_conflictedstate...
17	17	--> not set -q __fish_git_prompt_char_conflictedstate
9	24	-> if not set -q __fish_git_prompt_char_cleanstate...
15	15	--> not set -q __fish_git_prompt_char_cleanstate
11	43	-> if not set -q __fish_git_prompt_color_dirtystate...
32	32	--> not set -q __fish_git_prompt_color_dirtystate
11	28	-> if not set -q __fish_git_prompt_color_stagedstate...
17	17	--> not set -q __fish_git_prompt_color_stagedstate
10	27	-> if not set -q __fish_git_prompt_color_invalidstate...
17	17	--> not set -q __fish_git_prompt_color_invalidstate
10	27	-> if not set -q __fish_git_prompt_color_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_color_untrackedfiles
9	25	-> if not set -q __fish_git_prompt_color_cleanstate...
16	16	--> not set -q __fish_git_prompt_color_cleanstate
11	27	-> if not set -q __fish_prompt_normal...
16	16	--> not set -q __fish_prompt_normal
50	50	-> set -l color_cwd
138	138	-> set -l prefix
39	39	-> set -l suffix
39	110	-> switch "$USER"...
41	41	--> set color_cwd $fish_color_cwd
30	30	--> set suffix '$'
60	60	-> set_color $color_cwd
92	777	-> echo -n (prompt_pwd)
245	685	--> prompt_pwd
35	35	---> set -l options 'h/help'
40	40	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
10	25	---> if set -q _flag_help...
15	15	----> set -q _flag_help
13	13	---> set -q fish_prompt_pwd_dir_length
21	21	---> or set -l fish_prompt_pwd_dir_length 1
82	82	---> set realhome ~
79	140	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
61	61	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
15	84	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
26	26	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
43	43	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
21	21	-> set_color normal
57	22134	-> printf '%s ' (__fish_vcs_prompt)
45	22077	--> __fish_vcs_prompt
672	4446	---> __fish_git_prompt
12	95	----> if not command -sq git...
83	83	-----> not command -sq git
100	3647	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3547	3547	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
8	8	----> or return
314	386	---> __fish_hg_prompt
10	72	----> if not command -sq hg...
53	53	-----> not command -sq hg
9	9	-----> return 1
166	17200	---> __fish_svn_prompt
9	66	----> if not command -sq svn...
57	57	-----> not command -sq svn
109	16928	----> set -l checkout_info (command svn info ^/dev/null)
16819	16819	-----> command svn info ^/dev/null
11	40	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
10	103	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
78	78	--> set_color $fish_color_error
17	17	-> echo -n "$suffix "
13	13	-> set_color normal
14	14	> echo $_ " "
33	68	> __fish_pwd
35	35	-> pwd
101	187	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard'
86	86	-> printf "\e[?2004l"
62	62	> echo $_ " "
116	288	> __fish_pwd
172	172	-> pwd
2913	29098	> cat profile.txt | grep -exclude-standard
26185	26185	-> command grep --color=auto $argv
49	87	> __fish_enable_bracketed_paste
38	38	-> printf "\e[?2004h"
42	435	> fish_mode_prompt
215	393	-> fish_default_mode_prompt
16	178	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
132	132	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
30	30	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
732	35904	> fish_prompt
63	63	-> set -l last_status $status
10	26	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	23	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
10	23	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
9	25	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
9	22	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
8	21	-> if not set -q __fish_git_prompt_char_upstream_prefix...
13	13	--> not set -q __fish_git_prompt_char_upstream_prefix
9	22	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
9	22	-> if not set -q __fish_git_prompt_char_dirtystate...
13	13	--> not set -q __fish_git_prompt_char_dirtystate
9	22	-> if not set -q __fish_git_prompt_char_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_char_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_char_conflictedstate...
13	13	--> not set -q __fish_git_prompt_char_conflictedstate
9	24	-> if not set -q __fish_git_prompt_char_cleanstate...
15	15	--> not set -q __fish_git_prompt_char_cleanstate
8	21	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
9	22	-> if not set -q __fish_git_prompt_color_stagedstate...
13	13	--> not set -q __fish_git_prompt_color_stagedstate
10	22	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
10	22	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_cleanstate...
13	13	--> not set -q __fish_git_prompt_color_cleanstate
9	22	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
20	20	-> set -l prefix
19	19	-> set -l suffix
27	80	-> switch "$USER"...
28	28	--> set color_cwd $fish_color_cwd
25	25	--> set suffix '$'
58	58	-> set_color $color_cwd
63	863	-> echo -n (prompt_pwd)
270	800	--> prompt_pwd
33	33	---> set -l options 'h/help'
70	70	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
12	27	---> if set -q _flag_help...
15	15	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
24	24	---> or set -l fish_prompt_pwd_dir_length 1
70	70	---> set realhome ~
77	188	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
111	111	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	104	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
46	46	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
44	44	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
22	22	-> set_color normal
147	33387	-> printf '%s ' (__fish_vcs_prompt)
200	33240	--> __fish_vcs_prompt
533	4088	---> __fish_git_prompt
10	92	----> if not command -sq git...
82	82	-----> not command -sq git
112	3436	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3324	3324	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
6	6	----> or return
464	540	---> __fish_hg_prompt
13	76	----> if not command -sq hg...
54	54	-----> not command -sq hg
9	9	-----> return 1
230	28412	---> __fish_svn_prompt
8	59	----> if not command -sq svn...
51	51	-----> not command -sq svn
252	27969	----> set -l checkout_info (command svn info ^/dev/null)
27717	27717	-----> command svn info ^/dev/null
42	154	----> if [ $status -ne 0 ]...
89	89	-----> [ $status -ne 0 ]
23	23	-----> return
24	85	-> if not test $last_status -eq 0...
61	61	--> not test $last_status -eq 0
65	65	-> echo -n "$suffix "
84	84	-> set_color normal
63	63	> echo $_ " "
104	372	> __fish_pwd
268	268	-> pwd
286	709	> up-or-search
18	115	-> if commandline --search-mode...
97	97	--> commandline --search-mode
16	55	-> if commandline --paging-mode...
39	39	--> commandline --paging-mode
138	200	-> set lineno (commandline -L)
62	62	--> commandline -L
22	53	-> switch $lineno...
31	31	--> commandline -f history-search-backward
63	134	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard -e -other'
71	71	-> printf "\e[?2004l"
56	56	> echo $_ " "
91	166	> __fish_pwd
75	75	-> pwd
1845	76741	> cat profile.txt | grep -exclude-standard -e -other
74896	74896	-> command grep --color=auto $argv
57	121	> __fish_enable_bracketed_paste
64	64	-> printf "\e[?2004h"
41	537	> fish_mode_prompt
257	496	-> fish_default_mode_prompt
14	239	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
195	195	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
30	30	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
758	35899	> fish_prompt
82	82	-> set -l last_status $status
11	28	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
8	27	-> if not set -q __fish_git_prompt_showupstream...
19	19	--> not set -q __fish_git_prompt_showupstream
9	22	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
10	22	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
8	21	-> if not set -q __fish_git_prompt_char_upstream_prefix...
13	13	--> not set -q __fish_git_prompt_char_upstream_prefix
8	21	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
9	21	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
9	27	-> if not set -q __fish_git_prompt_char_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_char_untrackedfiles
38	163	-> if not set -q __fish_git_prompt_char_conflictedstate...
125	125	--> not set -q __fish_git_prompt_char_conflictedstate
10	32	-> if not set -q __fish_git_prompt_char_cleanstate...
22	22	--> not set -q __fish_git_prompt_char_cleanstate
9	23	-> if not set -q __fish_git_prompt_color_dirtystate...
14	14	--> not set -q __fish_git_prompt_color_dirtystate
10	31	-> if not set -q __fish_git_prompt_color_stagedstate...
21	21	--> not set -q __fish_git_prompt_color_stagedstate
20	535	-> if not set -q __fish_git_prompt_color_invalidstate...
515	515	--> not set -q __fish_git_prompt_color_invalidstate
11	33	-> if not set -q __fish_git_prompt_color_untrackedfiles...
22	22	--> not set -q __fish_git_prompt_color_untrackedfiles
9	23	-> if not set -q __fish_git_prompt_color_cleanstate...
14	14	--> not set -q __fish_git_prompt_color_cleanstate
16	29	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
24	24	-> set -l color_cwd
24	24	-> set -l prefix
19	19	-> set -l suffix
30	143	-> switch "$USER"...
85	85	--> set color_cwd $fish_color_cwd
28	28	--> set suffix '$'
82	82	-> set_color $color_cwd
170	1392	-> echo -n (prompt_pwd)
379	1222	--> prompt_pwd
74	74	---> set -l options 'h/help'
75	75	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
17	33	---> if set -q _flag_help...
16	16	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
30	30	---> or set -l fish_prompt_pwd_dir_length 1
154	154	---> set realhome ~
111	336	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
225	225	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
17	127	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
61	61	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
49	49	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
33	33	-> set_color normal
76	32117	-> printf '%s ' (__fish_vcs_prompt)
169	32041	--> __fish_vcs_prompt
691	8306	---> __fish_git_prompt
11	126	----> if not command -sq git...
115	115	-----> not command -sq git
114	7459	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
7345	7345	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
6	6	----> or return
323	391	---> __fish_hg_prompt
11	68	----> if not command -sq hg...
49	49	-----> not command -sq hg
8	8	-----> return 1
318	23175	---> __fish_svn_prompt
9	89	----> if not command -sq svn...
80	80	-----> not command -sq svn
110	22707	----> set -l checkout_info (command svn info ^/dev/null)
22597	22597	-----> command svn info ^/dev/null
18	61	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
10	10	-----> return
12	37	-> if not test $last_status -eq 0...
25	25	--> not test $last_status -eq 0
30	30	-> echo -n "$suffix "
54	54	-> set_color normal
21	21	> echo $_ " "
45	112	> __fish_pwd
67	67	-> pwd
301	730	> up-or-search
18	109	-> if commandline --search-mode...
91	91	--> commandline --search-mode
16	54	-> if commandline --paging-mode...
38	38	--> commandline --paging-mode
153	200	-> set lineno (commandline -L)
47	47	--> commandline -L
27	66	-> switch $lineno...
39	39	--> commandline -f history-search-backward
190	3101	> __fish_start_bracketed_paste
74	74	-> set -g __fish_last_bind_mode $fish_bind_mode
437	2837	-> __fish_commandline_is_singlequoted
62	62	--> set -l state normal
433	2194	--> for char in (commandline -ct | string split "")...
1713	1713	---> commandline -ct | string split ""
28	48	---> switch $char...
20	20	----> switch $state...
17	144	--> if contains -- $state single single-escaped...
99	99	---> contains -- $state single single-escaped
28	28	---> return 1
130	275	> __fish_stop_bracketed_paste
70	70	-> set fish_bind_mode $__fish_last_bind_mode
40	40	-> set -e __fish_paste_quoted
35	35	-> commandline -f force-repaint
47	359	> fish_mode_prompt
202	312	-> fish_default_mode_prompt
13	110	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
69	69	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
28	28	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
630	24621	> fish_prompt
27	27	-> set -l last_status $status
7	20	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
6	17	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	18	-> if not set -q __fish_git_prompt_color_branch...
10	10	--> not set -q __fish_git_prompt_color_branch
6	16	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
6	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
11	11	--> not set -q __fish_git_prompt_char_upstream_ahead
6	16	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
6	16	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
6	16	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
6	19	-> if not set -q __fish_git_prompt_char_dirtystate...
13	13	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
7	16	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
8	17	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
7	16	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
7	16	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
8	17	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
14	14	-> set -l prefix
14	14	-> set -l suffix
21	59	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
16	16	--> set suffix '$'
54	54	-> set_color $color_cwd
76	768	-> echo -n (prompt_pwd)
168	692	--> prompt_pwd
26	26	---> set -l options 'h/help'
53	53	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
59	59	---> set realhome ~
85	142	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
57	57	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	196	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
140	140	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
42	42	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
88	22663	-> printf '%s ' (__fish_vcs_prompt)
83	22575	--> __fish_vcs_prompt
679	4065	---> __fish_git_prompt
10	79	----> if not command -sq git...
69	69	-----> not command -sq git
97	3278	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3181	3181	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
22	22	----> test -n "$repo_info"
7	7	----> or return
372	441	---> __fish_hg_prompt
10	69	----> if not command -sq hg...
50	50	-----> not command -sq hg
9	9	-----> return 1
198	17986	---> __fish_svn_prompt
9	63	----> if not command -sq svn...
54	54	-----> not command -sq svn
90	17684	----> set -l checkout_info (command svn info ^/dev/null)
17594	17594	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
15	15	> echo $_ " "
71	119	> __fish_pwd
48	48	-> pwd
1114	2582	> source /usr/local/Cellar/fish/2.7.1/share/fish/completions/string.fish
79	79	-> complete -f -c string
84	84	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and not contains -- (commandline -opc)[2] escape" -s q -l quiet -d "Do not print output"
45	45	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "length"
43	43	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "sub"
66	66	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] sub" -s s -l start -a "(seq 1 10)"
63	63	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] sub" -s l -l length -a "(seq 1 10)"
40	40	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "split"
73	73	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] split" -s m -l max -a "(seq 1 10)" -d "Specify maximum number of splits"
56	56	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] split" -s r -l right -d "Split right-to-left"
39	39	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "join"
37	37	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "trim"
53	53	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] trim" -s l -l left -d "Trim only leading characters"
56	56	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] trim" -s r -l right -d "Trim only trailing characters"
53	53	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] trim" -s c -l chars -d "Specify the chars to trim (default: whitespace)"
39	39	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "escape"
57	57	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] escape" -s n -l no-quoted -d "Escape with \\ instead of quoting"
39	39	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "match"
53	53	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] match" -s n -l index -d "Report index and length of the matches"
54	54	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] match" -s v -l invert -d "Report only non-matching input"
38	38	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "replace"
55	55	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] match replace" -s a -l all -d "Report all matches per line/string"
55	55	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] match replace" -s i -l ignore-case -d "Case insensitive"
62	62	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] match replace" -s r -l regex -d "Use regex instead of globs"
39	39	-> complete -f -c string -n "test (count (commandline -opc)) -lt 2" -a "repeat"
65	65	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] repeat" -s n -l count -a "(seq 1 10)" -d "Repetition count"
69	69	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] repeat" -s m -l max -a "(seq 1 10)" -d "Maximum number of printed char"
56	56	-> complete -f -c string -n "test (count (commandline -opc)) -ge 2; and contains -- (commandline -opc)[2] repeat" -s N -l no-newline -d "Remove newline"
83	171	> __fish_disable_bracketed_paste 'cat profile.txt | grep command -e git -e ls-files -e -others -e -exclude-standard -e wc -e  string -e trim'
88	88	-> printf "\e[?2004l"
69	69	> echo $_ " "
118	216	> __fish_pwd
98	98	-> pwd
2527	7769	> cat profile.txt | grep command -e git -e ls-files -e -others -e -exclude-standard -e wc -e  string -e trim
5242	5242	-> command grep --color=auto $argv
55	101	> __fish_enable_bracketed_paste
46	46	-> printf "\e[?2004h"
50	501	> fish_mode_prompt
252	451	-> fish_default_mode_prompt
16	199	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
149	149	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
34	34	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
774	27337	> fish_prompt
71	71	-> set -l last_status $status
13	30	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
11	26	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	26	-> if not set -q __fish_git_prompt_color_branch...
16	16	--> not set -q __fish_git_prompt_color_branch
11	25	-> if not set -q __fish_git_prompt_showupstream...
14	14	--> not set -q __fish_git_prompt_showupstream
11	25	-> if not set -q __fish_git_prompt_char_upstream_ahead...
14	14	--> not set -q __fish_git_prompt_char_upstream_ahead
10	24	-> if not set -q __fish_git_prompt_char_upstream_behind...
14	14	--> not set -q __fish_git_prompt_char_upstream_behind
9	24	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
9	24	-> if not set -q __fish_git_prompt_char_stagedstate...
15	15	--> not set -q __fish_git_prompt_char_stagedstate
8	26	-> if not set -q __fish_git_prompt_char_dirtystate...
18	18	--> not set -q __fish_git_prompt_char_dirtystate
11	26	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
10	25	-> if not set -q __fish_git_prompt_char_conflictedstate...
15	15	--> not set -q __fish_git_prompt_char_conflictedstate
10	24	-> if not set -q __fish_git_prompt_char_cleanstate...
14	14	--> not set -q __fish_git_prompt_char_cleanstate
10	25	-> if not set -q __fish_git_prompt_color_dirtystate...
15	15	--> not set -q __fish_git_prompt_color_dirtystate
10	24	-> if not set -q __fish_git_prompt_color_stagedstate...
14	14	--> not set -q __fish_git_prompt_color_stagedstate
9	24	-> if not set -q __fish_git_prompt_color_invalidstate...
15	15	--> not set -q __fish_git_prompt_color_invalidstate
11	28	-> if not set -q __fish_git_prompt_color_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_color_untrackedfiles
10	24	-> if not set -q __fish_git_prompt_color_cleanstate...
14	14	--> not set -q __fish_git_prompt_color_cleanstate
10	24	-> if not set -q __fish_prompt_normal...
14	14	--> not set -q __fish_prompt_normal
23	23	-> set -l color_cwd
23	23	-> set -l prefix
22	22	-> set -l suffix
30	90	-> switch "$USER"...
32	32	--> set color_cwd $fish_color_cwd
28	28	--> set suffix '$'
68	68	-> set_color $color_cwd
74	919	-> echo -n (prompt_pwd)
248	845	--> prompt_pwd
36	36	---> set -l options 'h/help'
77	77	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
12	29	---> if set -q _flag_help...
17	17	----> set -q _flag_help
16	16	---> set -q fish_prompt_pwd_dir_length
25	25	---> or set -l fish_prompt_pwd_dir_length 1
80	80	---> set realhome ~
87	213	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
126	126	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
17	121	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
53	53	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
51	51	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
25	25	-> set_color normal
68	24693	-> printf '%s ' (__fish_vcs_prompt)
107	24625	--> __fish_vcs_prompt
845	5551	---> __fish_git_prompt
13	99	----> if not command -sq git...
86	86	-----> not command -sq git
120	4571	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4451	4451	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
29	29	----> test -n "$repo_info"
7	7	----> or return
368	431	---> __fish_hg_prompt
8	63	----> if not command -sq hg...
47	47	-----> not command -sq hg
8	8	-----> return 1
180	18536	---> __fish_svn_prompt
6	53	----> if not command -sq svn...
47	47	-----> not command -sq svn
103	18250	----> set -l checkout_info (command svn info ^/dev/null)
18147	18147	-----> command svn info ^/dev/null
17	53	----> if [ $status -ne 0 ]...
28	28	-----> [ $status -ne 0 ]
8	8	-----> return
15	134	-> if not test $last_status -eq 0...
21	21	--> not test $last_status -eq 0
98	98	--> set_color $fish_color_error
22	22	-> echo -n "$suffix "
19	19	-> set_color normal
19	19	> echo $_ " "
40	88	> __fish_pwd
48	48	-> pwd
396	1049	> up-or-search
22	137	-> if commandline --search-mode...
115	115	--> commandline --search-mode
19	67	-> if commandline --paging-mode...
48	48	--> commandline --paging-mode
245	332	-> set lineno (commandline -L)
87	87	--> commandline -L
50	117	-> switch $lineno...
67	67	--> commandline -f history-search-backward
77	108	> __fish_disable_bracketed_paste 'cat profile.txt | grep command -e git -e ls-files -e -others -e -exclude-standard -e wc -e  string -e trim'
31	31	-> printf "\e[?2004l"
32	32	> echo $_ " "
57	141	> __fish_pwd
84	84	-> pwd
2088	5907	> cat profile.txt | grep command -e git -e ls-files -e -others -e -exclude-standard -e wc -e  string -e trim
3819	3819	-> command grep --color=auto $argv
47	91	> __fish_enable_bracketed_paste
44	44	-> printf "\e[?2004h"
45	376	> fish_mode_prompt
166	331	-> fish_default_mode_prompt
14	165	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
122	122	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
29	29	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
613	32324	> fish_prompt
38	38	-> set -l last_status $status
10	26	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
9	26	-> if not set -q __fish_git_prompt_showupstream...
17	17	--> not set -q __fish_git_prompt_showupstream
7	20	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
7	23	-> if not set -q __fish_git_prompt_char_upstream_prefix...
16	16	--> not set -q __fish_git_prompt_char_upstream_prefix
7	32	-> if not set -q __fish_git_prompt_char_stagedstate...
25	25	--> not set -q __fish_git_prompt_char_stagedstate
6	15	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
7	19	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
8	17	-> if not set -q __fish_git_prompt_color_dirtystate...
9	9	--> not set -q __fish_git_prompt_color_dirtystate
7	16	-> if not set -q __fish_git_prompt_color_stagedstate...
9	9	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
6	15	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
16	16	-> set -l prefix
14	14	-> set -l suffix
21	60	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
28	28	-> set_color $color_cwd
54	531	-> echo -n (prompt_pwd)
132	477	--> prompt_pwd
25	25	---> set -l options 'h/help'
31	31	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	19	---> if set -q _flag_help...
11	11	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
60	60	---> set realhome ~
61	115	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
54	54	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	67	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
21	21	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
61	30387	-> printf '%s ' (__fish_vcs_prompt)
48	30326	--> __fish_vcs_prompt
535	3987	---> __fish_git_prompt
9	78	----> if not command -sq git...
69	69	-----> not command -sq git
114	3335	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3221	3221	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
30	30	----> test -n "$repo_info"
9	9	----> or return
522	695	---> __fish_hg_prompt
21	173	----> if not command -sq hg...
136	136	-----> not command -sq hg
16	16	-----> return 1
242	25596	---> __fish_svn_prompt
21	182	----> if not command -sq svn...
161	161	-----> not command -sq svn
158	25115	----> set -l checkout_info (command svn info ^/dev/null)
24957	24957	-----> command svn info ^/dev/null
17	57	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
9	9	-----> return
14	216	-> if not test $last_status -eq 0...
24	24	--> not test $last_status -eq 0
178	178	--> set_color $fish_color_error
19	19	-> echo -n "$suffix "
14	14	-> set_color normal
15	15	> echo $_ " "
30	75	> __fish_pwd
45	45	-> pwd
220	602	> up-or-search
19	86	-> if commandline --search-mode...
67	67	--> commandline --search-mode
17	56	-> if commandline --paging-mode...
39	39	--> commandline --paging-mode
123	169	-> set lineno (commandline -L)
46	46	--> commandline -L
27	71	-> switch $lineno...
44	44	--> commandline -f history-search-backward
184	353	> up-or-search
30	169	-> if commandline --search-mode...
67	67	--> commandline --search-mode
43	43	--> commandline -f history-search-backward
29	29	--> return
296	453	> down-or-search
30	157	-> if commandline --search-mode...
56	56	--> commandline --search-mode
42	42	--> commandline -f history-search-forward
29	29	--> return
185	354	> up-or-search
30	169	-> if commandline --search-mode...
67	67	--> commandline --search-mode
43	43	--> commandline -f history-search-backward
29	29	--> return
76	118	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard -e -other'
42	42	-> printf "\e[?2004l"
39	39	> echo $_ " "
55	134	> __fish_pwd
79	79	-> pwd
1755	75753	> cat profile.txt | grep -exclude-standard -e -other
73998	73998	-> command grep --color=auto $argv
273	355	> __fish_enable_bracketed_paste
82	82	-> printf "\e[?2004h"
67	638	> fish_mode_prompt
227	571	-> fish_default_mode_prompt
24	344	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
273	273	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
47	47	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
789	31211	> fish_prompt
83	83	-> set -l last_status $status
19	47	-> if not set -q __fish_git_prompt_show_informative_status...
28	28	--> not set -q __fish_git_prompt_show_informative_status
15	41	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
26	26	--> not set -q __fish_git_prompt_hide_untrackedfiles
40	62	-> if not set -q __fish_git_prompt_color_branch...
22	22	--> not set -q __fish_git_prompt_color_branch
14	41	-> if not set -q __fish_git_prompt_showupstream...
27	27	--> not set -q __fish_git_prompt_showupstream
15	38	-> if not set -q __fish_git_prompt_char_upstream_ahead...
23	23	--> not set -q __fish_git_prompt_char_upstream_ahead
14	35	-> if not set -q __fish_git_prompt_char_upstream_behind...
21	21	--> not set -q __fish_git_prompt_char_upstream_behind
15	46	-> if not set -q __fish_git_prompt_char_upstream_prefix...
31	31	--> not set -q __fish_git_prompt_char_upstream_prefix
14	39	-> if not set -q __fish_git_prompt_char_stagedstate...
25	25	--> not set -q __fish_git_prompt_char_stagedstate
14	34	-> if not set -q __fish_git_prompt_char_dirtystate...
20	20	--> not set -q __fish_git_prompt_char_dirtystate
13	35	-> if not set -q __fish_git_prompt_char_untrackedfiles...
22	22	--> not set -q __fish_git_prompt_char_untrackedfiles
13	34	-> if not set -q __fish_git_prompt_char_conflictedstate...
21	21	--> not set -q __fish_git_prompt_char_conflictedstate
12	33	-> if not set -q __fish_git_prompt_char_cleanstate...
21	21	--> not set -q __fish_git_prompt_char_cleanstate
13	35	-> if not set -q __fish_git_prompt_color_dirtystate...
22	22	--> not set -q __fish_git_prompt_color_dirtystate
11	42	-> if not set -q __fish_git_prompt_color_stagedstate...
31	31	--> not set -q __fish_git_prompt_color_stagedstate
12	33	-> if not set -q __fish_git_prompt_color_invalidstate...
21	21	--> not set -q __fish_git_prompt_color_invalidstate
13	34	-> if not set -q __fish_git_prompt_color_untrackedfiles...
21	21	--> not set -q __fish_git_prompt_color_untrackedfiles
13	34	-> if not set -q __fish_git_prompt_color_cleanstate...
21	21	--> not set -q __fish_git_prompt_color_cleanstate
11	34	-> if not set -q __fish_prompt_normal...
23	23	--> not set -q __fish_prompt_normal
35	35	-> set -l color_cwd
30	30	-> set -l prefix
27	27	-> set -l suffix
41	134	-> switch "$USER"...
45	45	--> set color_cwd $fish_color_cwd
48	48	--> set suffix '$'
67	67	-> set_color $color_cwd
65	667	-> echo -n (prompt_pwd)
193	602	--> prompt_pwd
33	33	---> set -l options 'h/help'
40	40	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
10	25	---> if set -q _flag_help...
15	15	----> set -q _flag_help
14	14	---> set -q fish_prompt_pwd_dir_length
22	22	---> or set -l fish_prompt_pwd_dir_length 1
56	56	---> set realhome ~
75	136	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
61	61	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	83	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
24	24	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
45	45	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
22	22	-> set_color normal
56	28598	-> printf '%s ' (__fish_vcs_prompt)
48	28542	--> __fish_vcs_prompt
734	4642	---> __fish_git_prompt
11	102	----> if not command -sq git...
91	91	-----> not command -sq git
131	3772	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3641	3641	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
7	7	----> or return
375	456	---> __fish_hg_prompt
10	81	----> if not command -sq hg...
63	63	-----> not command -sq hg
8	8	-----> return 1
150	23396	---> __fish_svn_prompt
8	69	----> if not command -sq svn...
61	61	-----> not command -sq svn
101	23133	----> set -l checkout_info (command svn info ^/dev/null)
23032	23032	-----> command svn info ^/dev/null
13	44	----> if [ $status -ne 0 ]...
25	25	-----> [ $status -ne 0 ]
6	6	-----> return
8	24	-> if not test $last_status -eq 0...
16	16	--> not test $last_status -eq 0
16	16	-> echo -n "$suffix "
22	22	-> set_color normal
14	14	> echo $_ " "
28	81	> __fish_pwd
53	53	-> pwd
70	149	> __fish_disable_bracketed_paste config.ifsh
79	79	-> printf "\e[?2004l"
66	66	> echo $_ " "
-5499	197	> __fish_pwd
88	88	-> pwd
59	5608	-> __fish_command_not_found_handler config.ifsh
164	5549	--> __fish_default_command_not_found_handler $argv[1]
5385	5385	---> echo "fish: Unknown command '$argv'" >&2
50	90	> __fish_enable_bracketed_paste
40	40	-> printf "\e[?2004h"
41	361	> fish_mode_prompt
208	320	-> fish_default_mode_prompt
13	112	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
70	70	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
29	29	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
592	39428	> fish_prompt
66	66	-> set -l last_status $status
11	26	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
9	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
8	21	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
9	21	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
23	36	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
6	16	-> if not set -q __fish_git_prompt_char_dirtystate...
10	10	--> not set -q __fish_git_prompt_char_dirtystate
6	15	-> if not set -q __fish_git_prompt_char_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_char_untrackedfiles
6	21	-> if not set -q __fish_git_prompt_char_conflictedstate...
15	15	--> not set -q __fish_git_prompt_char_conflictedstate
7	17	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	16	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
7	16	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
8	17	-> if not set -q __fish_git_prompt_color_untrackedfiles...
9	9	--> not set -q __fish_git_prompt_color_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
7	17	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
15	15	-> set -l prefix
15	15	-> set -l suffix
21	62	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
19	19	--> set suffix '$'
53	53	-> set_color $color_cwd
54	677	-> echo -n (prompt_pwd)
176	623	--> prompt_pwd
26	26	---> set -l options 'h/help'
58	58	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
63	63	---> set realhome ~
66	166	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
100	100	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
11	86	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
39	39	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
57	37382	-> printf '%s ' (__fish_vcs_prompt)
78	37325	--> __fish_vcs_prompt
578	7062	---> __fish_git_prompt
9	76	----> if not command -sq git...
67	67	-----> not command -sq git
93	6381	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
6288	6288	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
6	6	----> or return
305	367	---> __fish_hg_prompt
9	62	----> if not command -sq hg...
45	45	-----> not command -sq hg
8	8	-----> return 1
180	29818	---> __fish_svn_prompt
7	54	----> if not command -sq svn...
47	47	-----> not command -sq svn
146	29530	----> set -l checkout_info (command svn info ^/dev/null)
29384	29384	-----> command svn info ^/dev/null
14	54	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
7	7	-----> return
13	141	-> if not test $last_status -eq 0...
16	16	--> not test $last_status -eq 0
112	112	--> set_color $fish_color_error
18	18	-> echo -n "$suffix "
13	13	-> set_color normal
23	23	> echo $_ " "
33	85	> __fish_pwd
52	52	-> pwd
78	112	> __fish_disable_bracketed_paste 'fish_config '
34	34	-> printf "\e[?2004l"
37	37	> echo $_ " "
51	114	> __fish_pwd
63	63	-> pwd
383	201031091	> fish_config
4569	4598	-> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/fish_config.fish
29	29	--> function fish_config --description "Launch fish's web based configuration"...
61	61	-> set -lx __fish_bin_dir $__fish_bin_dir
220	201026049	-> if command -sq python3...
86	86	--> command -sq python3
201025743	201025743	--> python3 "$__fish_datadir/tools/web_config/webconfig.py" $argv
60	169	> __fish_enable_bracketed_paste
109	109	-> printf "\e[?2004h"
54	635	> fish_mode_prompt
273	581	-> fish_default_mode_prompt
25	308	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
250	250	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
33	33	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
642	74614	> fish_prompt
68	68	-> set -l last_status $status
11	27	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
9	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_color_branch...
12	12	--> not set -q __fish_git_prompt_color_branch
8	21	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
9	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
12	12	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
7	20	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
9	20	-> if not set -q __fish_git_prompt_char_dirtystate...
11	11	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	27	-> if not set -q __fish_git_prompt_char_conflictedstate...
19	19	--> not set -q __fish_git_prompt_char_conflictedstate
9	21	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
7	20	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
8	20	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
8	20	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
8	24	-> if not set -q __fish_git_prompt_color_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_color_untrackedfiles
7	20	-> if not set -q __fish_git_prompt_color_cleanstate...
13	13	--> not set -q __fish_git_prompt_color_cleanstate
7	20	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
20	20	-> set -l color_cwd
19	19	-> set -l prefix
18	18	-> set -l suffix
26	75	-> switch "$USER"...
28	28	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
79	79	-> set_color $color_cwd
76	700	-> echo -n (prompt_pwd)
176	624	--> prompt_pwd
26	26	---> set -l options 'h/help'
57	57	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
9	21	---> if set -q _flag_help...
12	12	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
63	63	---> set realhome ~
65	165	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
100	100	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	88	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
41	41	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
35	35	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
56	72523	-> printf '%s ' (__fish_vcs_prompt)
81	72467	--> __fish_vcs_prompt
580	18288	---> __fish_git_prompt
9	73	----> if not command -sq git...
64	64	-----> not command -sq git
111	17599	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
17488	17488	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
29	29	----> test -n "$repo_info"
7	7	----> or return
431	512	---> __fish_hg_prompt
14	81	----> if not command -sq hg...
58	58	-----> not command -sq hg
9	9	-----> return 1
292	53586	---> __fish_svn_prompt
10	82	----> if not command -sq svn...
72	72	-----> not command -sq svn
143	53157	----> set -l checkout_info (command svn info ^/dev/null)
53014	53014	-----> command svn info ^/dev/null
17	55	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
7	7	-----> return
9	27	-> if not test $last_status -eq 0...
18	18	--> not test $last_status -eq 0
18	18	-> echo -n "$suffix "
22	22	-> set_color normal
18	18	> echo $_ " "
99	161	> __fish_pwd
62	62	-> pwd
253	517	> up-or-search
12	79	-> if commandline --search-mode...
67	67	--> commandline --search-mode
9	33	-> if commandline --paging-mode...
24	24	--> commandline --paging-mode
84	112	-> set lineno (commandline -L)
28	28	--> commandline -L
16	40	-> switch $lineno...
24	24	--> commandline -f history-search-backward
195	365	> up-or-search
31	170	-> if commandline --search-mode...
67	67	--> commandline --search-mode
43	43	--> commandline -f history-search-backward
29	29	--> return
188	379	> up-or-search
36	191	-> if commandline --search-mode...
68	68	--> commandline --search-mode
49	49	--> commandline -f history-search-backward
38	38	--> return
76	118	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard -count'
42	42	-> printf "\e[?2004l"
42	42	> echo $_ " "
51	140	> __fish_pwd
89	89	-> pwd
6193	10577	> cat profile.txt | grep -exclude-standard -count
4384	4384	-> command grep --color=auto $argv
44	84	> __fish_enable_bracketed_paste
40	40	-> printf "\e[?2004h"
46	440	> fish_mode_prompt
204	394	-> fish_default_mode_prompt
16	190	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
139	139	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
35	35	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
863	26734	> fish_prompt
43	43	-> set -l last_status $status
13	31	-> if not set -q __fish_git_prompt_show_informative_status...
18	18	--> not set -q __fish_git_prompt_show_informative_status
12	27	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	26	-> if not set -q __fish_git_prompt_color_branch...
16	16	--> not set -q __fish_git_prompt_color_branch
10	25	-> if not set -q __fish_git_prompt_showupstream...
15	15	--> not set -q __fish_git_prompt_showupstream
10	26	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
10	29	-> if not set -q __fish_git_prompt_char_upstream_behind...
19	19	--> not set -q __fish_git_prompt_char_upstream_behind
10	25	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
10	24	-> if not set -q __fish_git_prompt_char_stagedstate...
14	14	--> not set -q __fish_git_prompt_char_stagedstate
10	25	-> if not set -q __fish_git_prompt_char_dirtystate...
15	15	--> not set -q __fish_git_prompt_char_dirtystate
10	24	-> if not set -q __fish_git_prompt_char_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_char_untrackedfiles
10	25	-> if not set -q __fish_git_prompt_char_conflictedstate...
15	15	--> not set -q __fish_git_prompt_char_conflictedstate
10	24	-> if not set -q __fish_git_prompt_char_cleanstate...
14	14	--> not set -q __fish_git_prompt_char_cleanstate
9	27	-> if not set -q __fish_git_prompt_color_dirtystate...
18	18	--> not set -q __fish_git_prompt_color_dirtystate
9	24	-> if not set -q __fish_git_prompt_color_stagedstate...
15	15	--> not set -q __fish_git_prompt_color_stagedstate
10	24	-> if not set -q __fish_git_prompt_color_invalidstate...
14	14	--> not set -q __fish_git_prompt_color_invalidstate
10	25	-> if not set -q __fish_git_prompt_color_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_color_untrackedfiles
10	24	-> if not set -q __fish_git_prompt_color_cleanstate...
14	14	--> not set -q __fish_git_prompt_color_cleanstate
10	25	-> if not set -q __fish_prompt_normal...
15	15	--> not set -q __fish_prompt_normal
25	25	-> set -l color_cwd
23	23	-> set -l prefix
21	21	-> set -l suffix
30	91	-> switch "$USER"...
36	36	--> set color_cwd $fish_color_cwd
25	25	--> set suffix '$'
39	39	-> set_color $color_cwd
76	828	-> echo -n (prompt_pwd)
246	752	--> prompt_pwd
39	39	---> set -l options 'h/help'
46	46	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
13	29	---> if set -q _flag_help...
16	16	----> set -q _flag_help
16	16	---> set -q fish_prompt_pwd_dir_length
25	25	---> or set -l fish_prompt_pwd_dir_length 1
97	97	---> set realhome ~
88	158	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
70	70	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
17	96	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
29	29	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
50	50	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
25	25	-> set_color normal
57	24185	-> printf '%s ' (__fish_vcs_prompt)
50	24128	--> __fish_vcs_prompt
806	5103	---> __fish_git_prompt
14	116	----> if not command -sq git...
102	102	-----> not command -sq git
132	4143	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4011	4011	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
11	11	----> or return
449	537	---> __fish_hg_prompt
13	88	----> if not command -sq hg...
65	65	-----> not command -sq hg
10	10	-----> return 1
199	18438	---> __fish_svn_prompt
11	80	----> if not command -sq svn...
69	69	-----> not command -sq svn
95	18119	----> set -l checkout_info (command svn info ^/dev/null)
18024	18024	-----> command svn info ^/dev/null
12	40	----> if [ $status -ne 0 ]...
22	22	-----> [ $status -ne 0 ]
6	6	-----> return
10	103	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
78	78	--> set_color $fish_color_error
16	16	-> echo -n "$suffix "
12	12	-> set_color normal
13	13	> echo $_ " "
28	68	> __fish_pwd
40	40	-> pwd
220	599	> up-or-search
18	85	-> if commandline --search-mode...
67	67	--> commandline --search-mode
17	56	-> if commandline --paging-mode...
39	39	--> commandline --paging-mode
123	172	-> set lineno (commandline -L)
49	49	--> commandline -L
28	66	-> switch $lineno...
38	38	--> commandline -f history-search-backward
95	235	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard -trim'
140	140	-> printf "\e[?2004l"
65	65	> echo $_ " "
120	234	> __fish_pwd
114	114	-> pwd
3380	11193	> cat profile.txt | grep -exclude-standard -trim
7813	7813	-> command grep --color=auto $argv
58	106	> __fish_enable_bracketed_paste
48	48	-> printf "\e[?2004h"
48	502	> fish_mode_prompt
254	454	-> fish_default_mode_prompt
17	200	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
146	146	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
37	37	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
1056	40466	> fish_prompt
101	101	-> set -l last_status $status
15	37	-> if not set -q __fish_git_prompt_show_informative_status...
22	22	--> not set -q __fish_git_prompt_show_informative_status
13	33	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
20	20	--> not set -q __fish_git_prompt_hide_untrackedfiles
12	30	-> if not set -q __fish_git_prompt_color_branch...
18	18	--> not set -q __fish_git_prompt_color_branch
11	28	-> if not set -q __fish_git_prompt_showupstream...
17	17	--> not set -q __fish_git_prompt_showupstream
11	34	-> if not set -q __fish_git_prompt_char_upstream_ahead...
23	23	--> not set -q __fish_git_prompt_char_upstream_ahead
11	28	-> if not set -q __fish_git_prompt_char_upstream_behind...
17	17	--> not set -q __fish_git_prompt_char_upstream_behind
11	28	-> if not set -q __fish_git_prompt_char_upstream_prefix...
17	17	--> not set -q __fish_git_prompt_char_upstream_prefix
11	28	-> if not set -q __fish_git_prompt_char_stagedstate...
17	17	--> not set -q __fish_git_prompt_char_stagedstate
11	26	-> if not set -q __fish_git_prompt_char_dirtystate...
15	15	--> not set -q __fish_git_prompt_char_dirtystate
10	25	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
11	28	-> if not set -q __fish_git_prompt_char_conflictedstate...
17	17	--> not set -q __fish_git_prompt_char_conflictedstate
11	27	-> if not set -q __fish_git_prompt_char_cleanstate...
16	16	--> not set -q __fish_git_prompt_char_cleanstate
11	28	-> if not set -q __fish_git_prompt_color_dirtystate...
17	17	--> not set -q __fish_git_prompt_color_dirtystate
13	29	-> if not set -q __fish_git_prompt_color_stagedstate...
16	16	--> not set -q __fish_git_prompt_color_stagedstate
11	28	-> if not set -q __fish_git_prompt_color_invalidstate...
17	17	--> not set -q __fish_git_prompt_color_invalidstate
11	29	-> if not set -q __fish_git_prompt_color_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_color_untrackedfiles
11	29	-> if not set -q __fish_git_prompt_color_cleanstate...
18	18	--> not set -q __fish_git_prompt_color_cleanstate
12	29	-> if not set -q __fish_prompt_normal...
17	17	--> not set -q __fish_prompt_normal
29	29	-> set -l color_cwd
27	27	-> set -l prefix
26	26	-> set -l suffix
35	104	-> switch "$USER"...
39	39	--> set color_cwd $fish_color_cwd
30	30	--> set suffix '$'
80	80	-> set_color $color_cwd
85	1100	-> echo -n (prompt_pwd)
357	1015	--> prompt_pwd
46	46	---> set -l options 'h/help'
86	86	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
14	35	---> if set -q _flag_help...
21	21	----> set -q _flag_help
19	19	---> set -q fish_prompt_pwd_dir_length
41	41	---> or set -l fish_prompt_pwd_dir_length 1
85	85	---> set realhome ~
89	226	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
137	137	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
15	120	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
56	56	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
49	49	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
26	26	-> set_color normal
66	37230	-> printf '%s ' (__fish_vcs_prompt)
107	37164	--> __fish_vcs_prompt
809	5465	---> __fish_git_prompt
13	100	----> if not command -sq git...
87	87	-----> not command -sq git
134	4509	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4375	4375	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
38	38	----> test -n "$repo_info"
9	9	----> or return
496	580	---> __fish_hg_prompt
14	84	----> if not command -sq hg...
60	60	-----> not command -sq hg
10	10	-----> return 1
264	31012	---> __fish_svn_prompt
11	74	----> if not command -sq svn...
63	63	-----> not command -sq svn
154	30618	----> set -l checkout_info (command svn info ^/dev/null)
30464	30464	-----> command svn info ^/dev/null
16	56	----> if [ $status -ne 0 ]...
32	32	-----> [ $status -ne 0 ]
8	8	-----> return
12	128	-> if not test $last_status -eq 0...
17	17	--> not test $last_status -eq 0
99	99	--> set_color $fish_color_error
18	18	-> echo -n "$suffix "
17	17	-> set_color normal
17	17	> echo $_ " "
32	88	> __fish_pwd
56	56	-> pwd
293	692	> up-or-search
18	108	-> if commandline --search-mode...
90	90	--> commandline --search-mode
16	55	-> if commandline --paging-mode...
39	39	--> commandline --paging-mode
123	169	-> set lineno (commandline -L)
46	46	--> commandline -L
27	67	-> switch $lineno...
40	40	--> commandline -f history-search-backward
68	103	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard -e -trim'
35	35	-> printf "\e[?2004l"
37	37	> echo $_ " "
54	129	> __fish_pwd
75	75	-> pwd
2606	97002	> cat profile.txt | grep -exclude-standard -e -trim
94396	94396	-> command grep --color=auto $argv
56	100	> __fish_enable_bracketed_paste
44	44	-> printf "\e[?2004h"
56	692	> fish_mode_prompt
187	636	-> fish_default_mode_prompt
19	449	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
160	160	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
270	270	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
941	28229	> fish_prompt
116	116	-> set -l last_status $status
14	45	-> if not set -q __fish_git_prompt_show_informative_status...
31	31	--> not set -q __fish_git_prompt_show_informative_status
10	28	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	25	-> if not set -q __fish_git_prompt_color_branch...
15	15	--> not set -q __fish_git_prompt_color_branch
10	29	-> if not set -q __fish_git_prompt_showupstream...
19	19	--> not set -q __fish_git_prompt_showupstream
11	27	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
13	29	-> if not set -q __fish_git_prompt_char_upstream_behind...
16	16	--> not set -q __fish_git_prompt_char_upstream_behind
14	39	-> if not set -q __fish_git_prompt_char_upstream_prefix...
25	25	--> not set -q __fish_git_prompt_char_upstream_prefix
17	44	-> if not set -q __fish_git_prompt_char_stagedstate...
27	27	--> not set -q __fish_git_prompt_char_stagedstate
15	44	-> if not set -q __fish_git_prompt_char_dirtystate...
29	29	--> not set -q __fish_git_prompt_char_dirtystate
15	43	-> if not set -q __fish_git_prompt_char_untrackedfiles...
28	28	--> not set -q __fish_git_prompt_char_untrackedfiles
17	61	-> if not set -q __fish_git_prompt_char_conflictedstate...
44	44	--> not set -q __fish_git_prompt_char_conflictedstate
17	43	-> if not set -q __fish_git_prompt_char_cleanstate...
26	26	--> not set -q __fish_git_prompt_char_cleanstate
17	47	-> if not set -q __fish_git_prompt_color_dirtystate...
30	30	--> not set -q __fish_git_prompt_color_dirtystate
15	41	-> if not set -q __fish_git_prompt_color_stagedstate...
26	26	--> not set -q __fish_git_prompt_color_stagedstate
14	41	-> if not set -q __fish_git_prompt_color_invalidstate...
27	27	--> not set -q __fish_git_prompt_color_invalidstate
17	43	-> if not set -q __fish_git_prompt_color_untrackedfiles...
26	26	--> not set -q __fish_git_prompt_color_untrackedfiles
16	43	-> if not set -q __fish_git_prompt_color_cleanstate...
27	27	--> not set -q __fish_git_prompt_color_cleanstate
15	47	-> if not set -q __fish_prompt_normal...
32	32	--> not set -q __fish_prompt_normal
41	41	-> set -l color_cwd
51	51	-> set -l prefix
44	44	-> set -l suffix
58	183	-> switch "$USER"...
63	63	--> set color_cwd $fish_color_cwd
62	62	--> set suffix '$'
279	279	-> set_color $color_cwd
226	1853	-> echo -n (prompt_pwd)
372	1627	--> prompt_pwd
88	88	---> set -l options 'h/help'
88	88	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
21	60	---> if set -q _flag_help...
39	39	----> set -q _flag_help
35	35	---> set -q fish_prompt_pwd_dir_length
47	47	---> or set -l fish_prompt_pwd_dir_length 1
190	190	---> set realhome ~
341	520	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
179	179	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
38	227	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
83	83	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
106	106	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
60	60	-> set_color normal
93	23886	-> printf '%s ' (__fish_vcs_prompt)
77	23793	--> __fish_vcs_prompt
847	5634	---> __fish_git_prompt
29	331	----> if not command -sq git...
302	302	-----> not command -sq git
258	4428	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4170	4170	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
22	22	----> test -n "$repo_info"
6	6	----> or return
304	367	---> __fish_hg_prompt
8	63	----> if not command -sq hg...
47	47	-----> not command -sq hg
8	8	-----> return 1
140	17715	---> __fish_svn_prompt
7	55	----> if not command -sq svn...
48	48	-----> not command -sq svn
90	17479	----> set -l checkout_info (command svn info ^/dev/null)
17389	17389	-----> command svn info ^/dev/null
12	41	----> if [ $status -ne 0 ]...
23	23	-----> [ $status -ne 0 ]
6	6	-----> return
8	22	-> if not test $last_status -eq 0...
14	14	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
19	19	-> set_color normal
15	15	> echo $_ " "
34	77	> __fish_pwd
43	43	-> pwd
200	579	> up-or-search
18	88	-> if commandline --search-mode...
70	70	--> commandline --search-mode
15	55	-> if commandline --paging-mode...
40	40	--> commandline --paging-mode
124	170	-> set lineno (commandline -L)
46	46	--> commandline -L
28	66	-> switch $lineno...
38	38	--> commandline -f history-search-backward
65	97	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard -e -trim -e count'
32	32	-> printf "\e[?2004l"
31	31	> echo $_ " "
53	135	> __fish_pwd
82	82	-> pwd
1736	136064	> cat profile.txt | grep -exclude-standard -e -trim -e count
134328	134328	-> command grep --color=auto $argv
70	135	> __fish_enable_bracketed_paste
65	65	-> printf "\e[?2004h"
58	554	> fish_mode_prompt
222	496	-> fish_default_mode_prompt
19	274	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
211	211	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
44	44	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
781	36603	> fish_prompt
42	42	-> set -l last_status $status
12	32	-> if not set -q __fish_git_prompt_show_informative_status...
20	20	--> not set -q __fish_git_prompt_show_informative_status
11	29	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	28	-> if not set -q __fish_git_prompt_color_branch...
18	18	--> not set -q __fish_git_prompt_color_branch
11	28	-> if not set -q __fish_git_prompt_showupstream...
17	17	--> not set -q __fish_git_prompt_showupstream
10	27	-> if not set -q __fish_git_prompt_char_upstream_ahead...
17	17	--> not set -q __fish_git_prompt_char_upstream_ahead
11	28	-> if not set -q __fish_git_prompt_char_upstream_behind...
17	17	--> not set -q __fish_git_prompt_char_upstream_behind
10	33	-> if not set -q __fish_git_prompt_char_upstream_prefix...
23	23	--> not set -q __fish_git_prompt_char_upstream_prefix
10	28	-> if not set -q __fish_git_prompt_char_stagedstate...
18	18	--> not set -q __fish_git_prompt_char_stagedstate
10	27	-> if not set -q __fish_git_prompt_char_dirtystate...
17	17	--> not set -q __fish_git_prompt_char_dirtystate
10	27	-> if not set -q __fish_git_prompt_char_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_char_untrackedfiles
10	27	-> if not set -q __fish_git_prompt_char_conflictedstate...
17	17	--> not set -q __fish_git_prompt_char_conflictedstate
10	27	-> if not set -q __fish_git_prompt_char_cleanstate...
17	17	--> not set -q __fish_git_prompt_char_cleanstate
10	26	-> if not set -q __fish_git_prompt_color_dirtystate...
16	16	--> not set -q __fish_git_prompt_color_dirtystate
10	33	-> if not set -q __fish_git_prompt_color_stagedstate...
23	23	--> not set -q __fish_git_prompt_color_stagedstate
10	28	-> if not set -q __fish_git_prompt_color_invalidstate...
18	18	--> not set -q __fish_git_prompt_color_invalidstate
22	40	-> if not set -q __fish_git_prompt_color_untrackedfiles...
18	18	--> not set -q __fish_git_prompt_color_untrackedfiles
10	28	-> if not set -q __fish_git_prompt_color_cleanstate...
18	18	--> not set -q __fish_git_prompt_color_cleanstate
11	29	-> if not set -q __fish_prompt_normal...
18	18	--> not set -q __fish_prompt_normal
30	30	-> set -l color_cwd
26	26	-> set -l prefix
26	26	-> set -l suffix
34	104	-> switch "$USER"...
36	36	--> set color_cwd $fish_color_cwd
34	34	--> set suffix '$'
47	47	-> set_color $color_cwd
98	854	-> echo -n (prompt_pwd)
201	756	--> prompt_pwd
43	43	---> set -l options 'h/help'
52	52	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
12	32	---> if set -q _flag_help...
20	20	----> set -q _flag_help
18	18	---> set -q fish_prompt_pwd_dir_length
28	28	---> or set -l fish_prompt_pwd_dir_length 1
87	87	---> set realhome ~
99	186	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
87	87	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
16	109	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
37	37	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
56	56	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
30	30	-> set_color normal
73	34058	-> printf '%s ' (__fish_vcs_prompt)
59	33985	--> __fish_vcs_prompt
823	7691	---> __fish_git_prompt
22	226	----> if not command -sq git...
204	204	-----> not command -sq git
123	6609	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
6486	6486	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
6	6	----> or return
304	369	---> __fish_hg_prompt
9	65	----> if not command -sq hg...
49	49	-----> not command -sq hg
7	7	-----> return 1
144	25866	---> __fish_svn_prompt
8	57	----> if not command -sq svn...
49	49	-----> not command -sq svn
103	25610	----> set -l checkout_info (command svn info ^/dev/null)
25507	25507	-----> command svn info ^/dev/null
18	55	----> if [ $status -ne 0 ]...
29	29	-----> [ $status -ne 0 ]
8	8	-----> return
12	33	-> if not test $last_status -eq 0...
21	21	--> not test $last_status -eq 0
21	21	-> echo -n "$suffix "
26	26	-> set_color normal
20	20	> echo $_ " "
40	101	> __fish_pwd
61	61	-> pwd
357	757	> up-or-search
18	129	-> if commandline --search-mode...
111	111	--> commandline --search-mode
13	45	-> if commandline --paging-mode...
32	32	--> commandline --paging-mode
133	173	-> set lineno (commandline -L)
40	40	--> commandline -L
22	53	-> switch $lineno...
31	31	--> commandline -f history-search-backward
77	165	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard.*count'
88	88	-> printf "\e[?2004l"
80	80	> echo $_ " "
116	208	> __fish_pwd
92	92	-> pwd
81	138	> __fish_enable_bracketed_paste
57	57	-> printf "\e[?2004h"
91	736	> fish_mode_prompt
398	645	-> fish_default_mode_prompt
31	247	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
160	160	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
56	56	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
1187	58964	> fish_prompt
95	95	-> set -l last_status $status
20	52	-> if not set -q __fish_git_prompt_show_informative_status...
32	32	--> not set -q __fish_git_prompt_show_informative_status
17	44	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
27	27	--> not set -q __fish_git_prompt_hide_untrackedfiles
16	42	-> if not set -q __fish_git_prompt_color_branch...
26	26	--> not set -q __fish_git_prompt_color_branch
15	40	-> if not set -q __fish_git_prompt_showupstream...
25	25	--> not set -q __fish_git_prompt_showupstream
15	42	-> if not set -q __fish_git_prompt_char_upstream_ahead...
27	27	--> not set -q __fish_git_prompt_char_upstream_ahead
14	40	-> if not set -q __fish_git_prompt_char_upstream_behind...
26	26	--> not set -q __fish_git_prompt_char_upstream_behind
15	41	-> if not set -q __fish_git_prompt_char_upstream_prefix...
26	26	--> not set -q __fish_git_prompt_char_upstream_prefix
15	41	-> if not set -q __fish_git_prompt_char_stagedstate...
26	26	--> not set -q __fish_git_prompt_char_stagedstate
15	41	-> if not set -q __fish_git_prompt_char_dirtystate...
26	26	--> not set -q __fish_git_prompt_char_dirtystate
14	39	-> if not set -q __fish_git_prompt_char_untrackedfiles...
25	25	--> not set -q __fish_git_prompt_char_untrackedfiles
16	40	-> if not set -q __fish_git_prompt_char_conflictedstate...
24	24	--> not set -q __fish_git_prompt_char_conflictedstate
15	41	-> if not set -q __fish_git_prompt_char_cleanstate...
26	26	--> not set -q __fish_git_prompt_char_cleanstate
15	39	-> if not set -q __fish_git_prompt_color_dirtystate...
24	24	--> not set -q __fish_git_prompt_color_dirtystate
14	39	-> if not set -q __fish_git_prompt_color_stagedstate...
25	25	--> not set -q __fish_git_prompt_color_stagedstate
15	40	-> if not set -q __fish_git_prompt_color_invalidstate...
25	25	--> not set -q __fish_git_prompt_color_invalidstate
14	40	-> if not set -q __fish_git_prompt_color_untrackedfiles...
26	26	--> not set -q __fish_git_prompt_color_untrackedfiles
15	40	-> if not set -q __fish_git_prompt_color_cleanstate...
25	25	--> not set -q __fish_git_prompt_color_cleanstate
15	40	-> if not set -q __fish_prompt_normal...
25	25	--> not set -q __fish_prompt_normal
40	40	-> set -l color_cwd
38	38	-> set -l prefix
37	37	-> set -l suffix
45	137	-> switch "$USER"...
51	51	--> set color_cwd $fish_color_cwd
41	41	--> set suffix '$'
135	135	-> set_color $color_cwd
130	1507	-> echo -n (prompt_pwd)
403	1377	--> prompt_pwd
51	51	---> set -l options 'h/help'
124	124	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
19	47	---> if set -q _flag_help...
28	28	----> set -q _flag_help
27	27	---> set -q fish_prompt_pwd_dir_length
39	39	---> or set -l fish_prompt_pwd_dir_length 1
135	135	---> set realhome ~
148	354	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
206	206	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
26	197	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
93	93	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
78	78	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
41	41	-> set_color normal
94	54800	-> printf '%s ' (__fish_vcs_prompt)
167	54706	--> __fish_vcs_prompt
1095	18447	---> __fish_git_prompt
18	137	----> if not command -sq git...
119	119	-----> not command -sq git
128	17188	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
17060	17060	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
21	21	----> test -n "$repo_info"
6	6	----> or return
334	400	---> __fish_hg_prompt
9	66	----> if not command -sq hg...
49	49	-----> not command -sq hg
8	8	-----> return 1
184	35692	---> __fish_svn_prompt
8	55	----> if not command -sq svn...
47	47	-----> not command -sq svn
110	35391	----> set -l checkout_info (command svn info ^/dev/null)
35281	35281	-----> command svn info ^/dev/null
19	62	----> if [ $status -ne 0 ]...
33	33	-----> [ $status -ne 0 ]
10	10	-----> return
14	171	-> if not test $last_status -eq 0...
25	25	--> not test $last_status -eq 0
132	132	--> set_color $fish_color_error
20	20	-> echo -n "$suffix "
15	15	-> set_color normal
14	14	> echo $_ " "
29	70	> __fish_pwd
41	41	-> pwd
408	929	> up-or-search
26	154	-> if commandline --search-mode...
128	128	--> commandline --search-mode
18	91	-> if commandline --paging-mode...
73	73	--> commandline --paging-mode
158	210	-> set lineno (commandline -L)
52	52	--> commandline -L
27	66	-> switch $lineno...
39	39	--> commandline -f history-search-backward
115	205	> __fish_disable_bracketed_paste 'cat profile.txt | grep -exclude-standard.*count'
90	90	-> printf "\e[?2004l"
61	61	> echo $_ " "
115	206	> __fish_pwd
91	91	-> pwd
47	80	> __fish_enable_bracketed_paste
33	33	-> printf "\e[?2004h"
54	477	> fish_mode_prompt
277	423	-> fish_default_mode_prompt
19	146	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
92	92	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
35	35	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
759	31181	> fish_prompt
64	64	-> set -l last_status $status
13	31	-> if not set -q __fish_git_prompt_show_informative_status...
18	18	--> not set -q __fish_git_prompt_show_informative_status
10	25	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_hide_untrackedfiles
10	24	-> if not set -q __fish_git_prompt_color_branch...
14	14	--> not set -q __fish_git_prompt_color_branch
8	32	-> if not set -q __fish_git_prompt_showupstream...
24	24	--> not set -q __fish_git_prompt_showupstream
9	25	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
9	23	-> if not set -q __fish_git_prompt_char_upstream_behind...
14	14	--> not set -q __fish_git_prompt_char_upstream_behind
10	26	-> if not set -q __fish_git_prompt_char_upstream_prefix...
16	16	--> not set -q __fish_git_prompt_char_upstream_prefix
9	26	-> if not set -q __fish_git_prompt_char_stagedstate...
17	17	--> not set -q __fish_git_prompt_char_stagedstate
8	25	-> if not set -q __fish_git_prompt_char_dirtystate...
17	17	--> not set -q __fish_git_prompt_char_dirtystate
12	29	-> if not set -q __fish_git_prompt_char_untrackedfiles...
17	17	--> not set -q __fish_git_prompt_char_untrackedfiles
10	37	-> if not set -q __fish_git_prompt_char_conflictedstate...
27	27	--> not set -q __fish_git_prompt_char_conflictedstate
12	29	-> if not set -q __fish_git_prompt_char_cleanstate...
17	17	--> not set -q __fish_git_prompt_char_cleanstate
10	27	-> if not set -q __fish_git_prompt_color_dirtystate...
17	17	--> not set -q __fish_git_prompt_color_dirtystate
10	27	-> if not set -q __fish_git_prompt_color_stagedstate...
17	17	--> not set -q __fish_git_prompt_color_stagedstate
9	26	-> if not set -q __fish_git_prompt_color_invalidstate...
17	17	--> not set -q __fish_git_prompt_color_invalidstate
10	26	-> if not set -q __fish_git_prompt_color_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_color_untrackedfiles
10	49	-> if not set -q __fish_git_prompt_color_cleanstate...
39	39	--> not set -q __fish_git_prompt_color_cleanstate
11	27	-> if not set -q __fish_prompt_normal...
16	16	--> not set -q __fish_prompt_normal
30	30	-> set -l color_cwd
26	26	-> set -l prefix
22	22	-> set -l suffix
43	109	-> switch "$USER"...
38	38	--> set color_cwd $fish_color_cwd
28	28	--> set suffix '$'
162	162	-> set_color $color_cwd
118	1581	-> echo -n (prompt_pwd)
445	1463	--> prompt_pwd
57	57	---> set -l options 'h/help'
149	149	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
19	48	---> if set -q _flag_help...
29	29	----> set -q _flag_help
28	28	---> set -q fish_prompt_pwd_dir_length
42	42	---> or set -l fish_prompt_pwd_dir_length 1
133	133	---> set realhome ~
145	366	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
221	221	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
26	195	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
77	77	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
43	43	-> set_color normal
88	27721	-> printf '%s ' (__fish_vcs_prompt)
170	27633	--> __fish_vcs_prompt
1215	5459	---> __fish_git_prompt
18	162	----> if not command -sq git...
144	144	-----> not command -sq git
131	4050	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3919	3919	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
8	8	----> or return
493	618	---> __fish_hg_prompt
18	125	----> if not command -sq hg...
91	91	-----> not command -sq hg
16	16	-----> return 1
332	21386	---> __fish_svn_prompt
13	98	----> if not command -sq svn...
85	85	-----> not command -sq svn
118	20908	----> set -l checkout_info (command svn info ^/dev/null)
20790	20790	-----> command svn info ^/dev/null
14	48	----> if [ $status -ne 0 ]...
27	27	-----> [ $status -ne 0 ]
7	7	-----> return
12	116	-> if not test $last_status -eq 0...
18	18	--> not test $last_status -eq 0
86	86	--> set_color $fish_color_error
19	19	-> echo -n "$suffix "
15	15	-> set_color normal
19	19	> echo $_ " "
30	63	> __fish_pwd
33	33	-> pwd
196	569	> up-or-search
18	85	-> if commandline --search-mode...
67	67	--> commandline --search-mode
16	56	-> if commandline --paging-mode...
40	40	--> commandline --paging-mode
123	168	-> set lineno (commandline -L)
45	45	--> commandline -L
26	64	-> switch $lineno...
38	38	--> commandline -f history-search-backward
77	120	> __fish_disable_bracketed_paste 'cat profile.txt | grep "-exclude-standard.*count"'
43	43	-> printf "\e[?2004l"
41	41	> echo $_ " "
53	135	> __fish_pwd
82	82	-> pwd
1752	36843	> cat profile.txt | grep "-exclude-standard.*count"
35091	35091	-> command grep --color=auto $argv
146	313	> __fish_enable_bracketed_paste
167	167	-> printf "\e[?2004h"
61	680	> fish_mode_prompt
211	619	-> fish_default_mode_prompt
23	408	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
351	351	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
34	34	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
548	29192	> fish_prompt
60	60	-> set -l last_status $status
11	30	-> if not set -q __fish_git_prompt_show_informative_status...
19	19	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	20	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
7	21	-> if not set -q __fish_git_prompt_showupstream...
14	14	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
7	22	-> if not set -q __fish_git_prompt_char_upstream_behind...
15	15	--> not set -q __fish_git_prompt_char_upstream_behind
21	29	-> if not set -q __fish_git_prompt_char_upstream_prefix...
8	8	--> not set -q __fish_git_prompt_char_upstream_prefix
7	19	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
6	15	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
8	23	-> if not set -q __fish_git_prompt_char_untrackedfiles...
15	15	--> not set -q __fish_git_prompt_char_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
7	23	-> if not set -q __fish_git_prompt_char_cleanstate...
16	16	--> not set -q __fish_git_prompt_char_cleanstate
10	25	-> if not set -q __fish_git_prompt_color_dirtystate...
15	15	--> not set -q __fish_git_prompt_color_dirtystate
9	22	-> if not set -q __fish_git_prompt_color_stagedstate...
13	13	--> not set -q __fish_git_prompt_color_stagedstate
8	31	-> if not set -q __fish_git_prompt_color_invalidstate...
23	23	--> not set -q __fish_git_prompt_color_invalidstate
9	25	-> if not set -q __fish_git_prompt_color_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_color_untrackedfiles
10	25	-> if not set -q __fish_git_prompt_color_cleanstate...
15	15	--> not set -q __fish_git_prompt_color_cleanstate
8	23	-> if not set -q __fish_prompt_normal...
15	15	--> not set -q __fish_prompt_normal
31	31	-> set -l color_cwd
23	23	-> set -l prefix
21	21	-> set -l suffix
34	101	-> switch "$USER"...
37	37	--> set color_cwd $fish_color_cwd
30	30	--> set suffix '$'
69	69	-> set_color $color_cwd
108	1004	-> echo -n (prompt_pwd)
194	896	--> prompt_pwd
48	48	---> set -l options 'h/help'
49	49	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
15	40	---> if set -q _flag_help...
25	25	----> set -q _flag_help
17	17	---> set -q fish_prompt_pwd_dir_length
24	24	---> or set -l fish_prompt_pwd_dir_length 1
203	203	---> set realhome ~
121	238	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
117	117	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
15	83	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
25	25	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
43	43	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
31	31	-> set_color normal
60	26734	-> printf '%s ' (__fish_vcs_prompt)
42	26674	--> __fish_vcs_prompt
738	3978	---> __fish_git_prompt
10	109	----> if not command -sq git...
99	99	-----> not command -sq git
104	3100	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
2996	2996	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
25	25	----> test -n "$repo_info"
6	6	----> or return
300	364	---> __fish_hg_prompt
7	64	----> if not command -sq hg...
49	49	-----> not command -sq hg
8	8	-----> return 1
140	22290	---> __fish_svn_prompt
8	58	----> if not command -sq svn...
50	50	-----> not command -sq svn
100	22049	----> set -l checkout_info (command svn info ^/dev/null)
21949	21949	-----> command svn info ^/dev/null
11	43	----> if [ $status -ne 0 ]...
26	26	-----> [ $status -ne 0 ]
6	6	-----> return
10	123	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
98	98	--> set_color $fish_color_error
16	16	-> echo -n "$suffix "
13	13	-> set_color normal
16	16	> echo $_ " "
30	68	> __fish_pwd
38	38	-> pwd
294	820	> up-or-search
26	119	-> if commandline --search-mode...
93	93	--> commandline --search-mode
27	93	-> if commandline --paging-mode...
66	66	--> commandline --paging-mode
178	235	-> set lineno (commandline -L)
57	57	--> commandline -L
32	79	-> switch $lineno...
47	47	--> commandline -f history-search-backward
73	107	> __fish_disable_bracketed_paste 'cat profile.txt | grep "-exclude-standard"'
34	34	-> printf "\e[?2004l"
33	33	> echo $_ " "
50	122	> __fish_pwd
72	72	-> pwd
1381	27504	> cat profile.txt | grep "-exclude-standard"
26123	26123	-> command grep --color=auto $argv
61	107	> __fish_enable_bracketed_paste
46	46	-> printf "\e[?2004h"
42	415	> fish_mode_prompt
184	373	-> fish_default_mode_prompt
15	189	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
143	143	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
31	31	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
647	42486	> fish_prompt
77	77	-> set -l last_status $status
11	27	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
10	23	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
9	22	-> if not set -q __fish_git_prompt_showupstream...
13	13	--> not set -q __fish_git_prompt_showupstream
10	23	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	22	-> if not set -q __fish_git_prompt_char_upstream_behind...
13	13	--> not set -q __fish_git_prompt_char_upstream_behind
9	21	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
9	22	-> if not set -q __fish_git_prompt_char_stagedstate...
13	13	--> not set -q __fish_git_prompt_char_stagedstate
9	25	-> if not set -q __fish_git_prompt_char_dirtystate...
16	16	--> not set -q __fish_git_prompt_char_dirtystate
8	21	-> if not set -q __fish_git_prompt_char_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_char_untrackedfiles
10	22	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
8	20	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
8	21	-> if not set -q __fish_git_prompt_color_dirtystate...
13	13	--> not set -q __fish_git_prompt_color_dirtystate
9	21	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
9	21	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
9	22	-> if not set -q __fish_git_prompt_color_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_color_untrackedfiles
9	21	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
9	22	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
20	20	-> set -l prefix
19	19	-> set -l suffix
27	76	-> switch "$USER"...
28	28	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
36	36	-> set_color $color_cwd
68	828	-> echo -n (prompt_pwd)
274	760	--> prompt_pwd
36	36	---> set -l options 'h/help'
44	44	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
10	26	---> if set -q _flag_help...
16	16	----> set -q _flag_help
15	15	---> set -q fish_prompt_pwd_dir_length
28	28	---> or set -l fish_prompt_pwd_dir_length 1
100	100	---> set realhome ~
77	147	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
70	70	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	90	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
28	28	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
48	48	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
25	25	-> set_color normal
64	40280	-> printf '%s ' (__fish_vcs_prompt)
49	40216	--> __fish_vcs_prompt
813	6225	---> __fish_git_prompt
13	140	----> if not command -sq git...
127	127	-----> not command -sq git
121	5233	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
5112	5112	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
30	30	----> test -n "$repo_info"
9	9	----> or return
432	527	---> __fish_hg_prompt
15	95	----> if not command -sq hg...
68	68	-----> not command -sq hg
12	12	-----> return 1
225	33415	---> __fish_svn_prompt
12	92	----> if not command -sq svn...
80	80	-----> not command -sq svn
140	33053	----> set -l checkout_info (command svn info ^/dev/null)
32913	32913	-----> command svn info ^/dev/null
13	45	----> if [ $status -ne 0 ]...
25	25	-----> [ $status -ne 0 ]
7	7	-----> return
8	23	-> if not test $last_status -eq 0...
15	15	--> not test $last_status -eq 0
15	15	-> echo -n "$suffix "
21	21	-> set_color normal
15	15	> echo $_ " "
33	94	> __fish_pwd
61	61	-> pwd
206	8887	> __fish_start_bracketed_paste
104	104	-> set -g __fish_last_bind_mode $fish_bind_mode
396	8577	-> __fish_commandline_is_singlequoted
47	47	--> set -l state normal
411	8010	--> for char in (commandline -ct | string split "")...
7557	7557	---> commandline -ct | string split ""
25	42	---> switch $char...
17	17	----> switch $state...
15	124	--> if contains -- $state single single-escaped...
87	87	---> contains -- $state single single-escaped
22	22	---> return 1
179	315	> __fish_stop_bracketed_paste
74	74	-> set fish_bind_mode $__fish_last_bind_mode
34	34	-> set -e __fish_paste_quoted
28	28	-> commandline -f force-repaint
36	289	> fish_mode_prompt
161	253	-> fish_default_mode_prompt
12	92	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
55	55	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
25	25	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
587	41469	> fish_prompt
29	29	-> set -l last_status $status
8	21	-> if not set -q __fish_git_prompt_show_informative_status...
13	13	--> not set -q __fish_git_prompt_show_informative_status
8	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	17	-> if not set -q __fish_git_prompt_color_branch...
11	11	--> not set -q __fish_git_prompt_color_branch
6	16	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
7	17	-> if not set -q __fish_git_prompt_char_upstream_behind...
10	10	--> not set -q __fish_git_prompt_char_upstream_behind
6	16	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
6	16	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
6	15	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
7	29	-> if not set -q __fish_git_prompt_char_untrackedfiles...
22	22	--> not set -q __fish_git_prompt_char_untrackedfiles
7	17	-> if not set -q __fish_git_prompt_char_conflictedstate...
10	10	--> not set -q __fish_git_prompt_char_conflictedstate
7	16	-> if not set -q __fish_git_prompt_char_cleanstate...
9	9	--> not set -q __fish_git_prompt_char_cleanstate
6	16	-> if not set -q __fish_git_prompt_color_dirtystate...
10	10	--> not set -q __fish_git_prompt_color_dirtystate
6	16	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
6	16	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
6	25	-> if not set -q __fish_git_prompt_color_untrackedfiles...
19	19	--> not set -q __fish_git_prompt_color_untrackedfiles
6	16	-> if not set -q __fish_git_prompt_color_cleanstate...
10	10	--> not set -q __fish_git_prompt_color_cleanstate
7	16	-> if not set -q __fish_prompt_normal...
9	9	--> not set -q __fish_prompt_normal
16	16	-> set -l color_cwd
15	15	-> set -l prefix
15	15	-> set -l suffix
20	59	-> switch "$USER"...
22	22	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
51	51	-> set_color $color_cwd
75	653	-> echo -n (prompt_pwd)
192	578	--> prompt_pwd
26	26	---> set -l options 'h/help'
55	55	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	19	---> if set -q _flag_help...
11	11	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
18	18	---> or set -l fish_prompt_pwd_dir_length 1
42	42	---> set realhome ~
63	123	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
60	60	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	93	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
42	42	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
39	39	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
19	19	-> set_color normal
83	39616	-> printf '%s ' (__fish_vcs_prompt)
84	39533	--> __fish_vcs_prompt
552	7980	---> __fish_git_prompt
10	67	----> if not command -sq git...
57	57	-----> not command -sq git
120	7330	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
7210	7210	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
24	24	----> test -n "$repo_info"
7	7	----> or return
397	467	---> __fish_hg_prompt
11	70	----> if not command -sq hg...
51	51	-----> not command -sq hg
8	8	-----> return 1
206	31002	---> __fish_svn_prompt
9	62	----> if not command -sq svn...
53	53	-----> not command -sq svn
113	30675	----> set -l checkout_info (command svn info ^/dev/null)
30562	30562	-----> command svn info ^/dev/null
18	59	----> if [ $status -ne 0 ]...
32	32	-----> [ $status -ne 0 ]
9	9	-----> return
14	37	-> if not test $last_status -eq 0...
23	23	--> not test $last_status -eq 0
25	25	-> echo -n "$suffix "
27	27	-> set_color normal
24	24	> echo $_ " "
102	176	> __fish_pwd
74	74	-> pwd
59	87	> __fish_disable_bracketed_paste 'command git ls-files --others --exclude-standard | wc -l | string trim'
28	28	-> printf "\e[?2004l"
29	29	> echo $_ " "
39	102	> __fish_pwd
63	63	-> pwd
11604	11604	> command git ls-files --others --exclude-standard | wc -l | string trim
55	106	> __fish_enable_bracketed_paste
51	51	-> printf "\e[?2004h"
44	360	> fish_mode_prompt
164	316	-> fish_default_mode_prompt
14	152	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
109	109	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
29	29	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
662	33233	> fish_prompt
38	38	-> set -l last_status $status
10	26	-> if not set -q __fish_git_prompt_show_informative_status...
16	16	--> not set -q __fish_git_prompt_show_informative_status
8	21	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
7	21	-> if not set -q __fish_git_prompt_color_branch...
14	14	--> not set -q __fish_git_prompt_color_branch
9	21	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
8	24	-> if not set -q __fish_git_prompt_char_upstream_ahead...
16	16	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
7	19	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	20	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
8	20	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
7	19	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
8	26	-> if not set -q __fish_git_prompt_color_dirtystate...
18	18	--> not set -q __fish_git_prompt_color_dirtystate
8	20	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
7	19	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
8	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
8	20	-> if not set -q __fish_prompt_normal...
12	12	--> not set -q __fish_prompt_normal
20	20	-> set -l color_cwd
19	19	-> set -l prefix
18	18	-> set -l suffix
25	79	-> switch "$USER"...
33	33	--> set color_cwd $fish_color_cwd
21	21	--> set suffix '$'
34	34	-> set_color $color_cwd
67	633	-> echo -n (prompt_pwd)
164	566	--> prompt_pwd
33	33	---> set -l options 'h/help'
38	38	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
9	24	---> if set -q _flag_help...
15	15	----> set -q _flag_help
13	13	---> set -q fish_prompt_pwd_dir_length
26	26	---> or set -l fish_prompt_pwd_dir_length 1
53	53	---> set realhome ~
77	137	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
60	60	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
14	78	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
21	21	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
43	43	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
22	22	-> set_color normal
140	31104	-> printf '%s ' (__fish_vcs_prompt)
73	30964	--> __fish_vcs_prompt
651	4410	---> __fish_git_prompt
12	93	----> if not command -sq git...
81	81	-----> not command -sq git
108	3632	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
3524	3524	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
7	7	----> or return
356	431	---> __fish_hg_prompt
11	75	----> if not command -sq hg...
55	55	-----> not command -sq hg
9	9	-----> return 1
200	26050	---> __fish_svn_prompt
8	66	----> if not command -sq svn...
58	58	-----> not command -sq svn
277	25596	----> set -l checkout_info (command svn info ^/dev/null)
25319	25319	-----> command svn info ^/dev/null
49	188	----> if [ $status -ne 0 ]...
115	115	-----> [ $status -ne 0 ]
24	24	-----> return
35	101	-> if not test $last_status -eq 0...
66	66	--> not test $last_status -eq 0
64	64	-> echo -n "$suffix "
63	63	-> set_color normal
32	32	> echo $_ " "
50	159	> __fish_pwd
109	109	-> pwd
608	1270	> up-or-search
45	227	-> if commandline --search-mode...
182	182	--> commandline --search-mode
19	76	-> if commandline --paging-mode...
57	57	--> commandline --paging-mode
205	270	-> set lineno (commandline -L)
65	65	--> commandline -L
36	89	-> switch $lineno...
53	53	--> commandline -f history-search-backward
219	394	> up-or-search
30	175	-> if commandline --search-mode...
70	70	--> commandline --search-mode
46	46	--> commandline -f history-search-backward
29	29	--> return
348	23844	> __fish_cancel_commandline
179	269	-> set -l cmd (commandline)
90	90	--> commandline
58	23227	-> if test -n "$cmd"...
89	89	--> test -n "$cmd"
237	237	--> commandline -C 1000000
26	419	--> if set -q fish_color_cancel...
58	58	---> set -q fish_color_cancel
210	335	---> echo -ns (set_color $fish_color_cancel) "^C" (set_color normal)
75	75	----> set_color $fish_color_cancel
50	50	----> set_color normal
37	15255	--> if command -sq tput...
5566	5566	---> command -sq tput
182	9652	---> echo -n (tput el; or tput ce)
9470	9470	----> tput el
186	6882	--> for i in (seq (commandline -L))...
5654	6594	---> seq (commandline -L)
781	897	----> source /usr/local/Cellar/fish/2.7.1/share/fish/functions/seq.fish
11	116	-----> if not command -sq seq...
105	105	------> not command -sq seq
43	43	----> commandline -L
58	58	---> echo ""
44	44	---> echo ""
247	247	--> commandline ""
40	40	--> commandline -f repaint
39	276	> fish_mode_prompt
162	237	-> fish_default_mode_prompt
11	75	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
38	38	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
26	26	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
596	47542	> fish_prompt
37	37	-> set -l last_status $status
10	25	-> if not set -q __fish_git_prompt_show_informative_status...
15	15	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
9	23	-> if not set -q __fish_git_prompt_showupstream...
14	14	--> not set -q __fish_git_prompt_showupstream
9	28	-> if not set -q __fish_git_prompt_char_upstream_ahead...
19	19	--> not set -q __fish_git_prompt_char_upstream_ahead
11	26	-> if not set -q __fish_git_prompt_char_upstream_behind...
15	15	--> not set -q __fish_git_prompt_char_upstream_behind
10	25	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
9	25	-> if not set -q __fish_git_prompt_char_stagedstate...
16	16	--> not set -q __fish_git_prompt_char_stagedstate
10	28	-> if not set -q __fish_git_prompt_char_dirtystate...
18	18	--> not set -q __fish_git_prompt_char_dirtystate
10	26	-> if not set -q __fish_git_prompt_char_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_char_untrackedfiles
9	25	-> if not set -q __fish_git_prompt_char_conflictedstate...
16	16	--> not set -q __fish_git_prompt_char_conflictedstate
20	57	-> if not set -q __fish_git_prompt_char_cleanstate...
37	37	--> not set -q __fish_git_prompt_char_cleanstate
8	26	-> if not set -q __fish_git_prompt_color_dirtystate...
18	18	--> not set -q __fish_git_prompt_color_dirtystate
6	17	-> if not set -q __fish_git_prompt_color_stagedstate...
11	11	--> not set -q __fish_git_prompt_color_stagedstate
7	17	-> if not set -q __fish_git_prompt_color_invalidstate...
10	10	--> not set -q __fish_git_prompt_color_invalidstate
16	27	-> if not set -q __fish_git_prompt_color_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_color_untrackedfiles
12	32	-> if not set -q __fish_git_prompt_color_cleanstate...
20	20	--> not set -q __fish_git_prompt_color_cleanstate
8	55	-> if not set -q __fish_prompt_normal...
47	47	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
16	16	-> set -l prefix
15	15	-> set -l suffix
23	64	-> switch "$USER"...
24	24	--> set color_cwd $fish_color_cwd
17	17	--> set suffix '$'
24	24	-> set_color $color_cwd
55	785	-> echo -n (prompt_pwd)
250	730	--> prompt_pwd
34	34	---> set -l options 'h/help'
61	61	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	21	---> if set -q _flag_help...
13	13	----> set -q _flag_help
11	11	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
66	66	---> set realhome ~
73	178	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
105	105	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
12	92	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
43	43	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
37	37	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
18	18	-> set_color normal
88	45390	-> printf '%s ' (__fish_vcs_prompt)
83	45302	--> __fish_vcs_prompt
593	16687	---> __fish_git_prompt
9	75	----> if not command -sq git...
66	66	-----> not command -sq git
126	15980	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
15854	15854	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
31	31	----> test -n "$repo_info"
8	8	----> or return
502	639	---> __fish_hg_prompt
16	137	----> if not command -sq hg...
105	105	-----> not command -sq hg
16	16	-----> return 1
328	27893	---> __fish_svn_prompt
11	90	----> if not command -sq svn...
79	79	-----> not command -sq svn
161	27420	----> set -l checkout_info (command svn info ^/dev/null)
27259	27259	-----> command svn info ^/dev/null
15	55	----> if [ $status -ne 0 ]...
32	32	-----> [ $status -ne 0 ]
8	8	-----> return
10	28	-> if not test $last_status -eq 0...
18	18	--> not test $last_status -eq 0
17	17	-> echo -n "$suffix "
23	23	-> set_color normal
17	17	> echo $_ " "
83	146	> __fish_pwd
63	63	-> pwd
731	924	> source /Users/takuto/.local/share/fish/generated_completions/pwd.fish
157	157	-> complete -c pwd -s L --description 'Display the logical current working directory.'
36	36	-> complete -c pwd -s P --description 'Display the physical current working directory (all symbolic links resolved).'
59	87	> __fish_disable_bracketed_paste 'pwd profile.txt '
28	28	-> printf "\e[?2004l"
26	26	> echo $_ " "
42	111	> __fish_pwd
69	69	-> pwd
59	59	> pwd profile.txt
35	58	> __fish_enable_bracketed_paste
23	23	-> printf "\e[?2004h"
39	319	> fish_mode_prompt
172	280	-> fish_default_mode_prompt
29	108	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
46	46	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
33	33	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
709	40278	> fish_prompt
46	46	-> set -l last_status $status
12	30	-> if not set -q __fish_git_prompt_show_informative_status...
18	18	--> not set -q __fish_git_prompt_show_informative_status
13	37	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
24	24	--> not set -q __fish_git_prompt_hide_untrackedfiles
11	28	-> if not set -q __fish_git_prompt_color_branch...
17	17	--> not set -q __fish_git_prompt_color_branch
9	24	-> if not set -q __fish_git_prompt_showupstream...
15	15	--> not set -q __fish_git_prompt_showupstream
23	38	-> if not set -q __fish_git_prompt_char_upstream_ahead...
15	15	--> not set -q __fish_git_prompt_char_upstream_ahead
10	24	-> if not set -q __fish_git_prompt_char_upstream_behind...
14	14	--> not set -q __fish_git_prompt_char_upstream_behind
10	25	-> if not set -q __fish_git_prompt_char_upstream_prefix...
15	15	--> not set -q __fish_git_prompt_char_upstream_prefix
10	26	-> if not set -q __fish_git_prompt_char_stagedstate...
16	16	--> not set -q __fish_git_prompt_char_stagedstate
10	25	-> if not set -q __fish_git_prompt_char_dirtystate...
15	15	--> not set -q __fish_git_prompt_char_dirtystate
10	26	-> if not set -q __fish_git_prompt_char_untrackedfiles...
16	16	--> not set -q __fish_git_prompt_char_untrackedfiles
10	26	-> if not set -q __fish_git_prompt_char_conflictedstate...
16	16	--> not set -q __fish_git_prompt_char_conflictedstate
10	25	-> if not set -q __fish_git_prompt_char_cleanstate...
15	15	--> not set -q __fish_git_prompt_char_cleanstate
10	26	-> if not set -q __fish_git_prompt_color_dirtystate...
16	16	--> not set -q __fish_git_prompt_color_dirtystate
10	25	-> if not set -q __fish_git_prompt_color_stagedstate...
15	15	--> not set -q __fish_git_prompt_color_stagedstate
58	73	-> if not set -q __fish_git_prompt_color_invalidstate...
15	15	--> not set -q __fish_git_prompt_color_invalidstate
12	33	-> if not set -q __fish_git_prompt_color_untrackedfiles...
21	21	--> not set -q __fish_git_prompt_color_untrackedfiles
12	50	-> if not set -q __fish_git_prompt_color_cleanstate...
38	38	--> not set -q __fish_git_prompt_color_cleanstate
11	28	-> if not set -q __fish_prompt_normal...
17	17	--> not set -q __fish_prompt_normal
27	27	-> set -l color_cwd
26	26	-> set -l prefix
25	25	-> set -l suffix
33	96	-> switch "$USER"...
35	35	--> set color_cwd $fish_color_cwd
28	28	--> set suffix '$'
36	36	-> set_color $color_cwd
96	1314	-> echo -n (prompt_pwd)
252	1218	--> prompt_pwd
31	31	---> set -l options 'h/help'
60	60	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
47	137	---> if set -q _flag_help...
90	90	----> set -q _flag_help
99	99	---> set -q fish_prompt_pwd_dir_length
110	110	---> or set -l fish_prompt_pwd_dir_length 1
239	239	---> set realhome ~
99	180	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
81	81	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
19	110	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
24	24	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
67	67	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
43	43	-> set_color normal
85	37193	-> printf '%s ' (__fish_vcs_prompt)
57	37108	--> __fish_vcs_prompt
791	8468	---> __fish_git_prompt
17	145	----> if not command -sq git...
128	128	-----> not command -sq git
168	7486	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
7318	7318	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
37	37	----> test -n "$repo_info"
9	9	----> or return
434	542	---> __fish_hg_prompt
15	108	----> if not command -sq hg...
83	83	-----> not command -sq hg
10	10	-----> return 1
219	28041	---> __fish_svn_prompt
11	87	----> if not command -sq svn...
76	76	-----> not command -sq svn
118	27679	----> set -l checkout_info (command svn info ^/dev/null)
27561	27561	-----> command svn info ^/dev/null
16	56	----> if [ $status -ne 0 ]...
31	31	-----> [ $status -ne 0 ]
9	9	-----> return
15	151	-> if not test $last_status -eq 0...
21	21	--> not test $last_status -eq 0
115	115	--> set_color $fish_color_error
24	24	-> echo -n "$suffix "
19	19	-> set_color normal
19	19	> echo $_ " "
41	99	> __fish_pwd
58	58	-> pwd
69	106	> __fish_disable_bracketed_paste ls
37	37	-> printf "\e[?2004l"
56	56	> echo $_ " "
53	118	> __fish_pwd
65	65	-> pwd
376	8850	> ls
8474	8474	-> command ls -G $argv
47	84	> __fish_enable_bracketed_paste
37	37	-> printf "\e[?2004h"
33	298	> fish_mode_prompt
132	265	-> fish_default_mode_prompt
12	133	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
98	98	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
23	23	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
506	45581	> fish_prompt
31	31	-> set -l last_status $status
9	21	-> if not set -q __fish_git_prompt_show_informative_status...
12	12	--> not set -q __fish_git_prompt_show_informative_status
7	18	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
11	11	--> not set -q __fish_git_prompt_hide_untrackedfiles
6	17	-> if not set -q __fish_git_prompt_color_branch...
11	11	--> not set -q __fish_git_prompt_color_branch
8	18	-> if not set -q __fish_git_prompt_showupstream...
10	10	--> not set -q __fish_git_prompt_showupstream
7	17	-> if not set -q __fish_git_prompt_char_upstream_ahead...
10	10	--> not set -q __fish_git_prompt_char_upstream_ahead
7	30	-> if not set -q __fish_git_prompt_char_upstream_behind...
23	23	--> not set -q __fish_git_prompt_char_upstream_behind
7	17	-> if not set -q __fish_git_prompt_char_upstream_prefix...
10	10	--> not set -q __fish_git_prompt_char_upstream_prefix
7	17	-> if not set -q __fish_git_prompt_char_stagedstate...
10	10	--> not set -q __fish_git_prompt_char_stagedstate
7	16	-> if not set -q __fish_git_prompt_char_dirtystate...
9	9	--> not set -q __fish_git_prompt_char_dirtystate
6	16	-> if not set -q __fish_git_prompt_char_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_char_untrackedfiles
7	16	-> if not set -q __fish_git_prompt_char_conflictedstate...
9	9	--> not set -q __fish_git_prompt_char_conflictedstate
6	16	-> if not set -q __fish_git_prompt_char_cleanstate...
10	10	--> not set -q __fish_git_prompt_char_cleanstate
6	25	-> if not set -q __fish_git_prompt_color_dirtystate...
19	19	--> not set -q __fish_git_prompt_color_dirtystate
5	15	-> if not set -q __fish_git_prompt_color_stagedstate...
10	10	--> not set -q __fish_git_prompt_color_stagedstate
7	16	-> if not set -q __fish_git_prompt_color_invalidstate...
9	9	--> not set -q __fish_git_prompt_color_invalidstate
6	16	-> if not set -q __fish_git_prompt_color_untrackedfiles...
10	10	--> not set -q __fish_git_prompt_color_untrackedfiles
6	15	-> if not set -q __fish_git_prompt_color_cleanstate...
9	9	--> not set -q __fish_git_prompt_color_cleanstate
6	16	-> if not set -q __fish_prompt_normal...
10	10	--> not set -q __fish_prompt_normal
17	17	-> set -l color_cwd
15	15	-> set -l prefix
15	15	-> set -l suffix
23	73	-> switch "$USER"...
32	32	--> set color_cwd $fish_color_cwd
18	18	--> set suffix '$'
65	65	-> set_color $color_cwd
77	823	-> echo -n (prompt_pwd)
268	746	--> prompt_pwd
51	51	---> set -l options 'h/help'
48	48	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
13	29	---> if set -q _flag_help...
16	16	----> set -q _flag_help
15	15	---> set -q fish_prompt_pwd_dir_length
25	25	---> or set -l fish_prompt_pwd_dir_length 1
58	58	---> set realhome ~
95	162	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
67	67	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
16	90	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
25	25	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
49	49	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
25	25	-> set_color normal
69	43611	-> printf '%s ' (__fish_vcs_prompt)
54	43542	--> __fish_vcs_prompt
783	5645	---> __fish_git_prompt
12	117	----> if not command -sq git...
105	105	-----> not command -sq git
131	4706	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4575	4575	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
30	30	----> test -n "$repo_info"
9	9	----> or return
449	541	---> __fish_hg_prompt
13	92	----> if not command -sq hg...
68	68	-----> not command -sq hg
11	11	-----> return 1
213	37302	---> __fish_svn_prompt
11	81	----> if not command -sq svn...
70	70	-----> not command -sq svn
112	36958	----> set -l checkout_info (command svn info ^/dev/null)
36846	36846	-----> command svn info ^/dev/null
15	50	----> if [ $status -ne 0 ]...
28	28	-----> [ $status -ne 0 ]
7	7	-----> return
12	31	-> if not test $last_status -eq 0...
19	19	--> not test $last_status -eq 0
22	22	-> echo -n "$suffix "
25	25	-> set_color normal
19	19	> echo $_ " "
39	112	> __fish_pwd
73	73	-> pwd
67	104	> __fish_disable_bracketed_paste pwd
37	37	-> printf "\e[?2004l"
47	47	> echo $_ " "
58	131	> __fish_pwd
73	73	-> pwd
105	105	> pwd
42	71	> __fish_enable_bracketed_paste
29	29	-> printf "\e[?2004h"
45	326	> fish_mode_prompt
186	281	-> fish_default_mode_prompt
16	95	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
44	44	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
35	35	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
806	32618	> fish_prompt
40	40	-> set -l last_status $status
11	28	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
9	22	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
13	13	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
8	20	-> if not set -q __fish_git_prompt_showupstream...
12	12	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
8	20	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
8	20	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
8	20	-> if not set -q __fish_git_prompt_char_stagedstate...
12	12	--> not set -q __fish_git_prompt_char_stagedstate
7	19	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
7	19	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	20	-> if not set -q __fish_git_prompt_char_conflictedstate...
12	12	--> not set -q __fish_git_prompt_char_conflictedstate
9	37	-> if not set -q __fish_git_prompt_char_cleanstate...
28	28	--> not set -q __fish_git_prompt_char_cleanstate
8	20	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
8	20	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
8	20	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
8	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
7	19	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
9	21	-> if not set -q __fish_prompt_normal...
12	12	--> not set -q __fish_prompt_normal
20	20	-> set -l color_cwd
19	19	-> set -l prefix
32	32	-> set -l suffix
26	76	-> switch "$USER"...
28	28	--> set color_cwd $fish_color_cwd
22	22	--> set suffix '$'
29	29	-> set_color $color_cwd
84	822	-> echo -n (prompt_pwd)
186	738	--> prompt_pwd
28	28	---> set -l options 'h/help'
61	61	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
15	36	---> if set -q _flag_help...
21	21	----> set -q _flag_help
19	19	---> set -q fish_prompt_pwd_dir_length
30	30	---> or set -l fish_prompt_pwd_dir_length 1
64	64	---> set realhome ~
109	195	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
86	86	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
21	119	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
35	35	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
63	63	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
26	26	-> set_color normal
142	30143	-> printf '%s ' (__fish_vcs_prompt)
75	30001	--> __fish_vcs_prompt
948	6039	---> __fish_git_prompt
75	257	----> if not command -sq git...
182	182	-----> not command -sq git
146	4802	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
4656	4656	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
25	25	----> test -n "$repo_info"
7	7	----> or return
367	445	---> __fish_hg_prompt
10	78	----> if not command -sq hg...
59	59	-----> not command -sq hg
9	9	-----> return 1
191	23442	---> __fish_svn_prompt
9	70	----> if not command -sq svn...
61	61	-----> not command -sq svn
241	23036	----> set -l checkout_info (command svn info ^/dev/null)
22795	22795	-----> command svn info ^/dev/null
38	145	----> if [ $status -ne 0 ]...
82	82	-----> [ $status -ne 0 ]
25	25	-----> return
28	87	-> if not test $last_status -eq 0...
59	59	--> not test $last_status -eq 0
57	57	-> echo -n "$suffix "
73	73	-> set_color normal
24	24	> echo $_ " "
153	310	> __fish_pwd
157	157	-> pwd
89	138	> __fish_disable_bracketed_paste ls
49	49	-> printf "\e[?2004l"
34	34	> echo $_ " "
60	131	> __fish_pwd
71	71	-> pwd
232	5378	> ls
5146	5146	-> command ls -G $argv
50	97	> __fish_enable_bracketed_paste
47	47	-> printf "\e[?2004h"
46	382	> fish_mode_prompt
165	336	-> fish_default_mode_prompt
14	171	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
127	127	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
30	30	---> or test "$fish_key_bindings" = "fish_hybrid_key_bindings"
820	33727	> fish_prompt
51	51	-> set -l last_status $status
11	28	-> if not set -q __fish_git_prompt_show_informative_status...
17	17	--> not set -q __fish_git_prompt_show_informative_status
10	24	-> if not set -q __fish_git_prompt_hide_untrackedfiles...
14	14	--> not set -q __fish_git_prompt_hide_untrackedfiles
9	22	-> if not set -q __fish_git_prompt_color_branch...
13	13	--> not set -q __fish_git_prompt_color_branch
7	26	-> if not set -q __fish_git_prompt_showupstream...
19	19	--> not set -q __fish_git_prompt_showupstream
8	21	-> if not set -q __fish_git_prompt_char_upstream_ahead...
13	13	--> not set -q __fish_git_prompt_char_upstream_ahead
9	21	-> if not set -q __fish_git_prompt_char_upstream_behind...
12	12	--> not set -q __fish_git_prompt_char_upstream_behind
7	19	-> if not set -q __fish_git_prompt_char_upstream_prefix...
12	12	--> not set -q __fish_git_prompt_char_upstream_prefix
9	20	-> if not set -q __fish_git_prompt_char_stagedstate...
11	11	--> not set -q __fish_git_prompt_char_stagedstate
8	20	-> if not set -q __fish_git_prompt_char_dirtystate...
12	12	--> not set -q __fish_git_prompt_char_dirtystate
8	20	-> if not set -q __fish_git_prompt_char_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_char_untrackedfiles
8	23	-> if not set -q __fish_git_prompt_char_conflictedstate...
15	15	--> not set -q __fish_git_prompt_char_conflictedstate
7	19	-> if not set -q __fish_git_prompt_char_cleanstate...
12	12	--> not set -q __fish_git_prompt_char_cleanstate
9	21	-> if not set -q __fish_git_prompt_color_dirtystate...
12	12	--> not set -q __fish_git_prompt_color_dirtystate
7	19	-> if not set -q __fish_git_prompt_color_stagedstate...
12	12	--> not set -q __fish_git_prompt_color_stagedstate
8	20	-> if not set -q __fish_git_prompt_color_invalidstate...
12	12	--> not set -q __fish_git_prompt_color_invalidstate
8	20	-> if not set -q __fish_git_prompt_color_untrackedfiles...
12	12	--> not set -q __fish_git_prompt_color_untrackedfiles
7	19	-> if not set -q __fish_git_prompt_color_cleanstate...
12	12	--> not set -q __fish_git_prompt_color_cleanstate
7	20	-> if not set -q __fish_prompt_normal...
13	13	--> not set -q __fish_prompt_normal
21	21	-> set -l color_cwd
20	20	-> set -l prefix
22	22	-> set -l suffix
36	78	-> switch "$USER"...
23	23	--> set color_cwd $fish_color_cwd
19	19	--> set suffix '$'
29	29	-> set_color $color_cwd
57	544	-> echo -n (prompt_pwd)
147	487	--> prompt_pwd
27	27	---> set -l options 'h/help'
37	37	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
8	20	---> if set -q _flag_help...
12	12	----> set -q _flag_help
10	10	---> set -q fish_prompt_pwd_dir_length
17	17	---> or set -l fish_prompt_pwd_dir_length 1
49	49	---> set realhome ~
63	116	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
53	53	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
10	64	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
18	18	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
36	36	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
17	17	-> set_color normal
62	31653	-> printf '%s ' (__fish_vcs_prompt)
44	31591	--> __fish_vcs_prompt
539	7031	---> __fish_git_prompt
9	87	----> if not command -sq git...
78	78	-----> not command -sq git
135	6370	----> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null)
6235	6235	-----> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD ^/dev/null
27	27	----> test -n "$repo_info"
8	8	----> or return
347	421	---> __fish_hg_prompt
9	74	----> if not command -sq hg...
57	57	-----> not command -sq hg
8	8	-----> return 1
161	24095	---> __fish_svn_prompt
8	66	----> if not command -sq svn...
58	58	-----> not command -sq svn
179	23807	----> set -l checkout_info (command svn info ^/dev/null)
23628	23628	-----> command svn info ^/dev/null
17	61	----> if [ $status -ne 0 ]...
34	34	-----> [ $status -ne 0 ]
10	10	-----> return
13	37	-> if not test $last_status -eq 0...
24	24	--> not test $last_status -eq 0
24	24	-> echo -n "$suffix "
29	29	-> set_color normal
115	115	> echo $_ " "
44	122	> __fish_pwd
78	78	-> pwd
68	814	> __fish_disable_bracketed_paste PROCESS_EXIT 3750 0
746	746	-> printf "\e[?2004l"
